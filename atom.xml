<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.baoshuo.ren</id>
    <title>宝硕博客</title>
    <updated>2022-03-08T09:58:11.431Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>宝硕</name>
        <uri>https://baoshuo.ren</uri>
    </author>
    <link rel="alternate" href="https://blog.baoshuo.ren"/>
    <entry>
        <title type="html"><![CDATA[2022 年常中集训游记]]></title>
        <id>/post/travel-scz-2022/</id>
        <link href="/post/travel-scz-2022/"/>
        <updated>2022-02-28T09:03:57.000Z</updated>
        <summary type="html"><![CDATA[这是我第一次出省参加外校集训。此行的目的地是江苏省常州高级中学，于 1907 年建校，截止本文写作时该校在「OIerDb 全国信息学竞赛学校排行榜」上位列第九。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2022/02/28/J5yx9hPKLZdu4Hz.jpg" width="100%" alt="2022 年常中集训游记" /><p>这是我第一次出省参加外校集训。此行的目的地是江苏省常州高级中学，于 1907 年建校，截止本文写作时该校在「OIerDb 全国信息学竞赛学校排行榜」上位列第九。</p><span id="more"></span><h2 id="启程">启程</h2><p>走前 2 天，也就是 2 月 18 日，我们才正式确定要动身去常中参加集训，当时火车票余票已经所剩无几了，索性直接买了一等座，省时省力，就是有点费钱。</p><p><img src="https://s1.baoshuo.ren/2022/02/28/ys2OdY56rtDC43U.jpg" width="51.25%" style="margin-right:4px"><img src="https://s1.baoshuo.ren/2022/02/28/JzSrD97LyP4KI8b.jpg" width="45%"></p><p>一等座确实比二等座舒服了很多，还有免费的零食、饮料、矿泉水。不过，要是下次可以自己挑的话，我还是选二等座，经济实惠。</p><img src="https://s1.baoshuo.ren/2022/02/28/AnK1PqdCfQHEcYj.jpg" width="300" style="display:block;margin:0 auto 1rem"><p>晚饭在火车上买了份「豚骨面」，花了 39 元，除了汤有点发酸（可能是醋倒多了）以外别的没啥毛病。</p><h2 id="见闻">见闻</h2><h3 id="住宿">住宿</h3><p>由于学校没有给我们提供宿舍，所以我们两人成团一起住宾馆，每间 160 元/晚。</p><p><img src="https://s1.baoshuo.ren/2022/02/28/vbwahiHPXu7IU21.jpg" alt="" loading="lazy"></p><p>环境还行，凑合着住。</p><h3 id="食堂">食堂</h3><p><img src="https://s1.baoshuo.ren/2022/02/28/YgAPOB6K7xFnwJI.jpg" alt="" loading="lazy"></p><p>▲ 外景</p><img src="https://s1.baoshuo.ren/2022/02/27/xaUc8KZ1WICibop.jpg" width="300" style="display:block;margin:0 auto 1rem"><p>▲ 饭卡</p><p>食堂的餐食比假期的二南好多了，但我觉得赶不上开学时候的二南食堂。</p><h3 id="蹭网">蹭网</h3><p>常中并没有给我们分配上网账号，所以要么用打开文件资源管理器都能死机的台式机上网，要么用自己的笔记本离线操作。</p><p>毛主席说过：「自己动手，丰衣足食。」所以我们把台式机的网线拔下来插到了自己的电脑上，并且手动配好了 IP 地址，成功解决了上网问题。</p><p>蹭网期间出一个小插曲：有人拿自己配好的网开热点给大家共享网络，结果被系统自动断网并且封掉设备了…</p><h3 id="校园">校园</h3><p><img src="https://s1.baoshuo.ren/2022/02/28/LS9EumNvBynMIV5.jpg" alt="" loading="lazy"></p><p>进入校园。</p><p><img src="https://s1.baoshuo.ren/2022/02/28/5K2pODGQ1U3ufhF.jpg" alt="" loading="lazy"></p><p>标志性的「<strong>SCZ</strong>」标识。</p><p><img src="https://s1.baoshuo.ren/2022/02/28/RYWTNgijmfVn6H2.jpg" alt="" loading="lazy"></p><p>校园一角。</p><p><img src="https://s1.baoshuo.ren/2022/02/28/wF9MVZO6W21rvnp.jpg" alt="" loading="lazy"></p><p>教学楼外景。</p><img src="https://s1.baoshuo.ren/2022/02/28/vqHWncS4VOZ6Rhd.jpg" height="450"><p>小亭子。</p><img src="https://s1.baoshuo.ren/2022/02/28/r7RFDVZcCAPuoNx.jpg" width="48%" style="margin-right:4px"> <img src="https://s1.baoshuo.ren/2022/02/28/RYzfbEPtmDBk6F9.jpg" width="48%"><p>学校旁边的 <a href="https://baike.baidu.com/item/%E5%A4%A9%E5%AE%81%E5%AE%9D%E5%A1%94" rel="external nofollow noreferrer">天宁宝塔</a>。</p><h2 id="返程">返程</h2><p>来的时候在火车上吃的是面条，于是返程的时候买了一盒「红烧牛肉饭」，花了 40 元，味道也不错。</p><p><img src="https://s1.baoshuo.ren/2022/02/28/4pWTVO6eE1UBwKk.jpg" alt="" loading="lazy"></p><h3 id="花絮">花絮</h3><p>回学校的最后一段路是坐公交回去的。</p><p>到站了，老师带着我们下了车，下车后才发现 zzq 还在车上，于是我们眼睁睁地看着公交车继续前行，而 zzq 还不知道他已经坐过站了…</p><h2 id="后记-6">后记</h2><p>在校期间的学习、交流等活动均属保密范畴，在本文中不做叙述。</p><p>希望以后还能有这么好的机会参加外出集训。</p>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[再见，2021 —— 我的 2021 年度总结]]></title>
        <id>/post/goodbye-2021/</id>
        <link href="/post/goodbye-2021/"/>
        <updated>2021-12-31T06:21:49.000Z</updated>
        <summary type="html"><![CDATA[时光飞逝，2021 年就这么过完了。在这一年，我经历了很多，也学到了很多。现在，让我坐在电脑前，用文字的方式将这一切都记录下来…]]></summary>
        <content type="html"><![CDATA[<img src="https://arina.loli.net/2022/01/01/E215KwxIFUGnXlN.png" width="100%" alt="再见，2021 —— 我的 2021 年度总结" /><p>时光飞逝，2021 年就这么过完了。在这一年，我经历了很多，也学到了很多。现在，让我坐在电脑前，用文字的方式将这一切都记录下来…</p><span id="more"></span><blockquote><p>本文内容按照发生时间先后排序。</p></blockquote><h2 id="大事记">大事记</h2><h3 id="封校的日子">封校的日子</h3><p>2021 年 1 月 3 日，<a href="https://zh.wikipedia.org/wiki/2019%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92%E7%97%85%E6%B2%B3%E5%8C%97%E7%9C%81%E7%96%AB%E6%83%85#1%E6%9C%88_2" rel="external nofollow noreferrer">石家庄疫情</a> 爆发，石家庄市进入战时状态<sup>（<a href="http://www.xinhuanet.com/local/2021-01/04/c_1126942898.htm" rel="external nofollow noreferrer">新华网</a>）</sup>。</p><p>次日清晨，学校里传开了一条爆炸性新闻 —— 封校了！</p><p>中午下课后，大家纷纷奔向学校超市，开始抢购商品。由于初三下课最晚，等我们奔向超市的时候，超市空得连价签都没了。我并没有去抢，因为我在元旦假期返校的时候带了不少东西，足够我吃了。</p><p>然而超市一连好几天无货可卖，这使得我们都开始担心 —— 万一哪天没饭了怎么办？而这时学校终于传来了好消息：学校和政府终于为超市协调来了货源，可以继续上架面包、牛奶和生活必需品了。</p><p>不过我去食堂的时候倒是发现了一个以前从未出现的奇妙现象，那就是肉给的比菜多。我举一个典型事例：我去食堂买板面吃，食堂阿姨给我盛了半勺子肉，然后从旁边的菜盆里夹了三根很小的菠菜叶放到了碗里。除此之外，免费续米饭的量也变得越来越少。不过有的吃我就知足了，没必要那么挑。</p><p>周末学校还给放了电影，周日按照正常留宿作息多睡了会。封校的第一周就这么过去了。</p><p>谁也没想到封校会持续那么久，于是大家都在学校呆着，在学习的同时等待外界的好消息。</p><p>有一次教育处的尹主任值我们班晚自习，我正好坐第一排，作业写完了没事干，又去不了高中部，便和老师聊了起来。我向老师抱怨初三的学生觉不够睡，而初一的学生休息时间太多以至于睡不着觉，希望能多给初三的学生点休息时间，不然上课得困死。听完以后，老师给年级主任发了条微信。没想到，第二节晚自习下课，年级就广播说以后每周六都让初三的多睡一小时。多亏了尹主任的反馈，我终于能补个好觉了，上课也终于不用再半睡半醒了。</p><p>就这样又过了大概二十天，外面终于传来了好消息 —— 解封了！</p><p>听到解封的消息时，我的心情很复杂 —— 我的健康码是黄色的。这代表即使学校解封了，我也回不了家。</p><p>好在解封的第二天，我的健康码变回了绿色，当天下午我被接回了家，一切都结束了。</p><h3 id="中考">中考</h3><p>6 月 21 日，我迎来了人生中的第一次大考 —— 中考。</p><img style="display:inline-block" width="42.5%" src="https://arina.loli.net/2021/12/29/rtJy8mUM4jSRBNa.png"> <img style="display:inline-block" width="55%" src="https://arina.loli.net/2021/12/29/Gn4h1Qx2aMYkAsz.png"><p>说实话，头进考场我还是有一点点发慌的，因为我的知识大多都是退役以后现补的。物理的力学还没补，语文的古诗文刚背完原文没背课注和赏析，<span title="看完会吐">政治看都没看</span>…</p><p>总之没好好复习就是了。就这样硬着头皮进了考场，考啥算啥吧。</p><p>考完以后便是漫长的等待。7 月 3 日 0 时，终于出分了：</p><img width="500" src="https://arina.loli.net/2021/12/30/5PuseCqbXcI1KJ7.png/500/1000"><p>中考试卷的难易度还算适中，考得不算特别差，全市三千多名。</p><p>由于疫情的原因，石家庄并没有举行体育和实验的考试，所以中考总分只有 610 分。这对于体育不是很好的我来说是一个救命稻草，要不然我得比别人低至少 10 分，就没学可上了。</p><p>中考成绩出来以后，我向我的竞赛教练咨询了一下我的成绩，教练告诉我没啥问题，能上二南。</p><img width="500" src="https://arina.loli.net/2021/12/31/ot5Q9TGgVdzjNAn.png/500/1000"> <img width="300" src="https://arina.loli.net/2022/01/01/Mf75RmDqwz2UvAV.jpg"><p>居然混进了一个省重点高中… 失学儿童有学上了！</p><p>上了高中以后因为学习竞赛，被分到了省理科竞赛实验班，大概是全校最好的班级了吧。只不过因为班里其他人都是各地状元，所以我的文化课被同学们吊起来暴锤。</p><p>总体还行。只是没想到因为这些事就被别人称为了「别人家的孩子」，当不起当不起，毕竟我是真的菜…</p><h3 id="竞赛">竞赛</h3><p>今年的竞赛成绩并不理想。</p><p>CSP 拿了个省二，再多考 19 分就有省一了。</p><p>NOIP 打算冲省一，结果考试的时候电脑蓝屏了… 以后再也不用画图当草稿纸了！</p><p>不过和自己的好朋友们在一起<span title="卷">努力</span>还是很开心的~</p><p>丢人的练习详情可以在 GitHub 上查看：<a href="https://github.com/renbaoshuo/OI-codes/compare/2020...2021" rel="external nofollow noreferrer">Compare 2020…2021 - renbaoshuo/OI-codes</a>。</p><h2 id="一些零碎">一些零碎</h2><h3 id="gpg">GPG</h3><p>今年年初，我开始使用 GPG 来对我的消息和提交签名。</p><p>我的 GPG 公钥可以在 <a href="https://github.com/renbaoshuo.gpg" rel="external nofollow noreferrer">GitHub</a> 上找到。</p><h3 id="hustoj">HUSTOJ</h3><p><img src="https://arina.loli.net/2021/12/31/TOlfnVsAbjMhm7w.png" alt="" loading="lazy"></p><p><img src="https://arina.loli.net/2021/12/31/gcy5o86unOZTVLP.png" alt="" loading="lazy"></p><p>年初的时候给 HUSTOJ 贡献了两个主题：<a href="https://github.com/zhblue/hustoj/pull/722" rel="external nofollow noreferrer">SYZOJ</a> 和 <a href="https://github.com/zhblue/hustoj/pull/742" rel="external nofollow noreferrer">MDUI</a>。</p><p>因为 SYZOJ 主题被设置为了默认主题，所以年末的时候还被教练找上门问 HUSTOJ 相关的问题来了。</p><h3 id="计算机网络">计算机网络</h3><p>从寒假开始我开始接触计算机网络相关的知识，并且在 DN42 和公网上进行了相关实践。</p><h3 id="pure-主题">Pure 主题</h3><p><img src="https://arina.loli.net/2021/12/31/xLCYesoFNqvWfbz.png" alt="" loading="lazy"></p><p>这个主题移植自 <a href="https://github.com/imhanjie/gridea-theme-pure" rel="external nofollow noreferrer">imhanjie/gridea-theme-pure</a>。</p><p>源代码公开在 <a href="https://github.com/renbaoshuo/hexo-theme-pure" rel="external nofollow noreferrer">GitHub</a> 上。</p><h3 id="我的-yubikey">我的 Yubikey</h3><img width="400" src="https://arina.loli.net/2022/01/01/oMcSKAaizC7X9fZ.jpg"><p>体验良好，于是年末又入了个 CanoKey 作为备用 Key。</p><h3 id="oierdb-ng">OIerDb NG</h3><p><img src="https://arina.loli.net/2021/12/31/iBmAh6MeGRHyKl7.png" alt="" loading="lazy"></p><p>这是个从 12 月份刚刚开始搞的项目，目前正处于开发期，由我和 <a href="https://men.ci" rel="external nofollow noreferrer">Menci</a> 共同维护。</p><p>计划中 <a href="https://oier.baoshuo.dev" rel="external nofollow noreferrer">OIerDb NG</a> 将会最终替代现在的 <a href="https://bytew.net/OIer" rel="external nofollow noreferrer">OIerDb</a>。</p><p>OIerDb NG 的前端缓存式查询方法在提高查询速度的同时还省去了后端服务器的处理。</p><p>代码开源在 <a href="https://github.com/OIerDb-ng/OIerDb" rel="external nofollow noreferrer">GitHub</a> 上，欢迎 Star ~</p><h3 id="其他">其他</h3><img width="700" src="https://arina.loli.net/2021/12/31/y5cxk7JwaolAnO1.png"><p>其实里面有好多都是贡献给自己的私有仓库了。</p><p>可以直接去 <a href="https://github.com/renbaoshuo?tab=overview&amp;from=2021-12-01&amp;to=2021-12-31" rel="external nofollow noreferrer">我的 GitHub 主页</a> 上看公开的贡献详情，懒得再多说了。</p><h2 id="后记">后记</h2><p>2021 年一转眼就过完了，有很多新收获，同时也有很多遗憾，就不再多说了。</p><p>希望自己 2022 年会过得更好吧，也祝读者们新年快乐。</p><p><small>本文封面图片来自美国驻华使领馆官方推特账号，其他图片均为本人所拍摄或截取。</small></p>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈静态博客的自动部署方案]]></title>
        <id>/post/auto-deploy-static-blog/</id>
        <link href="/post/auto-deploy-static-blog/"/>
        <updated>2021-11-10T15:57:14.000Z</updated>
        <summary type="html"><![CDATA[笔者最近阅读了 ChrAlpha 大佬的 初探无后端静态博客自动化部署方案 这篇博文，发现其中的一些内容已经过时，所以我决定写下这篇博文来简单说一说现在（2021 年）静态博客的自动部署方案。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/10/31/uyZDJLU9NntF684.png" width="100%" alt="浅谈静态博客的自动部署方案" /><p>笔者最近阅读了 ChrAlpha 大佬的 <a href="https://blog.ichr.me/post/automated-deployment-of-serverless-static-blog/" rel="external nofollow noreferrer">初探无后端静态博客自动化部署方案</a> 这篇博文，发现其中的一些内容已经过时，所以我决定写下这篇博文来简单说一说现在（2021 年）静态博客的自动部署方案。</p><span id="more"></span><p>笔者 9 月中旬将自己的 OI 博客（<a href="https://oi.baoshuo.ren" rel="external nofollow noreferrer">oi.baoshuo.ren</a>）迁到了 GitHub 上并使用 GitHub Actions 进行持续部署，在感觉良好以后又在 10 月初将自己的主博客（<a href="https://blog.baoshuo.ren">blog.baoshuo.ren</a>）也迁移到了上面，这期间我尝试了多家 CI/CD 服务，并总结了一些配置要领。</p><p>本文中使用的 NodeJS 包管理器为 yarn 。</p><h2 id="github-actions">GitHub Actions</h2><p>GitHub Actions 是笔者最常用的 CI/CD 服务，没有之一。关于 GitHub Actions 的介绍可以查看 <a href="https://docs.github.com/en/actions" rel="external nofollow noreferrer">GitHub Actions 官网文档</a> 和阮老师的 <a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" rel="external nofollow noreferrer">GitHub Actions 入门教程</a> 。</p><p>配置 GitHub Actions 是非常方便的，无需绑定任何第三方平台，仅需在仓库中新建一个 <code>.github/workflows/*.yml</code> 即可。</p><blockquote><p>Hexo 核心团队成员之一 <a href="https://skk.moe" rel="external nofollow noreferrer">Sukka</a> 大佬在他的 <a href="https://blog.skk.moe/post/deploy-blog-to-cf-workers-site/" rel="external nofollow noreferrer">将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录</a> 一文中强烈建议不要使用任何 Hexo 的 GitHub Action ，把 Hexo 当成一个普通的依赖 NodeJS 的构建程序，遵照这个思路编写配置文件即可。</p></blockquote><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Build</span>

<span class="hljs-attr">on:</span>
  <span class="hljs-attr">push:</span>
    <span class="hljs-attr">branches:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span>
  <span class="hljs-attr">workflow_dispatch:</span>

<span class="hljs-attr">jobs:</span>
  <span class="hljs-attr">build:</span>
    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>
    <span class="hljs-attr">steps:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">14</span>
        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span>
        <span class="hljs-attr">with:</span>
          <span class="hljs-attr">node-version:</span> <span class="hljs-number">14</span>
          <span class="hljs-attr">cache:</span> <span class="hljs-string">yarn</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">install</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Site</span>
        <span class="hljs-attr">run:</span> <span class="hljs-string">yarn</span> <span class="hljs-string">build</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span>
        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span>
        <span class="hljs-attr">with:</span>
          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span>
          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">public</span>
          <span class="hljs-attr">cname:</span> <span class="hljs-string">blog.baoshuo.ren</span></code></pre><p>该工作流的大体步骤如下：</p><ol><li>检出仓库中的源文件到工作目录</li><li>安装 NodeJS 和 yarn 包管理器，如果使用的是 npm 包管理器请自行修改。</li><li>安装依赖。</li><li>构建站点。</li><li>部署到 GitHub Pages 。</li></ol><p>在构建完成后会发现文章的更新时间出现了错误，可以在生成前添加下面这步来将文件的修改日期更正为该文件最后一次 commit 时的时间。</p><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Fix</span> <span class="hljs-string">File</span> <span class="hljs-string">Modify</span> <span class="hljs-string">Date</span>
  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>
    <span class="hljs-string">git</span> <span class="hljs-string">ls-files</span> <span class="hljs-string">|</span> <span class="hljs-string">while</span> <span class="hljs-string">read</span> <span class="hljs-string">filepath;</span> <span class="hljs-string">do</span> <span class="hljs-string">touch</span> <span class="hljs-string">-d</span> <span class="hljs-string">&quot;$(git log -1 --format=&#x27;@%ct&#x27; $filepath)&quot;</span> <span class="hljs-string">&quot;$filepath&quot;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;Fixed: $filepath&quot;</span><span class="hljs-string">;</span> <span class="hljs-string">done</span></code></pre><p>当然，为了让 git 有日志可寻，还得在检出的时候顺带把所有提交历史一并拉下来，指定 <code>fetch-depth</code> 就能做到：</p><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>
  <span class="hljs-attr">with:</span>
    <span class="hljs-attr">fetch-depth:</span> <span class="hljs-number">0</span></code></pre><p>然后开启 GitHub Pages 功能即可访问到构建好的站点了。</p><h2 id="cloudflare-pages">Cloudflare Pages</h2><p>如果觉得 GitHub Actions + GitHub Pages 比较麻烦的话，才推出不久的 Cloudflare Pages 或许是一个不错的选择。</p><p>前往 <a href="https://dash.cloudflare.com" rel="external nofollow noreferrer">CloudFlare 管理面板</a> 登录账号后即可在右侧找到「网页」或者「Pages」功能的入口。</p><p>点击新建按钮，选择要使用的仓库，点击下一步。</p><p><img src="https://s1.baoshuo.ren/2021/10/31/9HpOja1N6JIK4DP.png" alt="" loading="lazy"></p><p>Cloudflare Pages 的构建配置模板中并没有给出 Hexo 的模板，所以需要自己填写：</p><p><img src="https://s1.baoshuo.ren/2021/10/31/zc7GdhKqCSfliQ1.png" alt="" loading="lazy"></p><p>完成之后点击确定就可以开始构建站点了。</p><p><img src="https://s1.baoshuo.ren/2021/10/31/Z9YrJGNByXhKbkl.png" alt="" loading="lazy"></p><p>构建完成后，访问分配的 <code>pages.dev</code> 子域名即可查看构建好的站点。</p><p>可以在「自定义域」选项卡中添加自定义域名。</p><h2 id="netlify">Netlify</h2><p>Netlify 是一家为静态网站提供托管服务的平台，有一定的免费额度，对于小型站点来说使用免费套餐就足够了。</p><p>首先登陆账号，点击「New site from Git」按钮新建一个站点。</p><p><img src="https://s1.baoshuo.ren/2021/10/31/sULdZkfIgOBhzJP.png" alt="" loading="lazy"></p><p>可以看到 Netlify 自动识别出了博客使用的框架并且填充好了构建命令，接下来只需要点击下一步即可。</p><p><img src="https://s1.baoshuo.ren/2021/10/31/yVlnMEJgeLSzwFD.png" alt="" loading="lazy"></p><p>新建站点完成以后可以在「Domain Settings」页面中修改默认分配的 <code>netlify.app</code> 子域名，并添加自定义域名。</p><h2 id="vercel">Vercel</h2><p>Vercel 是一个类似于 Netlify 的静态网站托管平台（Vercel 也支持托管 Serverless 函数，不过不在本文的讨论范围内）。</p><p><img src="https://s1.baoshuo.ren/2021/10/22/1oLr8fiODTNXSRP.png" alt="" loading="lazy"></p><p>绑定好 GitHub 账号后导入一个新的项目即可。</p><p><img src="https://s1.baoshuo.ren/2021/10/31/EAsH2CWLUTZFeXu.png" alt="" loading="lazy"></p><p>Vercel 也和 Netlify 自动填充好了构建命令，如果没有特殊需求可以直接点击下一步。</p><p>可以在项目的域名设置中绑定自定义域名。</p><h2 id="参考资料">参考资料</h2><ol><li><a href="https://blog.ichr.me/post/automated-deployment-of-serverless-static-blog/" rel="external nofollow noreferrer">初探无后端静态博客自动化部署方案</a>，ChrAlpha，2020 年 2 月 14 日。</li><li><a href="https://stackoverflow.com/questions/42032035/finding-files-older-than-certain-dates-in-git-repository" rel="external nofollow noreferrer">Finding files older than certain dates in Git repository</a>，Scott Weldon (on Stack Overflow)，2017 年 2 月 7 日。</li><li><a href="https://blog.skk.moe/post/deploy-blog-to-cf-workers-site/" rel="external nofollow noreferrer">将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录</a>，Sukka，2020 年 6 月 7 日。</li></ol>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[USTC Hackergame 2021 Write Up]]></title>
        <id>/post/ustc-hackergame-2021-write-up/</id>
        <link href="/post/ustc-hackergame-2021-write-up/"/>
        <updated>2021-10-30T04:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="签到">签到</h2><p><img src="https://s1.baoshuo.ren/2021/10/24/6HiDz8gjEVMQsph.png" alt="" loading="lazy"></p><p>点击 <code>Next</code> 键，发现页面的 URL 后多了个 <code>?page=1</code> ，结合第一个页面中的 <code>1970-01-01</code> 字样，可以判断出来 <code>page</code> 参数应为比赛期间的 Unix 时间戳。</p><p>示例：<a href="http://202.38.93.111:10000/?page=1635002186" rel="external nofollow noreferrer">http://202.38.93.111:10000/?page=1635002186</a></p><h2 id="进制十六——参上">进制十六——参上</h2><p><img src="https://s1.baoshuo.ren/2021/10/24/swZPQblAxcqCtEz.png" alt="" loading="lazy"></p><p>可以照着 16 进制数据搞一搞，然后 flag 就出来了：</p><p><img src="https://s1.baoshuo.ren/2021/10/24/poz4TdtU8nVPg75.png" alt="" loading="lazy"></p><h2 id="去吧！追寻自由的电波">去吧！追寻自由的电波</h2><p>下载音频之后使用 Adobe Audition 进行变速即可。</p><p><img src="https://s1.baoshuo.ren/2021/10/24/GyoM3w185UhPxbz.png" alt="" loading="lazy"></p><h2 id="旅行照片">旅行照片</h2><p><img src="https://s1.baoshuo.ren/2021/10/25/lHJ6SwxrW8mQf53.png" alt="" loading="lazy"></p><p>从图片中可以看出拍摄者在 14 层，并且楼下有一个蓝色的肯德基，那么使用 Google 搜索关键词 <code>海洋 蓝色 KFC</code> 可以得到以下结果：</p><p><img src="https://s1.baoshuo.ren/2021/10/25/FzxEHLfX5ylKkiN.png" alt="" loading="lazy"></p><p>从照片的描述中可以得到这家肯德基位于秦皇岛新澳海底世界。</p><p>在百度地图上可以找到这家肯德基的电话、详细位置。同时按照卫星图可以推断出拍摄者所在的方向，进而推断出拍摄的大致时间。</p><p><img src="https://s1.baoshuo.ren/2021/10/25/crgFKpCOaoq8WzN.png" alt="" loading="lazy"></p><p>flag 获取成功。</p><h2 id="flag-助力大红包">FLAG 助力大红包</h2><p>查看点击助力按钮后的浏览器请求可以发现请求时有一个名为 IP 的参数，尝试修改这个参数发现会报错提示前后端检测 IP 不一致，那么考虑添加 <code>X-Forwarded-For</code> 头伪造经过代理的来源 IP 地址即可。</p><p>比赛平台的速率限制为每秒最多请求一次，所以在每次请求后还需要等待 1 秒。</p><pre><code class="hljs bash"><span class="hljs-keyword">for</span> ((i=0; <span class="hljs-variable">$i</span> &lt;= 255; i = (<span class="hljs-variable">$i</span> + 1))); <span class="hljs-keyword">do</span>
    curl <span class="hljs-string">&quot;http://202.38.93.111:10888/invite/<span class="hljs-variable">$invite_id</span>&quot;</span> -H <span class="hljs-string">&quot;X-Forwarded-For: <span class="hljs-variable">$i</span>.11.45.14&quot;</span> -d <span class="hljs-string">&quot;ip=<span class="hljs-variable">$i</span>.11.45.14&quot;</span>
    <span class="hljs-built_in">sleep</span> 1
<span class="hljs-keyword">done</span></code></pre><h2 id="猫咪问答-pro-max">猫咪问答 Pro Max</h2><ol><li>2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（<a href="http://sec.ustc.edu.cn" rel="external nofollow noreferrer">sec.ustc.edu.cn</a>）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？</li></ol><p>Wayback Machine 是个好东西啊。（<a href="https://web.archive.org/web/20170515053637/http://sec.ustc.edu.cn/doku.php/codes" rel="external nofollow noreferrer">页面存档</a>）</p><ol start="2"><li>中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？</li></ol><p><img src="https://s1.baoshuo.ren/2021/10/24/32Oq1tW86oke7rI.png" alt="" loading="lazy"></p><p>LUG 官网上直接搜就出来了。但实际上的答案应该是 5 ，可能是官网没更新最新信息。</p><ol start="3"><li>中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？</li></ol><blockquote><p>谷歌是你的好朋友。 <cite>Hackergame 2020 「猫咪问答++」 flag 。</cite></p></blockquote><p><img src="https://s1.baoshuo.ren/2021/10/24/MCq9mGNQFUDoHy1.png" alt="" loading="lazy"></p><p>可以看到正确答案为 <code>Development Team of Library</code> 。</p><ol start="4"><li>在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？</li></ol><p>可以在 <a href="http://sigbovik.org/2021/proceedings.pdf" rel="external nofollow noreferrer">the record of the proceedings of SIGBOVIK 2021</a>（<a href="https://web.archive.org/web/20210626111527/http://www.sigbovik.org/2021/proceedings.pdf" rel="external nofollow noreferrer">页面存档</a>）的 212 页找到这篇论文。</p><ol start="5"><li>不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？</li></ol><p>搜索关键词：<a href="https://www.google.com/search?q=IETF+Protocol+Police" rel="external nofollow noreferrer">IETF Protocol Police</a></p><p>可以搜到这个「搞笑 RFC」：<a href="https://datatracker.ietf.org/doc/html/rfc8962#section-6" rel="external nofollow noreferrer">Establishing the Protocol Police</a> ，在第 6 节中有相关介绍。</p><p>正确答案应为 <code>/dev/null</code> 。</p><h2 id="卖瓜">卖瓜</h2><p>最开始拿到题我先想的是能不能用负数凑，结果发现不行，于是考虑溢出。</p><p>试了试发现使用 6 斤瓜无法触发溢出，而使用 9 斤瓜的就可以触发溢出了。</p><p><img src="https://s1.baoshuo.ren/2021/10/27/HGwsJeqB63SZrNA.png" alt="" loading="lazy"></p><p>写了个脚本跑一跑，试出来了几个负数，挨个试了下发现放 2e18 个 9 斤瓜可以凑到 20 斤。</p><p><img src="https://s1.baoshuo.ren/2021/10/27/APRwaqf6SO3DTyH.png" alt="" loading="lazy"></p><p>然后在计算器里算了一下，只需要加 6 斤的瓜和 9 斤的瓜各 29782938247303441 个就能让称的显示变成 -1 。</p><p>接下来放 2 个 6 斤瓜和 1 个 9 斤瓜就能拿到 flag 了。</p><h2 id="透明的文件">透明的文件</h2><p>本题与 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code" rel="external nofollow noreferrer">ANSI Escape Code</a> 有关。</p><p>首先需要将文件中的 <code>[</code> 替换成 <code>\033[</code> ，然后再找一个支持显示 ANSI 控制码的终端输出。</p><p>然后发现一片空白，啥也没有。</p><p>捣鼓到快怀疑人生才发现终端上的某些字符被遮挡了，进而想到这个脚本可能清除了终端上某些地方的字符来显示 flag 。</p><p>先编写一个复读函数用来填满终端：</p><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">repeat</span></span>() &#123;
    <span class="hljs-keyword">for</span> ((i = 1; <span class="hljs-variable">$i</span> &lt;= <span class="hljs-variable">$1</span>; i = (<span class="hljs-variable">$i</span> + 1))); <span class="hljs-keyword">do</span>
        <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;▉&quot;</span>
    <span class="hljs-keyword">done</span>
&#125;</code></pre><p><img src="https://s1.baoshuo.ren/2021/10/29/mniZ4Qch5rHCxWI.png" alt="" loading="lazy"></p><p>再配合上方替换好的文件输出即可，效果如图。</p><h2 id="amnesia">Amnesia</h2><h3 id="轻度失忆">轻度失忆</h3><p>使用 <code>putchar()</code> 函数即可解决此问题。</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>

<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;H&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;e&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;l&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;l&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;o&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;,&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;w&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;o&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;r&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;l&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;d&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;!&#x27;</span>);
    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre><h2 id="图之上的信息">图之上的信息</h2><p>可以使用 <code>__schema</code> 字段查询所有存在的类型：</p><pre><code class="hljs graphql">&#123;
  __schema &#123;
    types &#123;
      name
    &#125;
  &#125;
&#125;</code></pre><p><img src="https://s1.baoshuo.ren/2021/10/25/OpGkfi3FyAbugwT.png" alt="" loading="lazy"></p><p>发现一个名为 <code>GUser</code> 的类型，再构造一个语句查询类型结构：</p><pre><code class="hljs graphql">&#123;
  __type(name: &quot;GUser&quot;) &#123;
    name
    fields &#123;
      name
      type &#123;
        name
        kind
        ofType &#123;
          name
          kind
        &#125;
      &#125;
    &#125;
  &#125;
&#125;</code></pre><p><img src="https://s1.baoshuo.ren/2021/10/25/XzhIAwocnVMx6Lk.png" alt="" loading="lazy"></p><p>顺便获取了下 <code>GNote</code> 类型的结构：</p><p><img src="https://s1.baoshuo.ren/2021/10/25/9mtWaPAFoYfDLXu.png" alt="" loading="lazy"></p><p>进行查询即可得到 flag ：</p><p><img src="https://s1.baoshuo.ren/2021/10/25/wKs5BpteaYbAcoP.png" alt="" loading="lazy"></p><h2 id="后记-7">后记</h2><p>今年拿的名次比去年的高，感觉在这一年里自己的 web 水平有很大的提升，但 math 还是一如既往地爆了零，和我的数学中考成绩一样的烂。</p><p>以后如果有时间的话逆向、汇编什么的也都要学一学，不然的话每次一看见 binary 就有点不知所措、无从下手属实不太好。</p><p>推荐阅读：<a href="/post/ustc-hackergame-2020-write-up/">USTC Hackergame 2020 Write Up</a>。</p>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈跨域资源共享（CORS）]]></title>
        <id>/post/cors/</id>
        <link href="/post/cors/"/>
        <updated>2021-10-02T14:24:02.000Z</updated>
        <summary type="html"><![CDATA[跨域资源共享（CORS）是一种基于 HTTP 头来让网页的受限资源能够被其他域名的页面访问的一种机制。通过该机制，页面能够自由地使用不同源的图片、样式、脚本、iframes 以及视频。 在通常情况下，一些跨域的请求会被同源策略禁止。而 CORS 定义了一种方式，可以允许 Web 应用服务器进行跨源访问控制，从而使得跨源数据传输得以安全进行。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/10/02/6YfLj17HUV4e9Wd.png" width="100%" alt="浅谈跨域资源共享（CORS）" /><p>跨域资源共享（CORS）是一种基于 HTTP 头来让网页的受限资源能够被其他域名的页面访问的一种机制。通过该机制，页面能够自由地使用不同源（cross-origin）的图片、样式、脚本、iframes 以及视频。</p><p>在通常情况下，一些跨域的请求（特别是 ajax）会被同源策略（same-origin policy）禁止。而 CORS 定义了一种方式，可以允许 Web 应用服务器进行跨源访问控制，从而使得跨源数据传输得以安全进行。</p><hr><p>目前几乎所有现代浏览器都支持 CORS ，可以在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7" rel="external nofollow noreferrer">MDN</a> 上找到有关浏览器兼容性的信息。</p><p>浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。<em>这两个术语并不属于 Fetch 规范。</em></p><h2 id="简单请求">简单请求</h2><p>某些请求不会触发 CORS 预检请求。本文中称这样的请求为「简单请求」。</p><h3 id="定义">定义</h3><p>若请求满足所有下述条件则该请求可被视为「简单请求」：</p><ol><li>请求方法为 <code>HEAD</code>，<code>GET</code> 或 <code>POST</code> 。</li><li>除了被用户代理自动设置的字段以及在 Fetch 规范中被定义为 <a href="https://fetch.spec.whatwg.org/#forbidden-header-name" rel="external nofollow noreferrer">禁用头名称</a> 的字段之外，HTTP 头信息只允许包含 Fetch 规范定义的 <a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header" rel="external nofollow noreferrer">对 CORS 安全的首部字段集合</a> ：<ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Last-Event-ID</code></li><li><code>Content-Type</code> 仅限于三个值：<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code> 或 <code>text/plain</code></li></ul></li><li>请求中的任意 <code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；<code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</li><li>请求中没有使用 <code>ReadableStream</code> 对象。</li></ol><p>简单请求的设计是为了兼容表单（form），因为历史上表单就一直可以发出跨域请求。</p><h3 id="基本流程">基本流程</h3><p>对于简单请求，浏览器会直接发出 CORS 请求。具体来说，就是增加一个名为 <code>Origin</code> 的字段到 HTTP 头中。</p><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/cors</span> <span class="hljs-meta">HTTP/1.1</span>
<span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://foo.example
<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>foo.example
<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN
<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive
<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0...</code></pre><p>上面的头信息中，<code>Origin</code> 字段用来说明本次请求来自哪个源，服务器端根据这个值决定是否同意这个请求。</p><p>如果 <code>Origin</code> 指定的源在许可范围内，服务器返回的响应头会添加以下几个字段：</p><ul><li><code>Access-Control-Allow-Origin</code> 字段表明服务器允许的请求源，其值要么为请求时 Origin 字段的值，要么为 <code>*</code> 。</li><li><code>Access-Control-Allow-Credentials</code> 字段表明服务器是否允许发送凭据信息，该字段是可选的，默认情况下不允许发送凭据信息。</li><li><code>Access-Control-Expose-Headers</code> 字段表明服务器指定的允许获取的 HTTP 头字段，该字段是可选的。</li></ul><p>如果 <code>Origin</code> 指定的源不在许可范围内，服务器会返回一个不带 <code>Access-Control-Allow-Origin</code> 字段的正常的 HTTP 回应。当浏览器发现没有包含这个字段就知道请求出错了，会抛出一个异常。需要注意的是，这种错误的 HTTP 响应码有可能是 200 或 204 ，因此无法通过状态码识别。</p><h3 id="代码示例">代码示例</h3><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://baoshuo.ren&#x27;</span>, &#123;
  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;no-cors&#x27;</span>,
&#125;);</code></pre><h2 id="非简单请求-——-预检请求">非简单请求 —— 预检请求</h2><p>上面提到，CORS 请求除了简单请求外还有非简单请求。简单来说，非简单请求时对服务器有特殊要求的请求，比如请求方法是 <code>PUT</code> 或 <code>DELETE</code> ，或者 HTTP 头中 <code>Content-Type</code> 字段的值不是上文所述的那三个「对 CORS 安全的 <code>Content-type</code> 字段值」。</p><h3 id="基本流程-2">基本流程</h3><p>非简单请求的 CORS 请求，会在正式通信之前增加一次称为「预检」（preflight）的 HTTP 查询请求。</p><p><img src="https://s1.baoshuo.ren/2021/10/02/Nt9o2cX7gWzuMCr.png" alt="" loading="lazy"></p><p>从上面的报文中可以看到，浏览器先发送了一个使用 <code>OPTIONS</code> 方法的「预检请求」。OPTIONS 是 HTTP/1.1 协议中定义的方法，用以从服务器获取更多信息。该方法不会对服务器资源产生影响。预检请求中同时携带了下面两个首部字段：</p><pre><code class="hljs http"><span class="hljs-attribute">Access-Control-Request-Method</span><span class="hljs-punctuation">: </span>POST
<span class="hljs-attribute">Access-Control-Request-Headers</span><span class="hljs-punctuation">: </span>X-PINGOTHER, Content-Type</code></pre><ul><li><code>Access-Control-Request-Method</code> 字段将告知服务器实际请求将要使用的方法。</li><li><code>Access-Control-Request-Headers</code> 字段将告知服务器实际请求将要携带的自定义请求首部字段。</li></ul><p>服务器将据此决定是否允许实际请求，并返回相应的响应。</p><pre><code class="hljs http"><span class="hljs-attribute">Access-Control-Allow-Origin</span><span class="hljs-punctuation">: </span>http://foo.example
<span class="hljs-attribute">Access-Control-Allow-Methods</span><span class="hljs-punctuation">: </span>POST, GET, OPTIONS
<span class="hljs-attribute">Access-Control-Allow-Headers</span><span class="hljs-punctuation">: </span>X-PINGOTHER, Content-Type
<span class="hljs-attribute">Access-Control-Allow-Credentials</span><span class="hljs-punctuation">: </span>true
<span class="hljs-attribute">Access-Control-Max-Age</span><span class="hljs-punctuation">: </span>86400</code></pre><ul><li><code>Access-Control-Allow-Origin</code> 字段与简单请求时并无差异。</li><li><code>Access-Control-Allow-Methods</code> 字段表明服务器允许哪些方法发起请求。</li><li><code>Access-Control-Allow-Headers</code> 字段表明服务器允许请求头中携带的额外字段。</li><li><code>Access-Control-Allow-Credentials</code> 字段与简单请求时并无差异。</li><li><code>Access-Control-Max-Age</code> 字段表明该响应的有效时间，在有效时间内浏览器无须为同一请求再次发起预检请求。需要注意的是浏览器自身维护了一个最大有效时间，如果该字段的值超出了浏览器维护的最大有效时间则不会生效。</li></ul><p>如果服务器「否定」了一个预检请求，也会返回一个正常的 HTTP 回应，但不包含任何与 CORS 相关的 HTTP 头信息字段。此时浏览器就会认定服务器不同意预检请求，并抛出一个错误。</p><p>一旦通过了预检请求，接下来的步骤就都和简单请求一样了，此处不过多赘述。</p><h3 id="代码示例-2">代码示例</h3><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://baoshuo.ren&#x27;</span>, &#123;
  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,
&#125;);</code></pre><h2 id="附带身份凭证的-cors-请求">附带身份凭证的 CORS 请求</h2><p>上文中提到，CORS 请求默认不发送凭据信息（Cookie 和 HTTP 认证信息），如果要向服务器发送凭据，不仅需要服务器指定 HTTP 头的 <code>Access-Control-Allow-Credentials</code> 字段，还需要在请求时指明是否发送凭据信息。</p><h3 id="代码示例-3">代码示例</h3><p>使用 <code>XmlHttpRequest</code> 向服务器发起 CORS 请求时，需要将 <code>withCredentials</code> 标志设置为 <code>true</code> 。</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();
xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;https://baoshuo.ren&#x27;</span>, <span class="hljs-literal">true</span>);
xhr.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span>;
xhr.<span class="hljs-property">onreadystatechange</span> = handler; <span class="hljs-comment">// 此处的 Handler 需要自行定义</span>
xhr.<span class="hljs-title function_">send</span>();</code></pre><p>使用 fetch 进行请求时则需要设置 <code>credentials</code> 为 <code>include</code> 才能使浏览器向跨域源发送包含凭据的请求。</p><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://baoshuo.ren&#x27;</span>, &#123;
  <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span>,
&#125;);</code></pre><h2 id="与-jsonp-的比较">与 JSONP 的比较</h2><p>CORS 与 JSONP 的使用目的是相同的，但是 CORS 比 JSONP 更强大。</p><p>JSONP 的缺点是只支持 GET 请求，而 CORS 则支持所有类型的 HTTP 请求。如果网站需要兼容老式浏览器或者需要向不支持 CORS 的网站请求数据仍然需要使用 JSONP 。</p><h2 id="参考资料-2">参考资料</h2><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" rel="external nofollow noreferrer">跨源资源共享（CORS）</a>，MDN Web Docs，2021 年 8 月 8 日。</li><li><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" rel="external nofollow noreferrer">跨域资源共享 CORS 详解</a>，阮一峰的网络日志，2016 年 4 月 12 日。</li><li><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E4%BE%86%E6%BA%90%E8%B3%87%E6%BA%90%E5%85%B1%E4%BA%AB" rel="external nofollow noreferrer">跨域资源共享</a>，维基百科，2021 年 5 月 3 日。</li><li>3.2. CORS protocol，<a href="https://fetch.spec.whatwg.org/#http-cors-protocol" rel="external nofollow noreferrer">Fetch Standard</a>，2021 年 9 月 30 日。</li><li>参数，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch#%E5%8F%82%E6%95%B0" rel="external nofollow noreferrer">WorkerOrGlobalScope.fetch()</a>，MDN Web Docs，2021 年 9 月 1 日。</li></ol>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NOI Linux 2.0 上手体验]]></title>
        <id>/post/noi-linux-2/</id>
        <link href="/post/noi-linux-2/"/>
        <updated>2021-08-08T13:44:33.000Z</updated>
        <summary type="html"><![CDATA[时隔多年，CCF 终于发布了新版的 NOI Linux ，替换了以前基于 Ubuntu 14.04 的 NOI Linux 1.4.1。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/08/15/POMht9fim1vVKcp.png" width="100%" alt="NOI Linux 2.0 上手体验" /><p>时隔多年，CCF 终于发布了新版的 NOI Linux ，替换了以前基于 Ubuntu 14.04 的 NOI Linux 1.4.1。</p><span id="more"></span><p>在 NOI Linux 2.0 发布的当天，我就迫不及待地下载好了镜像（<a href="https://noiresources.ccf.org.cn/ubuntu-noi-v2.0.iso" rel="external nofollow noreferrer"><code>ubuntu-noi-v2.0.iso</code></a>），但由于时间原因，没有第一时间进行体验。</p><h2 id="安装">安装</h2><p>首先先新建好一台虚拟机。</p><p><img src="https://s1.baoshuo.ren/2021/07/25/ceaObqknR3FTtlU.png" alt="" loading="lazy"></p><p>新建虚拟机及挂载镜像的步骤不再过多叙述，在安装时需要断开网络连接。</p><p><img src="https://s1.baoshuo.ren/2021/07/25/PeYV6lquxawzL7b.png" alt="" loading="lazy"></p><p>开屏就是自定义的启动界面。</p><p>安装后需要连接网络，运行 <code>sudo apt update</code> 更新软件包列表，然后安装 <code>open-vm-tools-desktop</code> ，安装完成后建议重启虚拟机。</p><h2 id="简单体验">简单体验</h2><h3 id="整体评价">整体评价</h3><ol><li>在考场上如果提供 NOI Linux 虚拟机的话，可能需要手动安装 VMware Tools （因为没网所以不能装 Open VM Tools），略麻烦。</li><li>系统操作有点卡，不知道是不是因为虚拟机的原因。</li><li>预装的软件部分是处于半残状态的，在考场上无法正常使用。</li><li>编译器版本较新，默认支持一些新的语言特性。</li><li>在考场上推荐使用 Sublime Text 或者 Code::Blocks 进行代码编写，不推荐使用 VSCode 。</li></ol><h3 id="更新">更新</h3><p><img src="https://s1.baoshuo.ren/2021/08/08/MbBrDuQyYpwP9TA.png" alt="" loading="lazy"></p><p>模拟考试环境时不建议安装<strong>任何</strong>更新，以还原考场上的「本真的」NOI Linux 。如果需要日常使用则建议安装更新。</p><h3 id="vscode">VSCode</h3><p><img src="https://s1.baoshuo.ren/2021/08/08/vs2mDg5KCO61n8X.png" alt="" loading="lazy"></p><p>CCF 预置在 NOI Linux 2.0 中的 VSCode 只能当一个编辑器，并且并没有安装中文语言包和完整的 C/C++ 扩展，处于半残状态。</p><h3 id="sublime-text">Sublime Text</h3><p><img src="https://s1.baoshuo.ren/2021/08/08/TuEGMtsYcndIoNm.png" alt="" loading="lazy"></p><p>相比于 VSCode ，NOI Linux 预装的 Sublime Text 的自动补全功能在始终离线的环境下依旧能正常工作，同时 Sublime Text 也支持单文件编译运行，颜值也不低，写起代码来很舒服。</p><h3 id="code-blocks">Code::Blocks</h3><p><img src="https://s1.baoshuo.ren/2021/08/08/J598DiCRqthEgTS.png" alt="" loading="lazy"></p><p>Code::Blocks 是一个免费、开源、跨平台的集成开发环境，可以在 <a href="https://www.codeblocks.org/" rel="external nofollow noreferrer">codeblocks.org</a> 上找到系统对应版本的 Code::Blocks 预编译二进制包及其源码。</p><p>NOI Linux 中内置的 Code::Blocks 的自动补全、代码提示等功能均能正常使用，且不需要网络连接。</p><h3 id="nano">Nano</h3><p><img src="https://s1.baoshuo.ren/2021/08/08/9BrALjlHxGK54kR.png" alt="" loading="lazy"></p><p>关于 Nano 此处就不再过多叙述，可以在 <a href="https://nano-editor.org" rel="external nofollow noreferrer">The GNU nano homepage</a> 上找到系统对应版本的 Nano 预编译二进制包及其源码。</p><h3 id="emacs">Emacs</h3><p><img src="https://s1.baoshuo.ren/2021/08/08/FQdGqx8bv2oZNJL.png" alt="" loading="lazy"></p><p>笔者并没有深度体验过 Emacs ，所以不做过多评价，在这里推荐一篇入门教程：<a href="https://liujiacai.net/blog/2020/11/25/why-emacs/" rel="external nofollow noreferrer">Emacs 入门指南：Why &amp; How - Keep Coding</a> 。</p><p>可以在 <a href="https://www.gnu.org/software/emacs/" rel="external nofollow noreferrer">GNU Emacs</a> 找到系统对应版本的 Emacs 预编译二进制包及其源码。</p><h3 id="vim">Vim</h3><p><img src="https://s1.baoshuo.ren/2021/08/08/aN9xjIneAYByEXv.png" alt="" loading="lazy"></p><p>Vim 还是老样子，可以在 <a href="https://www.vim.org" rel="external nofollow noreferrer">vim.org</a> 上找到系统对应版本的 Vim 预编译二进制包及其源码，关于 Vim 的使用请参阅 <a href="http://linux.vbird.org/linux_basic/0310vi.php" rel="external nofollow noreferrer">第九章、vim 程式編輯器 - 鳥哥的 Linux 私房菜</a>。</p><h3 id="编译器">编译器</h3><p><img src="https://s1.baoshuo.ren/2021/08/07/lWviXCj9Txqgmr8.png" alt="" loading="lazy"></p><blockquote><p>使用 <code>g++ -dM -E -x c++ /dev/null | grep -F __cplusplus</code> 命令可以查看编译器默认使用的 C++ 标准。</p></blockquote><p>通过上图可以得出 NOI Linux 自带的编译器默认的 C++ 标准是 C++ 14 ，希望 CCF 在比赛评测的时候不要添加 <code>--std=c++98</code> ，同时选手也需要做好无法使用 C++ 14 特性的准备。</p><h3 id="对拍">对拍</h3><p>NOI Linux 2.0 依旧安装了 Arbiter 评测系统，但是由于系统内置了 Python ，所以可以自行编写对拍程序。</p><h2 id="后记-4">后记</h2><p>NOI Linux 的本次更新使得 NOI Linux 系统更加地人性化、更加适合 OIer 们的使用。美中不足的一点是此版本的 NOI Linux 仍然没有卸载 <code>openssh-client</code> 软件包。</p><h2 id="参考资料-9">参考资料</h2><ol><li><a href="https://noi.cn/gynoi/jsgz/2021-07-16/732450.shtml" rel="external nofollow noreferrer">NOI Linux 2.0 发布，将于 9 月 1 日起正式启用！ - noi.cn</a></li><li><a href="https://docs.vmware.com/cn/VMware-Tools/11.3.0/com.vmware.vsphere.vmwaretools.doc/GUID-C48E1F14-240D-4DD1-8D4C-25B6EBE4BB0F.html" rel="external nofollow noreferrer">安装 Open VM Tools - VMware Tools - VMware Docs</a></li></ol>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用 Cloudflare Warp 为单栈 VPS 添加双栈网络访问]]></title>
        <id>/post/vps-cloudflare-warp/</id>
        <link href="/post/vps-cloudflare-warp/"/>
        <updated>2021-07-15T09:57:25.000Z</updated>
        <summary type="html"><![CDATA[Warp 是 Cloudflare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 Cloudflare 的边缘节点实现隐私保护及链路优化。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/08/15/UOBRkoXaV9wnYW6.jpg" width="100%" alt="使用 Cloudflare Warp 为单栈 VPS 添加双栈网络访问" /><p><a href="https://blog.cloudflare.com/1111-warp-better-vpn/" rel="external nofollow noreferrer">Warp</a> 是 Cloudflare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 Cloudflare 的边缘节点实现隐私保护及链路优化。</p><span id="more"></span><p>由于 Cloudflare 官方的 <a href="https://developers.cloudflare.com/warp-client/setting-up/linux" rel="external nofollow noreferrer">Warp Client</a> 过于臃肿，导致我看到安装包大小后就决定直接放弃安装，于是我选择了 <a href="https://github.com/ViRb3/wgcf" rel="external nofollow noreferrer">ViRb3/wgcf</a> 替代。</p><p><img src="https://s1.baoshuo.ren/2021/07/15/dHClLqSsvDKbrBc.png" alt="" loading="lazy"></p><h2 id="安装依赖">安装依赖</h2><p>可以前往 <a href="https://github.com/ViRb3/wgcf/releases/latest" rel="external nofollow noreferrer">Releases 页面</a> 下载编译好的二进制文件以供使用。</p><p>也可使用如下命令安装：</p><pre><code class="hljs bash">curl -Ls https://git.io/wgcf-installer.sh | bash</code></pre><p>安装好之后运行 <code>wgcf --help</code> ，得到类似下图的输出即为安装成功：</p><p><img src="https://s1.baoshuo.ren/2021/07/15/lDaywAzQGd8HI9S.png" alt="" loading="lazy"></p><p>另外还需按照 <a href="https://www.wireguard.com/install/" rel="external nofollow noreferrer">WireGuard 官网</a> 上的说明安装 WireGuard 。</p><p>根据需求可能还需要安装 <code>resolvconf</code> 。</p><h2 id="生成-wireguard-配置文件">生成 WireGuard 配置文件</h2><p>先使用 <code>wgcf register</code> 命令注册 Warp ，使用键盘上的方向键选择 「Yes」 并回车确认：</p><p><img src="https://s1.baoshuo.ren/2021/07/15/MYT5bkX4r2pGHUv.png" alt="" loading="lazy"></p><p>注册成功后的提示：</p><p><img src="https://s1.baoshuo.ren/2021/07/15/y4homkVbqsr9PYj.png" alt="" loading="lazy"></p><p>之后使用 <code>wgcf generate</code> 命令生成配置文件。</p><p><img src="https://s1.baoshuo.ren/2021/07/15/3zWUZYTdGhn9qkP.png" alt="" loading="lazy"></p><h2 id="修改-wireguard-配置文件">修改 WireGuard 配置文件</h2><p>这是一份生成出来的配置文件：</p><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span>
<span class="hljs-attr">PrivateKey</span> = ******
<span class="hljs-attr">Address</span> = <span class="hljs-number">172.16</span>.*.*/<span class="hljs-number">32</span>
<span class="hljs-attr">Address</span> = fd01:******/<span class="hljs-number">128</span>
<span class="hljs-attr">DNS</span> = <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span>
<span class="hljs-attr">MTU</span> = <span class="hljs-number">1280</span>

<span class="hljs-section">[Peer]</span>
<span class="hljs-attr">PublicKey</span> = ******
<span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>
<span class="hljs-attr">AllowedIPs</span> = ::/<span class="hljs-number">0</span>
<span class="hljs-attr">Endpoint</span> = engage.cloudflareclient.com:<span class="hljs-number">2408</span></code></pre><ul><li>添加 IPv4 网络访问<ol><li>删去 <code>[Interface]</code> 中的 <code>Address = fd01:******/128</code> ；</li><li>删去 <code>[Peer]</code> 中的 <code>AllowedIPs = ::/0</code> ；</li><li>将 Endpoint 的域名替换为解析出来的 IPv6 地址，如 <code>[2606:4700:d0::a29f:c001]:2408</code> 。</li></ol></li><li>添加 IPv6 网络访问<ol><li>删去 <code>[Interface]</code> 中的 <code>Address = 172.16.*.*/32</code> ；</li><li>删去 <code>[Peer]</code> 中的 <code>AllowedIPs = 0.0.0.0/0</code> ；</li><li>将 Endpoint 的域名替换为解析出来的 IPv4 地址，如 <code>162.159.192.1:2408</code> 。</li></ol></li></ul><p>如果不需要使用 Cloudflare 的 DNS 服务可以删去 <code>DNS = 1.1.1.1</code> 这一行，使用的话需要安装 <code>resolvconf</code> 。</p><h2 id="启动-wireguard-隧道">启动 WireGuard 隧道</h2><p>将刚才修改好的配置文件移动到 <code>/etc/wireguard/</code> 目录下，推荐命名为 <code>wgcf.conf</code> ，下面的操作以这个文件名为准。</p><p>使用 <code>systemd enable --now wg-quick@wgcf</code> 命令启动隧道，然后使用 <code>wg show wgcf</code> 命令查看隧道状态。</p><p>如果在启动时出现了错误，可以使用 <code>systemd status wg-quick@wgcf</code> 命令查看错误信息，修复后使用 <code>systemd start wg-quick@wgcf</code> 启动隧道。</p><p><img src="https://s1.baoshuo.ren/2021/07/15/M9D1L2rFfHCPtcU.png" alt="" loading="lazy"></p><p>之后就可以享受双栈网络带来的便利了~</p><p>注：日常如果需要重启隧道可以使用 <code>systemctl restart wg-quick@wgcf</code> 命令。</p><h2 id="后记-8">后记</h2><p>折腾这些的原因是我从某个 Player IX 那里嫖的 VM 没有提供 IPv4 网络访问权限，这让我日常的维护工作麻烦了很多，于是我想到了 Cloudflare Warp 这个东西。CloudFlare Warp 提供的网络访问相较于 <a href="http://TunnelBroker.net" rel="external nofollow noreferrer">TunnelBroker.net</a> 、 <a href="http://TunnelBroker.ch" rel="external nofollow noreferrer">TunnelBroker.ch</a> 等一众隧道要好很多，延迟并不像其他隧道那样高。</p><p>在查找资料的过程中我也发现了很多博客里面所描述的内容有误或已经过时，所以综合其他文章的内容加上自己的实践，写下了这篇文章。</p><h2 id="参考资料-12">参考资料</h2><ol><li><a href="https://luotianyi.vc/5252.html" rel="external nofollow noreferrer">【WGCF】连接 CF WARP 为服务器添加 IPv4/IPv6 网络 - Luminous’ Home</a></li><li><a href="https://p3terx.com/archives/use-cloudflare-warp-to-add-extra-ipv4-or-ipv6-network-support-to-vps-servers-for-free.html" rel="external nofollow noreferrer">Cloudflare WARP 给 VPS 服务器额外添加 IPv4 或 IPv6 网络获得“原生”IP - P3TERX</a></li></ol>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[搭建 BIRD Looking Glass 速成指北]]></title>
        <id>/post/bird-looking-glass/</id>
        <link href="/post/bird-looking-glass/"/>
        <updated>2021-05-03T04:23:00.000Z</updated>
        <summary type="html"><![CDATA[BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 蓝天 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。]]></summary>
        <content type="html"><![CDATA[<p>BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 <a href="https://lantian.pub" rel="external nofollow noreferrer">蓝天</a> 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。</p><span id="more"></span><ul><li>项目地址：<a href="https://github.com/xddxdd/bird-lg-go" rel="external nofollow noreferrer">https://github.com/xddxdd/bird-lg-go</a></li><li>成品： <a href="https://lg.dn42.as141776.net" rel="external nofollow noreferrer">https://lg.dn42.as141776.net</a></li></ul><h2 id="安装-docker-和-docker-compose">安装 Docker 和 Docker Compose</h2><p>虽然这个程序可以直接运行，但我还是比较喜欢套个 Docker 防止污染环境。</p><pre><code class="hljs bash">curl -sSL https://get.docker.com | sh
pip install docker-compose</code></pre><h2 id="编排-docker-compose-服务">编排 Docker Compose 服务</h2><p>在运行 web 的服务器上找个地方（如 <code>/var/bird-lg/</code>），将下面的内容修改后写入 <code>docker-compose.yml</code> 中：</p><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span>

<span class="hljs-attr">services:</span>
  <span class="hljs-attr">bird-lg:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">xddxdd/bird-lg-go</span>
    <span class="hljs-attr">container_name:</span> <span class="hljs-string">bird-lg</span>
    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">BIRDLG_SERVERS=cn1,eu1</span> <span class="hljs-comment"># 节点列表，以逗号分隔</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">BIRDLG_DOMAIN=dn42.as141776.net</span> <span class="hljs-comment"># 节点 endpiont 后缀</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">BIRDLG_TITLE_BRAND=Looking</span> <span class="hljs-string">Glass</span> <span class="hljs-comment"># 标签栏上显示的名称</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">BIRDLG_NAVBAR_BRAND=Looking</span> <span class="hljs-string">Glass</span> <span class="hljs-comment"># 页面上显示的名称</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">BIRDLG_WHOIS=whois.lantian.dn42</span> <span class="hljs-comment"># Whois 服务器地址</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">BIRDLG_DNS_INTERFACE=asn.dn42</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;5000:5000&#x27;</span>
  <span class="hljs-attr">bird-lgproxy:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">xddxdd/bird-lgproxy-go</span>
    <span class="hljs-attr">container_name:</span> <span class="hljs-string">bird-lgproxy</span>
    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&#x27;</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8000:8000&#x27;</span></code></pre><p>在各个节点上只需要写入下面内容即可：</p><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span>

<span class="hljs-attr">services:</span>
  <span class="hljs-attr">bird-lgproxy:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">xddxdd/bird-lgproxy-go</span>
    <span class="hljs-attr">container_name:</span> <span class="hljs-string">bird-lgproxy</span>
    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&#x27;</span>
    <span class="hljs-attr">ports:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;8000:8000&#x27;</span></code></pre><p>之后启动 Docker 容器：</p><pre><code class="hljs bash">docker-compose up -d</code></pre><h2 id="使用-nginx-反代页面">使用 nginx 反代页面</h2><p>使用下方的配置启动反向代理即可。</p><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;
    <span class="hljs-attribute">listen</span>      *:<span class="hljs-number">80</span>;
    <span class="hljs-attribute">listen</span>      [::]:<span class="hljs-number">80</span>;
    <span class="hljs-attribute">server_name</span> lg.dn42.as141776.net;

    <span class="hljs-comment"># reverse proxy</span>
    <span class="hljs-section">location</span> / &#123;
        <span class="hljs-attribute">proxy_pass</span>                         http://127.0.0.1:5000;
        <span class="hljs-attribute">proxy_http_version</span>                 <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;
        <span class="hljs-attribute">proxy_cache_bypass</span>                 <span class="hljs-variable">$http_upgrade</span>;

        <span class="hljs-comment"># Proxy headers</span>
        <span class="hljs-attribute">proxy_set_header</span> Upgrade           <span class="hljs-variable">$http_upgrade</span>;
        <span class="hljs-attribute">proxy_set_header</span> Host              <span class="hljs-variable">$host</span>;
        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP         <span class="hljs-variable">$remote_addr</span>;
        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For   <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;
        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;
        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Host  <span class="hljs-variable">$host</span>;
        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Port  <span class="hljs-variable">$server_port</span>;

        <span class="hljs-comment"># Proxy timeouts</span>
        <span class="hljs-attribute">proxy_connect_timeout</span>              <span class="hljs-number">60s</span>;
        <span class="hljs-attribute">proxy_send_timeout</span>                 <span class="hljs-number">60s</span>;
        <span class="hljs-attribute">proxy_read_timeout</span>                 <span class="hljs-number">60s</span>;
    &#125;
&#125;</code></pre><h2 id="配置-dns-解析">配置 DNS 解析</h2><p>bird-lg-go 的节点 endpiont 生成逻辑是 <code>http://[节点].[endpoint后缀]:8000</code> ，如 <code>http://eu1.dn42.as141776.net:8000</code> ，所以只需要去配置对应的解析。</p><blockquote><p><strong>警告</strong></p><p>建议解析到节点的公网 IP 上，以免 DN42 炸掉时 Looking Glass 也一并炸掉。</p></blockquote><p>配置示例：</p><pre><code class="hljs stylus">eu1<span class="hljs-selector-class">.dn42</span><span class="hljs-selector-class">.as141776</span><span class="hljs-selector-class">.net</span>.  <span class="hljs-number">3600</span>    IN      A       <span class="hljs-number">136.243</span>.<span class="hljs-number">221.96</span>
cn1<span class="hljs-selector-class">.dn42</span><span class="hljs-selector-class">.as141776</span><span class="hljs-selector-class">.net</span>.  <span class="hljs-number">3600</span>    IN      CNAME   home<span class="hljs-selector-class">.baoshuo</span><span class="hljs-selector-class">.ren</span>.</code></pre><h2 id="成果">成果</h2><p><img src="https://s1.baoshuo.ren/2021/05/03/iaFfTWAhpdZGJ9t.png" alt="" loading="lazy"></p>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[初探 DN42 网络]]></title>
        <id>/post/dn42-network/</id>
        <link href="/post/dn42-network/"/>
        <updated>2021-04-04T03:29:32.000Z</updated>
        <summary type="html"><![CDATA[DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/04/03/R6IHLundNjpKxCD.png" width="100%" alt="初探 DN42 网络" /><p>DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。</p><span id="more"></span><p>DN42 适合以下类别的用户：</p><ul><li>想要研究网络技术，练习服务器、路由器等网络设备配置，甚至后续在真实互联网建立 AS 的用户。</li><li>已经拥有真实 AS ，但担心自己<a href="https://blog.cloudflare.com/how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-today/" rel="external nofollow noreferrer">配置错误广播出错误路由、干掉半个互联网</a>，希望有个地方测试的用户。</li></ul><p>DN42 不适合以下类别的用户：</p><ul><li>单纯想要保护隐私、规避网络审查的用户</li><li>在网内消耗大量流量，例如用于解锁流媒体服务的用户</li></ul><p>所以，DN42 的使用门槛还是比较高的。这与在真实互联网中一样，你要扮演一个 ISP （互联网服务提供商），注册自己的个人信息， ASN 号码，IPv4 和 IPv6 的地址池，并且使用 BGP 在自己的服务器上广播它们。你还要和其它的用户联系，和他们进行 Peering（对等互联），一步步进入完整的 DN42 网络。</p><hr><p>DN42 在 <code>172.20.0.0/14</code> 和 <code>fd00::/8</code> 上运行，而这两个 IP 段都是分配给内网使用的。换句话说，你在 DN42 上怎么折腾，都不会影响到服务器其它的互联网连接。</p><p>你可以通过加入 <a href="https://t.me/Dn42Chat" rel="external nofollow noreferrer">Telegram 群组</a> 或者 <a href="irc://irc.hackint.org/#dn42" rel="external nofollow noreferrer">IRC 频道</a> 来寻求帮助。</p><p>请注意，DN42 是一个测试网络，所有人都在帮助所有人。即使你不小心搞砸了，也没有人会指责你。</p><p>欢迎在搭建完成自己的内网以后与我进行对等互联，可以访问 <a href="https://dn42.baoshuo.ren" rel="external nofollow noreferrer">dn42.baoshuo.ren</a> 获取更多信息。</p><p>若无特别说明，本文中所使用的系统环境均为 <code>Ubuntu 20.04.2 LTS</code> ，本文中所有使用 <code>&lt;&gt;</code> 包裹的内容均需要自行替换。</p><h2 id="注册-dn42">注册 DN42</h2><p>在注册过程中会大量使用到一些 UNIX 工具（如 Git 、 GPG 等），所以最好使用 Linux 或者 macOS 系统完成整个流程，如果你正在使用 Windows 系统，那么可以使用 <a href="http://aka.ms/wsl" rel="external nofollow noreferrer">WSL</a> 。</p><h3 id="注册前的准备">注册前的准备</h3><ul><li>了解如何编写 RPSL （<a href="https://tools.ietf.org/html/rfc2622/" rel="external nofollow noreferrer">RFC2622</a>） 格式的配置文件。</li><li>了解如何使用 <a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1" rel="external nofollow noreferrer">CIDR</a> （<a href="https://tools.ietf.org/html/rfc1518" rel="external nofollow noreferrer">RFC1518</a>，<a href="https://tools.ietf.org/html/rfc1519" rel="external nofollow noreferrer">RFC1519</a>） 格式表示 IP 地址块。</li><li>熟悉 <a href="https://dn42.dev" rel="external nofollow noreferrer">DN42 Wiki</a> 中的 <a href="https://dn42.dev/howto/Getting-Started" rel="external nofollow noreferrer">Getting-Started</a> 、 <a href="https://dn42.dev/howto/Address-Space" rel="external nofollow noreferrer">Address Space</a> 页面中的内容。</li><li>在 <a href="https://git.dn42.dev" rel="external nofollow noreferrer">DN42 Git</a> 中有一个注册好的账户。</li><li>会使用英文与他人交流。</li></ul><h3 id="克隆-dn42-注册表-git-仓库">克隆 DN42 注册表 Git 仓库</h3><p>将 <a href="https://git.dn42.dev/dn42/registry" rel="external nofollow noreferrer">dn42/registry</a> 这个仓库 clone 到本地。</p><p>新建一个名为 <code>&lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/&lt;自定义名称&gt;</code> 的分支。</p><pre><code class="hljs bash">git checkout -b &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/register</code></pre><h3 id="注册维护者">注册维护者</h3><p>在仓库的 <code>data/mntner</code> 目录下新建一个文件，命名为 <code>&lt;昵称&gt;-MNT</code> 。</p><p>文件内填入以下内容：</p><pre><code class="hljs rpsl">mntner:             &lt;昵称&gt;-MNT
admin-c:            &lt;昵称&gt;-DN42
tech-c:             &lt;昵称&gt;-DN42
auth:               &lt;身份验证信息&gt;
mnt-by:             &lt;维护者&gt;
source:             DN42</code></pre><p>示例：<a href="https://git.dn42.dev/dn42/registry/src/branch/master/data/mntner/BAOSHUO-MNT" rel="external nofollow noreferrer"><code>data/mntner/BAOSHUO-MNT</code> at dn42/registry@master</a></p><ul><li><code>mntner</code> ：维护者（全称为 Maintainer），这个维护者的名称，与文件名相同。</li><li><code>admin-c</code> ：管理员联系信息（Admin Contact），需要指向 <a href="#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA">注册联系人</a> 一节中的 <code>person</code> 文件，一般为 <code>&lt;昵称&gt;-DN42</code> 。</li><li><code>tech-c</code> ：技术人员联系信息（Tech Contact），需要指向 <a href="#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA">注册联系人</a> 一节中的 <code>person</code> 文件，一般为 <code>&lt;昵称&gt;-DN42</code> 。</li><li><code>auth</code> ：身份验证信息，接受 <strong>GPG 公钥</strong> 和 <strong>SSH 公钥</strong> ，可以查看 <a href="https://dn42.dev/howto/Registry-Authentication" rel="external nofollow noreferrer">Registry Authentication</a> 页面获取详细信息。</li><li><code>mnt-by</code> ：由谁维护（全称为 Maintain by），此处需要指向这个维护者本身，即 <code>&lt;昵称&gt;-MNT</code> 。</li><li><code>source</code> ：信息来源，默认为 <code>DN42</code> 。</li></ul><h3 id="注册联系人">注册联系人</h3><p>在仓库的 <code>data/person</code> 目录下新建一个文件，命名为 <code>&lt;昵称&gt;-DN42</code> 。</p><pre><code class="hljs rpsl">person:             &lt;姓名&gt;
contact:            &lt;邮箱&gt;
nic-hdl:            &lt;NIC 句柄&gt;
mnt-by:             &lt;维护者&gt;
source:             DN42</code></pre><p>示例：<a href="https://git.dn42.dev/dn42/registry/src/branch/master/data/person/BAOSHUO-DN42" rel="external nofollow noreferrer"><code>data/person/BAOSHUO-DN42</code> at dn42/registry@master</a></p><ul><li><code>person</code> ：姓名。</li><li><code>contact</code> ：联系方式，一般为邮箱。</li><li><code>nic-hdl</code> ：NIC 句柄（即 <a href="https://en.wikipedia.org/wiki/NIC_handle" rel="external nofollow noreferrer">NIC handle</a>），指向文件本身，与文件名相同。</li><li><code>mnt-by</code> ：由谁维护（全称为 Maintain by），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85">注册维护者</a> 一节中注册的的维护者信息。</li><li><code>source</code> ：固定为 <code>DN42</code>。</li></ul><h3 id="注册-asn">注册 ASN</h3><p>在国际互联网上，ASN 范围 <code>4200000000 - 4294967294</code> 是被保留以供私人使用的，而 DN42 占用的就是其中的一块： <code>4242420000 - 4242429999</code> 。目前 DN42 开放注册的 ASN 范围是 <code>4242420000 - 4242423999</code> ，只需要在这个区间里面挑一个没有被他人占用的号码即可。</p><p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 ASN 的工具: <a href="https://explorer.burble.com/free#/asn" rel="external nofollow noreferrer">DN42 Free ASN Explorer</a> 。访问该页面就会随机生成 10 个当前还未注册的 ASN 以便使用。</p><p>在仓库的 <code>data/aut-num</code> 目录下新建一个文件，命名为刚才选中的 AS 号码。</p><pre><code class="hljs rpsl">aut-num:            &lt;AS 号码, 带 AS 前缀&gt;
as-name:            &lt;AS 名称&gt;
descr:              &lt;AS 简介&gt;
admin-c:            &lt;NIC 句柄&gt;
tech-c:             &lt;NIC 句柄&gt;
mnt-by:             &lt;维护者&gt;
source:             DN42</code></pre><p>示例：<a href="https://git.dn42.dev/dn42/registry/src/branch/master/data/aut-num/AS4242420247" rel="external nofollow noreferrer"><code>data/aut-num/AS4242420247</code> at dn42/registry@master</a></p><ul><li><code>aut-num</code> ：AS 号，此处可以使用私有 AS 号码，也可以使用公网 AS 号码（不推荐）。</li><li><code>as-name</code> ：AS 的名称，可以设置为 <code>&lt;昵称&gt;-AS</code> 。</li><li><code>descr</code> ：（选填）AS 简介，随意填写。</li><li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA">注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA">注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85">注册维护者</a> 一节中注册的的维护者信息。</li><li><code>source</code> ：如果使用私有 AS 号码则此处填写 <code>DN42</code> ，否则填写 ASN 所对应的 RIR 名称。</li></ul><h3 id="注册-ipv4-地址块">注册 IPv4 地址块</h3><p><em>如果您想在 DN42 上创建一个 IPv6 Only 网络，请不要注册 IPv4 地址块，并忽略 <a href="#%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E8%AE%B0%E5%BD%95">添加路由记录</a> 一节中的 IPv4 部分。</em></p><p>在国际互联网上， <code>172.16.0.0/12</code> 是由 <a href="https://tools.ietf.org/html/rfc1918" rel="external nofollow noreferrer">RFC1918</a> 规定的由专用网络使用的 IP 地址块，而 DN42 占用的就是其中的一块： <code>172.20.0.0/14</code> 。目前 DN42 开放注册的地址块范围可以在 <a href="https://dn42.dev/howto/Address-Space#ipv4-address-space" rel="external nofollow noreferrer">Address Space</a> 页面上查看。</p><p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv4 地址块的网站，点击 <a href="https://explorer.burble.com/free#/4" rel="external nofollow noreferrer">DN42 Free IPv4 Explorer</a> 即可随机生成 10 个当前还未注册的 IPv4 地址块。</p><p>和在真实互联网上一样，DN42 的 IPv4 地址资源也是十分紧缺的，因此 IPv4 的申请原则是「够用就好」。如果节点数量足够少，只申请 <code>/28</code> 或 <code>/29</code> 大小的地址块就够用了。</p><p>在仓库的 <code>data/inetnum</code> 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p><pre><code class="hljs rpsl">inetnum:            &lt;起始 IP 地址&gt; - &lt;结束 IP 地址&gt;
cidr:               &lt;IP 地址块的 CIDR 格式&gt;
netname:            &lt;IP 地址块名称&gt;
descr:              &lt;IP 地址块简介&gt;
country:            &lt;IP 地址块所属国家&gt;
admin-c:            &lt;NIC 句柄&gt;
tech-c:             &lt;NIC 句柄&gt;
mnt-by:             &lt;维护者&gt;
status:             ASSIGNED
source:             DN42</code></pre><p>示例：<a href="https://git.dn42.dev/dn42/registry/src/branch/master/data/inetnum/172.23.250.64_26" rel="external nofollow noreferrer"><code>data/inetnum/172.23.250.64_26</code> at dn42/registry@master</a></p><ul><li><code>inetnum</code> ：这个地址块的范围。</li><li><code>cidr</code> ：以 CIDR 格式表示的这个地址块的范围，含义与 <code>inetnum</code> 相同。</li><li><code>netname</code> ：这个地址块的名称。可以设置为 <code>&lt;昵称&gt;-IPV4</code> 。</li><li><code>descr</code> ：（选填）这个地址块的简介。</li><li><code>nserver</code> ：（选填）IP 地址反向解析的 DNS 服务器。</li><li><code>country</code> ：你的 <a href="https://zh.wikipedia.org/wiki/ISO_3166" rel="external nofollow noreferrer">ISO 3166</a> 国家代码，填 <code>CN</code> 代表中国大陆地区。</li><li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA">注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA">注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85">注册维护者</a> 一节中注册的的维护者信息。</li><li><code>status</code> ：固定为 <code>ASSIGNED</code>。</li><li><code>source</code> ：固定为 <code>DN42</code>。</li></ul><h3 id="注册-ipv6-地址块">注册 IPv6 地址块</h3><p>在国际互联网上， <code>fc00::/7</code> 是由 <a href="https://tools.ietf.org/html/rfc4193" rel="external nofollow noreferrer">RFC4193</a> 定义的 <a href="https://en.wikipedia.org/wiki/Unique_local_address" rel="external nofollow noreferrer">唯一本地地址</a>，而 DN42 占用的就是其中的一块： <code>fd00::/8</code> 。目前 DN42 开放注册的地址块范围可以在 <a href="https://dn42.dev/howto/Address-Space#ipv6-address-space" rel="external nofollow noreferrer">Address Space</a> 页面上查看。</p><p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv6 地址块的网站，点击 <a href="https://explorer.burble.com/free#/6" rel="external nofollow noreferrer">DN42 Free IPv6 Explorer</a> 即可随机生成 10 个当前还未注册的 IPv6 地址块。</p><p>在仓库的 <code>data/inet6num</code> 目录下新建一个文件，命名为 IPv6 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p><pre><code class="hljs rpsl">inet6num:           &lt;起始 IPv6 地址&gt; - &lt;结束 IPv6 地址&gt;
cidr:               &lt;IPv6 地址块的 CIDR 格式&gt;
netname:            &lt;IPv6 地址块名称&gt;
descr:              &lt;IPv6 地址块简介&gt;
country:            &lt;IPv6 地址块所属国家&gt;
admin-c:            &lt;NIC 句柄&gt;
tech-c:             &lt;NIC 句柄&gt;
mnt-by:             &lt;维护者&gt;
status:             ASSIGNED
source:             DN42</code></pre><p>示例：<a href="https://git.dn42.dev/dn42/registry/src/branch/master/data/inet6num/fd42:4242:247::_48" rel="external nofollow noreferrer"><code>data/inet6num/fd42:4242:247::_48</code> at dn42/registry@master</a></p><ul><li><code>inet6num</code> ：这个地址块的范围。</li><li><code>cidr</code> ：使用 CIDR 格式表示的这个地址块的范围，含义与 <code>inet6num</code> 相同。</li><li><code>netname</code> ：这个地址块的名称。可以设置为 <code>&lt;昵称&gt;-IPV6</code> 。</li><li><code>descr</code> ：（选填）这个地址块的简介。</li><li><code>nserver</code> ：（选填）IP 地址反向解析的 DNS 服务器。</li><li><code>country</code> ：你的 <a href="https://zh.wikipedia.org/wiki/ISO_3166" rel="external nofollow noreferrer">ISO 3166</a> 国家代码，填 <code>CN</code> 代表中国大陆地区。</li><li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA">注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA">注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85">注册维护者</a> 一节中注册的的维护者信息。</li><li><code>status</code> ：固定为 <code>ASSIGNED</code>。</li><li><code>source</code> ：固定为 <code>DN42</code>。</li></ul><h3 id="添加路由记录">添加路由记录</h3><p>在仓库的 <code>data/route</code> 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p><pre><code class="hljs rpsl">route:              &lt;IP 地址块的 CIDR 格式&gt;
descr:              &lt;简介&gt;
origin:             &lt;AS 号码, 带 AS 前缀&gt;
mnt-by:             &lt;维护者&gt;
source:             DN42</code></pre><ul><li><code>route</code> ：这个 IPv4 地址块的范围，CIDR 格式。</li><li><code>descr</code> ：（选填）路由简介。</li><li><code>origin</code> ：填写你的 AS 号码。</li><li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href="#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85">注册维护者</a> 一节中注册的的维护者信息。</li><li><code>source</code> ：固定为 <code>DN42</code>。</li></ul><p>如需添加 IPv6 路由，将本节所述的 <code>route</code> 改为 <code>route6</code> 即可，此处不再赘述。</p><h3 id="上传更改到-dn42-注册表">上传更改到 DN42 注册表</h3><p>完成以上步骤之后，使用 <code>git diff</code> 查看文件变动，检查无误后，使用 <code>git add .</code> 暂存。</p><p><img src="https://s1.baoshuo.ren/2021/08/14/RhjwYHFGcaKUSye.png" alt="" loading="lazy"></p><p>运行仓库根目录下的 <code>./check-my-stuff &lt;维护者&gt;</code> 检查文件内容是否有误，确定无误后，提交。</p><p>在提交时，如果需要使用 GPG 签名，需要在添加 <code>-S</code> 参数，如 <code>git commit -S</code> ；如果使用 SSH 签名，请直接使用 <code>git commit</code> 进行提交，待提交后再进行签名工作。</p><p>使用下面的命令进行签名：</p><pre><code class="hljs bash">./sign-my-commit --ssh --key &lt;SSH 私钥文件&gt; &lt;维护者&gt;</code></pre><p>之后使用下面的命令上传即可：</p><pre><code class="hljs bash">git push --set-upstream origin &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/register</code></pre><p><img src="https://s1.baoshuo.ren/2021/04/04/1YwNjs8uvOJMFoq.png" alt="" loading="lazy"></p><p>上传后在 DN42 Git 中切换到自己的分支，并创建一个合并请求，等待管理员审核。</p><h3 id="注意事项">注意事项</h3><ol><li>各个项目的键和值之间有一长串空格，键、冒号与空格的总长度必须是 20 个字符，且不能随意修改。为了编辑时的方便，注册表中提供了一个脚本 <code>fmt-my-stuff</code> ，只需要使用 <code>./fmt-my-stuff &lt;维护者&gt;</code> 即可自动完成此步骤。</li><li>DN42 Registry 的工作语言是英语。请使用英语完成全部流程，以免出现不必要的麻烦。</li><li>请认真对待管理员提出的更改请求，按照要求完成全部修改后直接上传到原分支下即可，无需再新开合并请求。</li><li>推荐使用随机的 IPv4 与 IPv6 地址块，避免与其他网络重复。请明白，DN42 并不是这些网络资源的权威注册机构。</li></ol><h2 id="dn42-bird2-使用入门">DN42 BIRD2 使用入门</h2><p>如无特别说明，本部分中所使用的 BIRD 版本为 <code>2.0.7</code> 。</p><h3 id="安装-bird2">安装 BIRD2</h3><pre><code class="hljs bash">apt update
apt install bird2 -y</code></pre><p>一般情况下，执行此命令即可自动安装 BIRD2 并启动系统服务。</p><h3 id="编写-bird-配置文件">编写 BIRD 配置文件</h3><p>对于刚刚加入 DN42 网络的新人来说，推荐使用 <a href="https://dn42.dev/howto/Bird2#example-configuration" rel="external nofollow noreferrer">howto/Bird2 - DN42 Wiki</a> 中的示例配置以节省配置时间。</p><p>这套配置默认使用了 Multi Protocol BGP ，如果不想使用此功能请自行编写配置文件，如果没有 DN42 IPv4 地址需要去掉文件中的 IPv4 部分。</p><p>将以下配置写入到 <code>/etc/bird/bird.conf</code> 中：</p><pre><code class="hljs puppet"><span class="hljs-keyword">define</span> <span class="hljs-section">OWNAS</span>       = &lt;AS 号&gt;;
<span class="hljs-keyword">define</span> <span class="hljs-section">OWNIP</span>       = &lt;DN42 IPv4 地址&gt;;
<span class="hljs-keyword">define</span> <span class="hljs-section">OWNIPv6</span>     = &lt;DN42 IPv6 地址&gt;;
<span class="hljs-keyword">define</span> <span class="hljs-section">OWNNET</span>      = &lt;DN42 IPv4 地址块, CIDR 格式&gt;;
<span class="hljs-keyword">define</span> <span class="hljs-section">OWNNETv6</span>    = &lt;DN42 IPv6 地址块, CIDR 格式&gt;;
<span class="hljs-keyword">define</span> <span class="hljs-section">OWNNETSET</span>   = [ &lt;DN42 IPv4 地址块, CIDR 格式&gt;+ ];
<span class="hljs-keyword">define</span> <span class="hljs-section">OWNNETSETv6</span> = [ &lt;DN42 IPv6 地址块, CIDR 格式&gt;+ ];

router id OWNIP;

protocol <span class="hljs-keyword">device</span> &#123;
    scan time <span class="hljs-number">10</span>;
&#125;

<span class="hljs-keyword">function</span> <span class="hljs-keyword">is_self_net</span>() &#123;
    return net ~ OWNNETSET;
&#125;

function is_self_net_v6() &#123;
    return net ~ OWNNETSETv6;
&#125;

function is_valid_network() &#123;
    return net ~ [
        172.20.0.0/14&#123;21,29&#125;, <span class="hljs-comment"># dn42</span>
        172.20.0.0/24&#123;28,32&#125;, <span class="hljs-comment"># dn42 Anycast</span>
        172.21.0.0/24&#123;28,32&#125;, <span class="hljs-comment"># dn42 Anycast</span>
        172.22.0.0/24&#123;28,32&#125;, <span class="hljs-comment"># dn42 Anycast</span>
        172.23.0.0/24&#123;28,32&#125;, <span class="hljs-comment"># dn42 Anycast</span>
        172.31.0.0/16+,       <span class="hljs-comment"># ChaosVPN</span>
        10.100.0.0/14+,       <span class="hljs-comment"># ChaosVPN</span>
        10.127.0.0/16&#123;16,32&#125;, <span class="hljs-comment"># neonetwork</span>
        10.0.0.0/8&#123;15,24&#125;     <span class="hljs-comment"># Freifunk.net</span>
    ];
&#125;

roa4 table dn42_roa;
roa6 table dn42_roa_v6;

protocol <span class="hljs-keyword">static</span> &#123;
    roa4 &#123; table dn42_roa; &#125;;
    include <span class="hljs-string">&quot;/etc/bird/roa_dn42.conf&quot;</span>;
&#125;;

protocol <span class="hljs-keyword">static</span> &#123;
    roa6 &#123; table dn42_roa_v6; &#125;;
    include <span class="hljs-string">&quot;/etc/bird/roa_dn42_v6.conf&quot;</span>;
&#125;;

function is_valid_network_v6() &#123;
  return net ~ [
    fd00::/8&#123;44,64&#125; <span class="hljs-comment"># ULA address space as per RFC 4193</span>
  ];
&#125;

protocol <span class="hljs-keyword">kernel</span> &#123;
    scan time <span class="hljs-number">20</span>;

    ipv6 &#123;
        <span class="hljs-keyword">import</span> none;
        export filter &#123;
            <span class="hljs-keyword">if</span> <span class="hljs-literal">source</span> = RTS_STATIC then reject;
            krt_prefsrc = OWNIPv6;
            accept;
        &#125;;
    &#125;;
&#125;;

protocol <span class="hljs-keyword">kernel</span> &#123;
    scan time <span class="hljs-number">20</span>;

    ipv4 &#123;
        <span class="hljs-keyword">import</span> none;
        export filter &#123;
            <span class="hljs-keyword">if</span> <span class="hljs-literal">source</span> = RTS_STATIC then reject;
            krt_prefsrc = OWNIP;
            accept;
        &#125;;
    &#125;;
&#125;

protocol <span class="hljs-keyword">static</span> &#123;
    route OWNNET reject;

    ipv4 &#123;
        <span class="hljs-keyword">import</span> all;
        export none;
    &#125;;
&#125;

protocol <span class="hljs-keyword">static</span> &#123;
    route OWNNETv6 reject;

    ipv6 &#123;
        <span class="hljs-keyword">import</span> all;
        export none;
    &#125;;
&#125;

template bgp <span class="hljs-keyword">dnpeers</span> &#123;
    local as OWNAS;
    <span class="hljs-built_in">path</span> metric <span class="hljs-number">1</span>;

    ipv4 &#123;
        <span class="hljs-keyword">import</span> filter &#123;
            <span class="hljs-keyword">if</span> is_valid_network() &amp;&amp; !is_self_net() then &#123;
                <span class="hljs-keyword">if</span> (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then &#123;
                    print <span class="hljs-string">&quot;[dn42] ROA check failed for &quot;</span>, net, <span class="hljs-string">&quot; ASN &quot;</span>, bgp_path.last;
                    reject;
                &#125;
                <span class="hljs-keyword">accept</span>;
            &#125;
            reject;
        &#125;;

        export <span class="hljs-keyword">filter</span> &#123;
            <span class="hljs-keyword">if</span> is_valid_network() &amp;&amp; <span class="hljs-literal">source</span> ~ [RTS_STATIC, RTS_BGP] then accept;
            reject;
        &#125;;
        import limit 1000 action block;
    &#125;;

    <span class="hljs-keyword">ipv6</span> &#123;
        <span class="hljs-keyword">import</span> filter &#123;
            <span class="hljs-keyword">if</span> is_valid_network_v6() &amp;&amp; !is_self_net_v6() then &#123;
                <span class="hljs-keyword">if</span> (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then &#123;
                    print <span class="hljs-string">&quot;[dn42] ROA check failed for &quot;</span>, net, <span class="hljs-string">&quot; ASN &quot;</span>, bgp_path.last;
                    reject;
                &#125;
                <span class="hljs-keyword">accept</span>;
            &#125;
            reject;
        &#125;;
        export <span class="hljs-keyword">filter</span> &#123;
            <span class="hljs-keyword">if</span> is_valid_network_v6() &amp;&amp; <span class="hljs-literal">source</span> ~ [RTS_STATIC, RTS_BGP] then accept;
            reject;
        &#125;;
        import limit 1000 action block;
    &#125;;
&#125;


include <span class="hljs-string">&quot;/etc/bird/peers/*&quot;</span>;</code></pre><p>然后在 <code>/etc/bird</code> 目录下创建一个文件夹，命名为 <code>peers</code> ，以便后续存储配置文件使用。</p><p>如果想更深入的学习如何编写 BIRD 配置文件，推荐查看 <a href="https://github.com/moesoha/bird-bgp-kickstart" rel="external nofollow noreferrer">BIRD 与 BGP 的新手开场</a> 和 <a href="https://bird.network.cz/?get_doc&amp;f=bird.html&amp;v=20" rel="external nofollow noreferrer">BIRD 官方文档</a> 。</p><h3 id="下载-roa-配置文件">下载 ROA 配置文件</h3><pre><code class="hljs bash">wget -4 -O /tmp/dn42_roa.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf &amp;&amp; <span class="hljs-built_in">mv</span> -f /tmp/dn42_roa.conf /etc/bird/dn42_roa.conf
wget -4 -O /tmp/dn42_roa_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf &amp;&amp; <span class="hljs-built_in">mv</span> -f /tmp/dn42_roa_v6.conf /etc/bird/dn42_roa_v6.conf</code></pre><p>使用此命令即可将 ROA 文件下载到本机以供使用。</p><p>还需要将此命令添加为定时任务，推荐设置为每小时运行一次，否则不会更新到最新的 ROA ，每次更新后都需要使用 <code>birdc configure</code> 命令重载 BIRD 配置。</p><h3 id="重新加载-bird-配置">重新加载 BIRD 配置</h3><pre><code class="hljs bash">birdc configure</code></pre><p>使用该命令重新加载 BIRD 配置，并使用 <code>birdc show protocol</code> 查看状态。</p><p><img src="https://s1.baoshuo.ren/2021/08/16/ZSPe6a3fpuDATG2.png" alt="" loading="lazy"></p><h2 id="dn42-wireguard-使用入门">DN42 WireGuard 使用入门</h2><p>WireGuard 是一种简单易用、速度快、现代化的 VPN ，它利用了最先进的加密技术，并使用 UDP 协议传输数据。WireGuard 设计为通用 VPN ，可在嵌入式设备和超级计算机上运行，​​ 适用于许多不同的环境。WireGuard 起初是专为 Linux 编写并发布的，后来被移植到各个平台上。在 <a href="http://WireGuard.com" rel="external nofollow noreferrer">WireGuard.com</a> 上可以找到它的 <a href="https://www.wireguard.com/papers/wireguard.pdf" rel="external nofollow noreferrer">技术白皮书</a> 。</p><h3 id="安装-wireguard">安装 WireGuard</h3><pre><code class="hljs bash">apt update
apt install wireguard -y</code></pre><p>一般情况下，执行此命令即可直接安装 WireGuard 和 WireGuard Tools ，无需额外操作。</p><h3 id="生成公钥与私钥">生成公钥与私钥</h3><pre><code class="hljs bash">wg genkey | <span class="hljs-built_in">tee</span> privatekey | wg pubkey &gt; publickey</code></pre><p>使用此命令即可在当前目录下生成两个名叫 <code>privatekey</code> 和 <code>publickey</code> 的文件，分别代表私钥和公钥。</p><h3 id="搭建-wireguard-隧道">搭建 WireGuard 隧道</h3><p>搭建 WireGuard 隧道非常简便，只需要生成一对公钥与私钥并与对等端交换公钥即可。</p><p>如果需要通过 WireGuard 隧道建立 BGP 会话，不能使用 WireGuard 内建的多 Peer 功能，必须为每个对等端创建一条隧道。</p><p>在 <code>/etc/wireguard</code> 目录下新建一个名为 <code>&lt;隧道名&gt;.conf</code> 的文件：</p><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span>
<span class="hljs-attr">PrivateKey</span> = &lt;私钥&gt;
<span class="hljs-attr">ListenPort</span> = &lt;监听端口&gt;
<span class="hljs-attr">PostUp</span>     = ip address add &lt;链路本地地址&gt;/<span class="hljs-number">64</span> dev %i
<span class="hljs-attr">PostUp</span>     = ip addr add &lt;本地 IPv6 地址&gt;/<span class="hljs-number">128</span> peer &lt;对端 IPv6 地址&gt;/<span class="hljs-number">128</span> dev %i
<span class="hljs-attr">PostUp</span>     = ip addr add &lt;本地 IPv4 地址&gt;/<span class="hljs-number">32</span> peer &lt;对端 IPv4 地址&gt;/<span class="hljs-number">32</span> dev %i
<span class="hljs-attr">Table</span>      = <span class="hljs-literal">off</span></code></pre><ul><li><code>PrivateKey</code> ：私钥。</li><li><code>ListenPort</code> ：监听端口。</li><li>第一个 <code>PostUp</code> ：（可选，推荐）添加链路本地地址。</li><li>第二个 <code>PostUp</code> ：（可选）添加本地和对等端的 DN42 IPv6 地址。</li><li>第三个 <code>PostUp</code> ：（可选）添加本地和对等端的 DN42 IPv4 地址。</li><li><code>Table</code> ：必须设定为 <code>off</code> （不导入系统路由表），否则会导致系统断网。</li></ul><p>当使用链路本地地址建立 BGP 会话时，可以不设置 DN42 IPv4 和 DN42 IPv6 地址，但是机器上必须有一张网卡上绑定了本机的 DN42 IPv4 和 DN42 IPv6 地址。同理，如果不使用链路本地地址建立 BGP 会话则无需添加链路本地地址。</p><pre><code class="hljs ini"><span class="hljs-section">[Peer]</span>
<span class="hljs-attr">PublicKey</span>           = &lt;对端公钥&gt;
<span class="hljs-attr">PresharedKey</span>        = &lt;对端预共享密钥&gt;
<span class="hljs-attr">Endpoint</span>            = &lt;对端 IP/域名 和 端口号&gt;
<span class="hljs-attr">PersistentKeepalive</span> = <span class="hljs-number">30</span>
<span class="hljs-attr">AllowedIPs</span>          = <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">8</span>, <span class="hljs-number">172.20</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">14</span>, <span class="hljs-number">172.31</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span>, fd00::/<span class="hljs-number">8</span>, fe80::/<span class="hljs-number">64</span></code></pre><ul><li><code>PublicKey</code> ：对端公钥。</li><li><code>PresharedKey</code> ：（可选）对端预共享密钥。</li><li><code>Endpoint</code> ：（可选）对端的连接域名/IP 及端口号。<br>如果对端没有公网 IP 地址，需要本地设置为被动模式则无需填写此项。</li><li><code>PersistentKeepalive</code> ：（可选）每隔多少秒发送一次握手信息防止连接被中断并更新对端 IP 。<br>如果本地没有公网 IP 地址，必须配置此项。</li><li><code>AllowedIPs</code> ：允许使用 WireGuard 转发流量的 IP 地址段。</li></ul><p>之后使用 <code>wg-quick up &lt;隧道名&gt;</code> 来启动隧道即可。</p><p>如需开机自启，可以在测试无误后执行 <code>systemctl enable wg-quick@&lt;隧道名&gt;</code> 。</p><h3 id="检测隧道状态">检测隧道状态</h3><pre><code class="hljs bash">wg show &lt;隧道名&gt;</code></pre><p>使用该命令即可查看隧道状态。</p><p><img src="https://s1.baoshuo.ren/2021/08/16/wxgUJNHnQAXFMdS.png" alt="" loading="lazy"></p><p>如上图所示，当 <code>latest handshake</code> 时间较近且 <code>transfer</code> 有收有发时可以认为隧道正常。</p><p>如需查看所有隧道的状态，直接使用 <code>wg</code> 命令即可。</p><h2 id="与其他网络进行对等互联">与其他网络进行对等互联</h2><h3 id="系统配置">系统配置</h3><p>在 DN42 网络中，没有绝对意义上的客户端，每个人都可能是他人的路由器，经常会出现数据包的来源网卡与回复使用的网卡不一致的情况，因此需要打开 Linux 内核的数据包转发功能，具体操作如下：</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt; /etc/sysctl.conf
<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.default.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf
<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv6.conf.all.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf
sysctl -p</code></pre><p>同时，也需要关闭 Linux 内核的 <code>rp_filter</code> 的严格模式，具体操作如下：</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.conf.default.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf
<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.conf.all.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf
sysctl -p</code></pre><p>除此之外，还需要关闭一些自动化的配置 iptables 防火墙的工具，如 UFW 。</p><h3 id="搭建-wireguard-隧道-2">搭建 WireGuard 隧道</h3><p>请参考 <a href="#DN42-WireGuard-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8">DN42 WireGuard 使用入门</a> 一节。</p><h3 id="配置-bgp-会话">配置 BGP 会话</h3><p>在 <code>/etc/bird/peers</code> 目录下新建一个文件，命名为 <code>&lt;名字&gt;.conf</code> 。</p><p>如果使用链路本地地址进行 Peer 的话，需要按照下面的配置示例进行配置：</p><pre><code class="hljs bird">protocol bgp &lt;名字&gt; from dnpeers &#123;
    neighbor &lt;对端链路本地地址&gt; % &#x27;&lt;对端 WireGuard 隧道名&gt;&#x27; as &lt;对端 ASN&gt;;
    source address &lt;本地的链路本地地址&gt;;
&#125;</code></pre><p>否则按照下面的配置示例进行配置：</p><pre><code class="hljs bird">protocol bgp &lt;名字&gt; from dnpeers &#123;
    neighbor &lt;对端 IPv6 地址&gt; as &lt;对端 ASN&gt;;
&#125;</code></pre><p>然后使用 <code>birdc configure</code> 重载配置即可。</p><h2 id="更新日志">更新日志</h2><ul><li>2021-04-04 第一版 <sup>（2021 年 8 月 10 日存档于 <a href="https://web.archive.org/web/20210810062825/https://blog.baoshuo.ren/post/dn42-network/" rel="external nofollow noreferrer">互联网档案馆</a>）</sup></li><li>2021-08-14 第二版</li></ul><h2 id="参考资料-4">参考资料</h2><ol><li><a href="https://dn42.dev/howto/Getting-Started" rel="external nofollow noreferrer">Getting Started - DN42 Wiki</a></li><li><a href="https://git.dn42.dev/dn42/registry/src/branch/master/README.md" rel="external nofollow noreferrer">Guide for creating a Pull Request - dn42/registry - DN42 Git</a></li><li><a href="https://lantian.pub/article/modify-website/dn42-experimental-network-2020.lantian/" rel="external nofollow noreferrer">DN42 实验网络介绍及注册教程（2020-10-01 更新） - Lan Tian @ Blog</a></li><li><a href="https://datatracker.ietf.org/" rel="external nofollow noreferrer">IETF Datatracker</a></li><li><a href="https://en.wikipedia.org/wiki/Unique_local_address" rel="external nofollow noreferrer">Unique local address - Wikipedia</a></li><li><a href="https://github.com/moesoha/bird-bgp-kickstart" rel="external nofollow noreferrer">BIRD 与 BGP 的新手开场 - Soha Jin - GitHub</a></li></ol>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[年轻人的第一个 ASN]]></title>
        <id>/post/my-own-asn/</id>
        <link href="/post/my-own-asn/"/>
        <updated>2021-03-20T17:06:09.000Z</updated>
        <summary type="html"><![CDATA[很久之前就有了这样的一个想法：拥有一个自己的 ASN 。2021 年的寒假末尾，我终于找到了一个肯给我这个未成年人申请 ASN 的 LIR 。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/02/28/XMjiBGVdHmARW48.png" width="100%" alt="年轻人的第一个 ASN" /><p>很久之前就有了这样的一个想法：拥有一个自己的 ASN 。2021 年的寒假末尾，我终于找到了一个肯给我这个未成年人申请 ASN 的 LIR 。</p><span id="more"></span><p>于是这个世界上又多了一个祸害公网的人。</p><p><strong>2021-12-09 更新</strong>：将 IP 广播部分直接链接到《<a href="/post/dn42-network">初探 DN42 网络</a>》中的「DN42 BIRD2 使用入门」一节，以及一些不大不小的修改。</p><h2 id="注册-asn-2">注册 ASN</h2><p>我找了某个 LIR 注册的 APNIC 的 ASN ，下号用时 3 个工作日。</p><p>需要提供的信息有这些（带有 <code>[保密]</code> 标签的是非公开信息，只有你的 LIR 和 APINC 会知道）：</p><ol><li>[保密] 身份证明材料</li><li>主标识</li><li>联系人邮箱</li><li>noc 邮箱</li><li>abuse 邮箱</li><li>国家</li><li>联系人地址</li><li>联系人姓名</li><li>联系人电话</li><li>ASN 的标识</li><li>ASN 的全名</li><li>ASN 所属国家</li><li>[保密] 两个上游 ASN</li><li>[保密] ASN 将要部署在的物理位置</li></ol><p>然后等了 3 个工作日，我的 ASN 申请终于通过审核并下号了。</p><p>需要注意的是 APNIC 每半年会向联系人邮箱发送一封验证邮件，所以邮箱需要保持畅通，并且及时查看新邮件。</p><h2 id="申请-vultr-的-bgp-广播功能">申请 Vultr 的 BGP 广播功能</h2><p>Vultr 的 BGP 广播功能可以称得上是「新手友好」的了。Vultr 良好的过滤系统保证了一般情况下即使发送了错误的路由表也不会漏到公网去，不怕搞炸，方便学习时使用。</p><p>点击 <a href="https://my.vultr.com/bgp/" rel="external nofollow noreferrer">https://my.vultr.com/bgp/</a> 进入 Vultr BGP 广播功能的开通页面。</p><p><img src="https://s1.baoshuo.ren/2021/03/12/aYNdpciAb217wuP.png" alt="" loading="lazy"></p><p>点击页面中的 <strong>Get Started</strong> 进入 BGP 开通申请页面。</p><p><img src="https://s1.baoshuo.ren/2021/03/12/Sb6AoPXTuJ3YIKn.png" alt="" loading="lazy"></p><ol><li>将 <strong>I have my own IP space</strong> 和 <strong>I have my own ASN</strong> 设置为 YES 。</li><li>在 <strong>My ASN</strong> 处填写 ASN （不含 <code>AS</code> 前缀）。</li><li>在 <strong>BGP Password</strong> 处填写你想要的 BGP 密码。</li><li>在 <strong>IP Prefixes</strong> 处填写你的 IP 前缀（CIDR 格式）。</li><li><strong>Routes we shoule send you</strong> 选择 <strong>Full Table</strong> 。</li><li>LOA 按照下方提供的模板照抄即可。</li></ol><p>然后点击 <strong>Setup</strong> 即可。</p><details><summary>LOA 模板</summary><p>这是一篇 LOA 模板，照抄即可。</p><pre><code class="hljs text">AUTHORIZATION LETTER

[日期, 如 Feb 27, 2021]

To whom it may concern,

This letter serves as authorization for [服务商公司名, 如 Vultr] with [ASN, 如 AS2333] to announce the following IP address blocks:

[IP SPACE / ASN / SUBNET]
[IP SPACE / ASN / SUBNET]
[...]

As a representative of the company [公司名称] that is the owner of the subnet and/or ASN, I hereby declare that I&#x27;m authorized to represent and sign for this LOA.

Should you have questions about this request, email me at [邮箱], or call: [电话号码]

From,

[姓名]
[公司名称]
[职位, 如 Network Administrator]
[电话号码]</code></pre></details><p><img src="https://s1.baoshuo.ren/2021/03/13/nbQxcZLFNV6KBgP.png" alt="" loading="lazy"></p><p>提交完毕之后会出现如图所示的界面，点击 <strong>Start</strong> 即可开始验证进程。</p><p><img src="https://s1.baoshuo.ren/2021/03/13/6QKhFL4PGxoeEXn.png" alt="" loading="lazy"></p><p>以 AS141776 的验证为例，选择好接收验证邮件的邮箱，然后点击 <strong>Send</strong> 即可。</p><p><img src="https://s1.baoshuo.ren/2021/03/13/rE4txqgBLeZK9Ou.png" alt="" loading="lazy"></p><p><img src="https://s1.baoshuo.ren/2021/03/13/rAOSIP5oezGRqpc.png" alt="" loading="lazy"></p><p>点击邮箱里的链接即可（第一个是允许，第二个是拒绝）</p><p><img src="https://s1.baoshuo.ren/2021/03/13/xBXiqmukOQbZT6r.png" alt="" loading="lazy"></p><p>验证成功后的提示。</p><p>之后等待客服开通即可。</p><p>由于我是在晚上申请的 Vultr BGP 服务，所以几分钟就开通好了。</p><p><img src="https://s1.baoshuo.ren/2021/03/13/2aLwgPWHzlxF9DY.png" alt="" loading="lazy"></p><p>之后不要忘记去控制台重启实例哦~</p><h2 id="使用-bird2-广播-ip">使用 BIRD2 广播 IP</h2><p>可以参考我在 <a href="/post/dn42-network/#dn42-bird2-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8">初探 DN42 网络</a> 这篇文章的「DN42 BIRD2 使用入门」一节中描述的步骤，此处不再赘述。</p><p>如果不会写配置文件可以参考 <a href="https://github.com/renbaoshuo/network-configs" rel="external nofollow noreferrer">renbaoshuo/network-configs</a> 仓库中的配置。</p><h2 id="一些注意事项">一些注意事项</h2><h3 id="拆分-ip-段">拆分 IP 段</h3><p>由于我一下子用不了那么多 IP ，所以我决定把我的 <code>/44</code> 拆分成几个 <code>/48</code> 来用。</p><p>如果不涉及 whois 信息的修改操作，那么只需要修改一下 bird 的配置分开广播即可。</p><p>APNIC 修改 whois 信息的流程可以参考 <a href="https://www.apnic.net/manage-ip/using-whois/updating-whois/objects/email-updates/" rel="external nofollow noreferrer">Sending updates by email - APNIC</a> 页面上的指引发送邮件。</p><h3 id="网络交换中心（internet-exchange）">网络交换中心（Internet Exchange）</h3><p>加 IX 的操作流程和 Peer 差不多，注意只发送自己和自己下游（如果有）的路由，不能把上游发来的路由也塞进去，否则会被断开连接。</p><h2 id="名词释义">名词释义</h2><ul><li>LIR: 本地互联网注册机构</li><li>RIR: 区域互联网注册机构 （<a href="https://zh.wikipedia.org/zh-cn/%E5%8C%BA%E5%9F%9F%E4%BA%92%E8%81%94%E7%BD%91%E6%B3%A8%E5%86%8C%E7%AE%A1%E7%90%86%E6%9C%BA%E6%9E%84" rel="external nofollow noreferrer">维基百科</a>）</li><li>ASN: 自治系统编号（<a href="https://zh.wikipedia.org/zh-cn/%E8%87%AA%E6%B2%BB%E7%B3%BB%E7%BB%9F" rel="external nofollow noreferrer">维基百科</a>）</li><li>BGP: 边界网关协议（<a href="https://zh.wikipedia.org/zh-cn/%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE" rel="external nofollow noreferrer">维基百科</a>）</li><li>BIRD: 一个功能齐全的动态 IP 路由守护程序（<a href="https://bird.network.cz" rel="external nofollow noreferrer">官方网站</a>）</li></ul><h2 id="参考资料-7">参考资料</h2><ol><li><a href="https://www.vultr.com/docs/example-letter-of-authorization-for-bgp-announcements" rel="external nofollow noreferrer">Example Letter of Authorization for BGP Announcements</a>，Vultr Docs。</li><li><a href="https://blog.lsc.moe/post/12/" rel="external nofollow noreferrer">IP 广播 : CentOS 7 使用 bird6 广播 IPv6</a>，LiCEO。</li><li><a href="/post/dn42-network/">初探 DN42 网络</a>，宝硕博客。</li><li><a href="https://hex.moe/p/c5ad0614/" rel="external nofollow noreferrer">年轻人的第一个私人BGP(一) - 注册一个ASN</a>，LovelyWei’s 废纸篓。</li><li><a href="https://hex.moe/p/d6a20b99/" rel="external nofollow noreferrer">年轻人的第一个私人BGP(二) - 广播你的IP</a>，LovelyWei’s 废纸篓。</li></ol>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[初识 Service Worker —— 使用 Workbox 快速开发 Service Worker]]></title>
        <id>/post/workbox-service-worker/</id>
        <link href="/post/workbox-service-worker/"/>
        <updated>2021-02-27T16:02:04.000Z</updated>
        <summary type="html"><![CDATA[对于优化前端加载性能这个问题，许多人以 http-cache、异步加载、304 状态码、文件压缩、CDN 等方法来解决。 其实除了这些方法，还有一个比它们都强大的，那就是 Service Worker 。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/02/28/kdnvD8ACWBa1tbI.png" width="100%" alt="初识 Service Worker —— 使用 Workbox 快速开发 Service Worker" /><p>对于优化前端加载性能这个问题，许多人以 http-cache、异步加载、304 状态码、文件压缩、CDN 等方法来解决。<br>其实除了这些方法，还有一个比它们都强大的，那就是 Service Worker 。</p><span id="more"></span><p>我们可以使用 Google Chrome 团队的 <a href="https://github.com/GoogleChrome/workbox" rel="external nofollow noreferrer">Workbox</a> 来实现 Service Worker 的快速开发。</p><h2 id="注册-service-worker">注册 Service Worker</h2><p>在页面中添加以下内容以注册一个 Service Worker 。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span>
<span class="language-javascript">  <span class="hljs-comment">// 检测是否支持 Service Worker</span></span>
<span class="language-javascript">  <span class="hljs-comment">// 也可使用 navigator.serviceWorker 判断</span></span>
<span class="language-javascript">  <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;</span>
<span class="language-javascript">    <span class="hljs-comment">// 为了保证首屏渲染性能，在页面 onload 完之后注册 Service Worker</span></span>
<span class="language-javascript">    <span class="hljs-comment">// 不使用 window.onload 以免冲突</span></span>
<span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span>
<span class="language-javascript">      navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;/sw.js&#x27;</span>);</span>
<span class="language-javascript">    &#125;);</span>
<span class="language-javascript">  &#125;</span>
<span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>当然，在这之前你需要先有一个 Service Worker 的代码 <code>/sw.js</code> 。</p><p>你可以在这个文件中写入以下代码来检测是否成功地注册了 Service Worker 。</p><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">clear</span>();
<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Successful registered service worker.&#x27;</span>);</code></pre><p><img src="https://s1.baoshuo.ren/2021/02/28/Eu4mVIC2kNrUgiL.png" alt="" loading="lazy"></p><h2 id="引入-workbox">引入 Workbox</h2><p>你可以使用 Google 提供的 CDN 来引入 Workbox 。<br>只需在 <code>sw.js</code> 的开头写入以下内容即可：</p><pre><code class="hljs javascript"><span class="hljs-title function_">importScripts</span>(
  <span class="hljs-string">&#x27;https://storage.googleapis.com/workbox-cdn/releases/6.1.1/workbox-sw.js&#x27;</span>
);</code></pre><p>如果你觉得 Google 的 CDN 不太靠谱的话，可以使用 <code>workbox-cli</code> 将资源存在本地：</p><pre><code class="hljs bash">npm i workbox-cli -g
workbox copyLibraries &#123;path/to/workbox/&#125;</code></pre><p>这时需要在 <code>sw.js</code> 的开头将上方写入的内容替换为以下内容即可：</p><pre><code class="hljs javascript"><span class="hljs-title function_">importScripts</span>(<span class="hljs-string">&#x27;&#123;path/to&#125;/workbox/workbox-sw.js&#x27;</span>);
workbox.<span class="hljs-title function_">setConfig</span>(&#123;
  <span class="hljs-attr">modulePathPrefix</span>: <span class="hljs-string">&#x27;&#123;path/to&#125;/workbox/&#x27;</span>,
&#125;);</code></pre><h2 id="workbox-策略">Workbox 策略</h2><h3 id="stale-while-revalidate（重新验证时过期）">Stale While Revalidate（重新验证时过期）</h3><p><img src="https://s1.baoshuo.ren/2021/02/28/rx8zafbqPe1JnkX.png" alt="" loading="lazy"></p><p>此策略将对网络请求使用缓存来响应（如果有），并在后台更新缓存。如果未缓存，它将等待网络响应并使用它。<br>这是一个相当安全的策略，因为这意味着用户会定期更新其缓存。这种策略的缺点是：它总是从网络上请求资源，较为浪费用户的带宽。</p><pre><code class="hljs javascript"><span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(matchString),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>()
);</code></pre><h3 id="network-first（网络优先）">Network First（网络优先）</h3><p><img src="https://s1.baoshuo.ren/2021/02/28/9ViWk1ZyU4CuDxE.png" alt="" loading="lazy"></p><p>此策略将尝试首先从网络获得响应。如果收到响应，它将把它传递给浏览器，并将其保存到缓存中。如果网络请求失败，将使用最后一个缓存的响应。</p><pre><code class="hljs javascript"><span class="hljs-title function_">registerRoute</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(matchString), <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">NetworkFirst</span>());</code></pre><h3 id="cache-first（缓存优先）">Cache First（缓存优先）</h3><p><img src="https://s1.baoshuo.ren/2021/02/28/jkn4Y3mNCRZrSdX.png" alt="" loading="lazy"></p><p>此策略将首先检查缓存中是否有响应，如果有响应，则使用该策略。如果请求不在缓存中，则将使用网络，并将任何有效响应添加到缓存中，然后再传递给浏览器。</p><pre><code class="hljs javascript"><span class="hljs-title function_">registerRoute</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(matchString), <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">CacheFirst</span>());</code></pre><h3 id="network-only（仅网络）">Network Only（仅网络）</h3><p><img src="https://s1.baoshuo.ren/2021/02/28/cQYTlvie1dX8hOF.png" alt="" loading="lazy"></p><p>强制响应来自网络。</p><pre><code class="hljs javascript"><span class="hljs-title function_">registerRoute</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(matchString), <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">NetworkOnly</span>());</code></pre><h3 id="cache-only（仅缓存）">Cache Only（仅缓存）</h3><p><img src="https://s1.baoshuo.ren/2021/02/28/71Sw5tTaBQKl8ri.png" alt="" loading="lazy"></p><p>强制响应来自缓存。</p><pre><code class="hljs javascript"><span class="hljs-title function_">registerRoute</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(matchString), <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">CacheOnly</span>());</code></pre><h3 id="策略配置">策略配置</h3><p>可以通过定义要使用的插件来自定义路由的行为。</p><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>(&#123;
    <span class="hljs-comment">// Use a custom cache for this route.</span>
    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;my-cache-name&#x27;</span>,

    <span class="hljs-comment">// Add an array of custom plugins (e.g. `ExpirationPlugin`).</span>
    <span class="hljs-attr">plugins</span>: [
        ...
    ]
&#125;);</code></pre><h2 id="workbox-中的自定义策略">Workbox 中的自定义策略</h2><p>在某些情况下，您可能希望使用自己的其他策略来响应请求，或者只是通过模板在 Service Worker 中生成请求。<br>为此可以提供一个异步返回 <code>Response</code> 对象的函数 <code>handler</code> 。</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handler</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">&#123; url, event &#125;</span>) =&gt; &#123;
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">`Custom handler response.`</span>);
&#125;;

workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(matchString), handler);</code></pre><p>需要注意的是，如果在 <code>match</code> 回调中返回一个值，它将 <code>handler</code> 作为 <code>params</code> 参数传递到回调中。</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">match</span> = (<span class="hljs-params">&#123; url, event &#125;</span>) =&gt; &#123;
  <span class="hljs-keyword">if</span> (url.<span class="hljs-property">pathname</span> === <span class="hljs-string">&#x27;/example&#x27;</span>) &#123;
    <span class="hljs-keyword">return</span> &#123;
      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Workbox&#x27;</span>,
      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;guide&#x27;</span>,
    &#125;;
  &#125;
&#125;;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">handler</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">&#123; url, event, params &#125;</span>) =&gt; &#123;
  <span class="hljs-comment">// Response will be &quot;A guide to Workbox&quot;</span>
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">`A <span class="hljs-subst">$&#123;params.type&#125;</span> to <span class="hljs-subst">$&#123;params.name&#125;</span>`</span>);
&#125;;

workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(match, handler);</code></pre><p>如果 URL 中的某些信息可以在 match 回调中解析一次并在中使用，则这可能会对 <code>handler</code> 有所帮助。</p><h2 id="workbox-实践">Workbox 实践</h2><p>通常对于大部分项目使用 Workbox 时一般会引入相应的 gulp 或者 webpack 插件，在构建流程中完成对 Service Worker 的注册、将指定 URL 进行 Precache、完成 sw.js 的生成，等等。<br>但是对于 Hexo、Jekyll 这些静态站点生成器或者 WordPress、Typecho 这些 CMS，如果不安装相应的插件，就需要自己从头编写一个 <code>sw.js</code>。</p><p>先写一下总的配置：</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> cacheSuffixVersion = <span class="hljs-string">&#x27;-210227&#x27;</span>; <span class="hljs-comment">// 缓存版本号</span>
<span class="hljs-keyword">const</span> maxEntries = <span class="hljs-number">100</span>; <span class="hljs-comment">// 最大条目数</span>

core.<span class="hljs-title function_">setCacheNameDetails</span>(&#123;
  <span class="hljs-attr">prefix</span>: <span class="hljs-string">&#x27;baoshuo-blog&#x27;</span>, <span class="hljs-comment">// 前缀</span>
  <span class="hljs-attr">suffix</span>: cacheSuffixVersion, <span class="hljs-comment">// 后缀</span>
&#125;);</code></pre><h3 id="google-fonts">Google Fonts</h3><p>Google Fonts 主要使用两个域名：<code>fonts.googleapis.com</code> 和 <code>fonts.gstatic.com</code> ，因此只需在匹配到这两个域名时进行缓存。</p><pre><code class="hljs javascript">workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-comment">// 匹配 fonts.googleapis.com 和 fonts.gstatic.com 两个域名</span>
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://(?:fonts\\.googleapis\\.com|fonts\\.gstatic\\.com)&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>(&#123;
    <span class="hljs-comment">// cache storage 名称和版本号</span>
    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;font-cache&#x27;</span> + cacheSuffixVersion,
    <span class="hljs-attr">plugins</span>: [
      <span class="hljs-comment">// 使用 expiration 插件实现缓存条目数目和时间控制</span>
      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">expiration</span>.<span class="hljs-title class_">ExpirationPlugin</span>(&#123;
        <span class="hljs-comment">// 最大保存项目</span>
        maxEntries,
        <span class="hljs-comment">// 缓存 30 天</span>
        <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>,
      &#125;),
      <span class="hljs-comment">// 使用 cacheableResponse 插件缓存状态码为 0 的请求</span>
      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">cacheableResponse</span>.<span class="hljs-title class_">CacheableResponsePlugin</span>(&#123;
        <span class="hljs-attr">statuses</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>],
      &#125;),
    ],
  &#125;)
);</code></pre><h3 id="jsdelivr-cdn">jsDelivr CDN</h3><p>使用 jsDelivr CDN 时如果指定了库的版本，对应的文件可以称得上是永久不会改变的，所以使用 <code>CacheFirst</code> 来进行缓存。</p><pre><code class="hljs javascript">workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://cdn\\.jsdelivr\\.net&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">CacheFirst</span>(&#123;
    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;static-immutable&#x27;</span> + cacheSuffixVersion,
    <span class="hljs-attr">fetchOptions</span>: &#123;
      <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,
      <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;omit&#x27;</span>,
    &#125;,
    <span class="hljs-attr">plugins</span>: [
      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">expiration</span>.<span class="hljs-title class_">ExpirationPlugin</span>(&#123;
        <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>,
        <span class="hljs-attr">purgeOnQuotaError</span>: <span class="hljs-literal">true</span>,
      &#125;),
    ],
  &#125;)
);</code></pre><h3 id="google-analytics">Google Analytics</h3><p>Workbox 有一个 <a href="https://developers.google.com/web/tools/workbox/guides/enable-offline-analytics" rel="external nofollow noreferrer">Google Analytics 离线统计插件</a>，可惜我用的是 Sukka 大佬编写的<a href="https://github.com/SukkaW/cloudflare-workers-async-google-analytics" rel="external nofollow noreferrer">非官方 Google Analytics 实现</a>，所以只能添加一个 <code>NetworkOnly</code> 来放弃离线统计。</p><pre><code class="hljs javascript">workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://api\\.baoshuo\\.ren/cfga/(.*)&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">NetworkOnly</span>(&#123;
    <span class="hljs-attr">plugins</span>: [
      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">backgroundSync</span>.<span class="hljs-title class_">BackgroundSyncPlugin</span>(<span class="hljs-string">&#x27;Optical_Collect&#x27;</span>, &#123;
        <span class="hljs-attr">maxRetentionTime</span>: <span class="hljs-number">12</span> * <span class="hljs-number">60</span>, <span class="hljs-comment">// Retry for max of 12 Hours (specified in minutes)</span>
      &#125;),
    ],
  &#125;)
);</code></pre><h3 id="图片">图片</h3><p>由于我开通了 <a href="http://SM.MS" rel="external nofollow noreferrer">SM.MS</a> 的 LifeTime Premium VIP ，所以图片当然是要存到这里啦~</p><p><a href="http://SM.MS" rel="external nofollow noreferrer">SM.MS</a> 的图片域名有这几个：<code>i.loli.net</code>、<code>vip1.loli.net</code>、<code>vip2.loli.net</code>、<code>s1.baoshuo.ren</code>、<code>s1.baoshuo.ren</code>，只需要写一个正则匹配下就好了。</p><p>由于图片链接对应的文件像 jsDelivr 一样也是几乎永久都不会改变的，所以使用 <code>CacheFirst</code> 来进行缓存。</p><pre><code class="hljs javascript">workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://(?:i|vip[0-9])\\.loli\\.(?:io|net)&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">CacheFirst</span>(&#123;
    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;img-cache&#x27;</span> + cacheSuffixVersion,
    <span class="hljs-attr">plugins</span>: [
      <span class="hljs-comment">// 使用 expiration 插件实现缓存条目数目和时间控制</span>
      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">expiration</span>.<span class="hljs-title class_">ExpirationPlugin</span>(&#123;
        maxEntries, <span class="hljs-comment">// 最大保存项目</span>
        <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">30</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>, <span class="hljs-comment">// 缓存 30 天</span>
      &#125;),
      <span class="hljs-comment">// 使用 cacheableResponse 插件缓存状态码为 0 的请求</span>
      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">cacheableResponse</span>.<span class="hljs-title class_">CacheableResponsePlugin</span>(&#123;
        <span class="hljs-attr">statuses</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>],
      &#125;),
    ],
  &#125;)
);</code></pre><h3 id="友情链接">友情链接</h3><p>这些文件只是偶尔更新，使用 <code>StaleWhileRevalidate</code> ，可以兼顾速度与版本更新。</p><pre><code class="hljs javascript">workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://friends\\.baoshuo\\.ren(.*)(png|jpg|jpeg|svg|gif)&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>(&#123;
    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;img-cache&#x27;</span> + cacheSuffixVersion,
    <span class="hljs-attr">fetchOptions</span>: &#123;
      <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,
      <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;omit&#x27;</span>,
    &#125;,
  &#125;)
);
workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;https://friends\\.baoshuo\\.ren/links.json&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>()
);</code></pre><h3 id="disqus-评论">Disqus 评论</h3><p>DisqusJS 判断访客的 Disqus 可用性是通过检查 <code>shortname.disqus.com/favicon.ico</code> 和 <code>disqus.com/favicon.ico</code> ，显然是不能被缓存的。<br>API 可以在无网络时使用 <code>NetworkFirst</code> 来达到无网络时也能查看评论的效果。<br>另外 Disqus 本身也没有缓存的必要，所以对 <code>*.disqus.com</code> 使用 <code>NetworkOnly</code> 即可。<br>但是 <code>*.disquscdn.com</code> 下的头像、JS、CSS 是可以缓存一段时间的，所以使用 <code>CacheFirst</code> 缓存 10 天。</p><pre><code class="hljs javascript"><span class="hljs-comment">// API</span>
workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://api\\.baoshuo\\.ren/disqus/(.*)&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">NetworkFirst</span>(&#123;
    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;dsqjs-api&#x27;</span> + cacheSuffixVersion,
    <span class="hljs-attr">fetchOptions</span>: &#123;
      <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,
      <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;omit&#x27;</span>,
    &#125;,
    <span class="hljs-attr">networkTimeoutSeconds</span>: <span class="hljs-number">3</span>,
  &#125;)
);
<span class="hljs-comment">// Disqus</span>
workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://(.*)disqus\\.com&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">NetworkOnly</span>()
);
workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://(.*)disquscdn\\.com(.*)&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">CacheFirst</span>(&#123;
    <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;disqus-cdn-cache&#x27;</span> + cacheSuffixVersion,
    <span class="hljs-attr">plugins</span>: [
      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">expiration</span>.<span class="hljs-title class_">ExpirationPlugin</span>(&#123;
        <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">10</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>,
      &#125;),
      <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">cacheableResponse</span>.<span class="hljs-title class_">CacheableResponsePlugin</span>(&#123;
        <span class="hljs-attr">statuses</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>],
      &#125;),
    ],
  &#125;)
);</code></pre><h3 id="后缀匹配">后缀匹配</h3><p>针对其余没有被域名匹配到的静态文件，通过文件后缀进行匹配并使用 <code>StaleWhileRevalidate</code> ，可以兼顾速度与版本更新。</p><pre><code class="hljs javascript">workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;.*.(?:png|jpg|jpeg|svg|gif|webp)&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>()
);
workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">registerRoute</span>(
  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;.*.(css|js)&#x27;</span>),
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>()
);</code></pre><h3 id="默认行为">默认行为</h3><p>使用 Workbox 的 defaultHandler 匹配剩下的请求（包括页面自身），一律使用 <code>NetworkFirst</code> ，借助 Workbox 的 <code>runtimeCache</code> 起到加速和离线效果。</p><pre><code class="hljs javascript">workbox.<span class="hljs-property">routing</span>.<span class="hljs-title function_">setDefaultHandler</span>(
  <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="hljs-title class_">NetworkFirst</span>(&#123;
    <span class="hljs-attr">networkTimeoutSeconds</span>: <span class="hljs-number">3</span>,
  &#125;)
);</code></pre><h2 id="参考资料-13">参考资料</h2><p><em>文章头图来自：<a href="https://developers.google.com/web/tools/workbox" rel="external nofollow noreferrer">https://developers.google.com/web/tools/workbox</a></em></p><p><em><a href="#Workbox-%E7%AD%96%E7%95%A5">Workbox 策略</a> 一节中的配图来自：<a href="https://web.dev/offline-cookbook/" rel="external nofollow noreferrer">https://web.dev/offline-cookbook/</a></em></p><ul><li><a href="https://developers.google.com/web/tools/workbox/" rel="external nofollow noreferrer">Workbox - Google Developers</a></li><li><a href="https://blog.skk.moe/post/hello-workbox/" rel="external nofollow noreferrer">Workbox, not sw-toolbox &amp; sw-precache - Sukka’s Blog</a></li><li><a href="https://github.com/GoogleChrome/workbox" rel="external nofollow noreferrer">GoogleChrome/workbox - GitHub</a></li><li><a href="https://web.dev/offline-cookbook/#serving-suggestions" rel="external nofollow noreferrer">The Offline Cookbook - web.dev</a></li></ul>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈网页「深色模式」的实现]]></title>
        <id>/post/darkmode/</id>
        <link href="/post/darkmode/"/>
        <updated>2021-02-17T15:25:30.000Z</updated>
        <summary type="html"><![CDATA[随着越来越多的操作系统、浏览器开始支持 Dark Mode 和相应的 Media Queries Level 5，越来越多的网站开始添加深色模式。 我的博客其实早在 2019 年末就支持了深色模式，但一直没有很好地实现这个功能。于是在 2020 年的那个超长寒假，我把博客系统更换到了 Typecho，并与某位大佬一起实现了一个深色模式插件（原文链接已丢失）。正好今年寒假把博客换到了 Hexo 上，趁着主题代码还热乎、能看懂，赶紧来写写我的深色模式是如何实现的。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/02/17/2Ia7ONPMKQDyiBn.png" width="100%" alt="浅谈网页「深色模式」的实现" /><p>随着越来越多的操作系统、浏览器开始支持 Dark Mode 和相应的 <a href="https://drafts.csswg.org/mediaqueries-5/#prefers-color-scheme" rel="external nofollow noreferrer">Media Queries Level 5</a>，越来越多的网站开始添加深色模式。</p><p>我的博客其实早在 2019 年末就支持了深色模式，但一直没有很好地实现这个功能。于是在 2020 年的那个超长寒假，我把博客系统更换到了 Typecho，并与某位大佬一起实现了一个深色模式插件<sup>（原文链接已丢失）</sup>。正好今年寒假把博客换到了 Hexo 上，趁着主题代码还热乎、能看懂，赶紧来写写我的深色模式是如何实现的。</p><span id="more"></span><p><img src="https://s1.baoshuo.ren/2021/02/17/tYEURzvx7LQ4mej.png" alt="" loading="lazy"></p><h2 id="关于深色模式">关于深色模式</h2><p><img src="https://s1.baoshuo.ren/2021/02/17/jXVHb1aAUf5pRhk.png" alt="" loading="lazy"></p><p>Dark themes reduce the luminance emitted by device screens, while still meeting minimum color contrast ratios. They help improve visual ergonomics by reducing eye strain, adjusting brightness to current lighting conditions, and facilitating screen use in dark environments – all while conserving battery power.</p><blockquote><p><strong>翻译</strong></p><p>深色主题能降低设备屏幕发出的亮度，同时仍然满足最小的颜色对比度。它们有助于改善视觉效果、减少眼睛疲劳，调整亮度以适应当前的照明条件，并有助于在黑暗环境中使用屏幕，同时节省电池电量。</p></blockquote><h2 id="界面设计">界面设计</h2><h3 id="颜色">颜色</h3><p><strong>不要使用 100% 的纯黑</strong></p><p>Google 在 Material Design 的设计指南中对于深色模式列出了一系列设计规范，其中第一条就是 「不要使用 100% 的纯黑」 。</p><p>Google 推荐将深色表面和 100% 白色文字的对比度至少设置为为 15.8:1 （Dark surfaces and 100% white body text have a contrast level of at least 15.8:1）</p><p>为什么呢？因为纯白色会反射所有波长的光线，而纯黑色会吸收所有光线，这是对比度最大的两种颜色，白底黑字时，文字过于刺眼，而黑底白字时，文字又可能难以辨认。如果长时间阅读这样的文字，势必会让眼睛感觉到疲劳，与深色模式开发的初衷背道而驰。</p><p>Google 推荐使用 <code>#121212</code> 来作为深色模式的<strong>主背景色</strong>。</p><img src="https://s1.baoshuo.ren/2021/02/17/QOjZ8D2PnW6wtSN.png" width="700"><p>A dark theme uses dark grey, rather than black, as the primary surface color for components. Dark grey surfaces can express a wider range of color, elevation, and depth, because it’s easier to see shadows on grey (instead of black).</p><p>Dark grey surfaces also reduce eye strain, as light text on a dark grey surface has less contrast than light text on a black surface.</p><blockquote><p><strong>翻译</strong></p><p>深色主题应使用深灰而不是黑色作为组件的主要表面颜色。深灰色表面可以表示更广泛的颜色，高度和深度范围，因为更容易看到灰色阴影（而不是黑色）。</p><p>深灰色的表面还可以减少眼睛疲劳，因为深灰色表面上的浅色文本的对比度低于黑色表面上的浅色文本。</p></blockquote><p>许多常见应用的深色模式背景色的 H 值都在 200~250 范围内（即蓝色范围），在纯灰色的基础上稍微偏冷一些。不过也有一些例外，比如网易云音乐的背景色有点偏暖，可能和其品牌色有关（网易云音乐的品牌色是暖红色）。</p><hr><p><strong>不要让亮色占据过多面积</strong></p><p>在深色主题中应该尽可能地使用有限的颜色进行强调，并使大部分空间显示出深色表面。</p><img src="https://s1.baoshuo.ren/2021/02/17/o1x4jPm92AWECZp.png" width="300" alt="正确示例"><p>▲ 正确示例</p><img src="https://s1.baoshuo.ren/2021/02/17/SguCOs4WM5Gqd7I.png" width="300" alt="错误示例"><p>▲ 错误示例</p><hr><p><strong>不要使用过高的色彩饱和度</strong></p><p>在深色模式下，过高的色彩饱和度可能会使文本像下方这样难以辨识（清晰度降低）：</p><p><img src="https://s1.baoshuo.ren/2021/02/17/u16JvHsZBgeFYER.png" alt="" loading="lazy"></p><p>色彩饱和度过高还可能会导致文本在深色背景上产生光学振动，从而引起眼睛疲劳。</p><p>最佳做法是使用「去饱和色」，这样可以提高清晰度，并减少视觉抖动。</p><p><img src="https://s1.baoshuo.ren/2021/02/17/YxOwh46ZFNIC5Rg.png" alt="" loading="lazy"></p><h3 id="层次">层次</h3><p>在浅色模式下，我们通常会使用投影来区分页面内元素的层次，但这种方法在深色模式中如果使用不当，不仅起不到区分页面内元素层次的作用，还会影响整体观感，起到反作用。</p><p>Google 给出的示例：</p><p><img src="https://s1.baoshuo.ren/2021/02/17/O7qzgYK98DGLvCV.png" alt="" loading="lazy"></p><hr><p>WWDC 2019 中苹果设计师讲到深色模式的文本：</p><p><img src="https://s1.baoshuo.ren/2021/02/17/Amac2CMl4bzurYe.png" alt="" loading="lazy"></p><p>Apple 认为在浅色模式下投影能轻松地区分两个视觉元素，但是在深色模式下作用甚微。所以他们建议在深色背景下，对前置元素的使用稍亮的灰色。</p><hr><p><img src="https://s1.baoshuo.ren/2021/02/17/OHZqYmAaQDJ9RBe.png" alt="" loading="lazy"></p><p>在组件表面<sup>(1)</sup>上放置一个白色半透明的遮罩层<sup>(2)</sup>，就可以体现出深色模式中的层次。</p><h2 id="代码实现">代码实现</h2><p>这个主题使用了向 <code>body</code> 添加 <code>.dark</code> 类来实现深色模式。</p><h3 id="利用-media-query-简单实现深色模式">利用 Media Query 简单实现深色模式</h3><p>可以直接为深色模式编写独立的样式：</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#111</span>;
&#125;

<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">prefers-color-scheme</span>: dark) &#123;
  <span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.dark</span> &#123;
    <span class="hljs-attribute">color</span>: <span class="hljs-number">#eee</span>;
  &#125;
&#125;</code></pre><p>更进一步地，还可以使用 CSS Variable 来简化代码：</p><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;
  <span class="hljs-attr">--text</span>: <span class="hljs-number">#111</span>;
&#125;

<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">prefers-color-scheme</span>: dark) &#123;
  <span class="hljs-selector-pseudo">:root</span> &#123;
    <span class="hljs-attr">--text</span>: <span class="hljs-number">#eee</span>;
  &#125;
&#125;

<span class="hljs-selector-tag">body</span> &#123;
  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--text);
&#125;</code></pre><p>还可以利用 <code>&lt;link&gt;</code> 标签的 Media Query 来有条件地加载文件，节省流量：</p><pre><code class="hljs css"><span class="hljs-comment">/* main.css */</span>
<span class="hljs-selector-tag">body</span> &#123;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#111</span>;
&#125;

<span class="hljs-comment">/* dark.css */</span>
<span class="hljs-selector-tag">body</span> &#123;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#eee</span>;
&#125;</code></pre><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;main.css&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;dark.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span> /&gt;</span></code></pre><h3 id="使用-media-query-javascript-实现跟随系统-定时切换深色模式">使用 Media Query + JavaScript 实现跟随系统/定时切换深色模式</h3><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;
  <span class="hljs-attr">--text</span>: <span class="hljs-number">#111</span>;
&#125;

<span class="hljs-selector-class">.dark</span> &#123;
  <span class="hljs-attr">--text</span>: <span class="hljs-number">#eee</span>;
&#125;

<span class="hljs-selector-tag">body</span> &#123;
  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--text);
&#125;</code></pre><p>这段 CSS 与先前的并没有什么差别，而且与其相对应的 JavaScript 也很好编写。</p><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;
  <span class="hljs-keyword">if</span> (
    (<span class="hljs-variable language_">window</span>.<span class="hljs-property">matchMedia</span> &amp;&amp;
      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="hljs-property">matches</span>) ||
    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getHours</span>() &gt;= <span class="hljs-number">19</span> ||
    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getHours</span>() &lt; <span class="hljs-number">7</span>
  ) &#123;
    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;dark&#x27;</span>);
  &#125;
&#125;);</code></pre><p>此段代码中开启深色模式的条件有两个：</p><ul><li>系统开启了深色模式</li><li>时间在晚 7 点~早 7 点之间</li></ul><p>只要满足上述任意一个条件，深色模式就会被开启。</p><h3 id="使用-media-query-toggle-button-实现跟随系统-手动切换深色模式">使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式</h3><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;
  <span class="hljs-attr">--text</span>: <span class="hljs-number">#111</span>;
&#125;

<span class="hljs-selector-class">.dark</span> &#123;
  <span class="hljs-attr">--text</span>: <span class="hljs-number">#eee</span>;
&#125;

<span class="hljs-selector-tag">body</span> &#123;
  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--text);
&#125;</code></pre><p>这段 CSS 与先前的并没有什么差别，下面就是令人头大的 JavaScript 部分了。</p><p>先定义一些常量：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> rootElement = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>;
<span class="hljs-keyword">const</span> darkModeClassName = <span class="hljs-string">&#x27;dark&#x27;</span>;
<span class="hljs-keyword">const</span> darkModeStorageKey = <span class="hljs-string">&#x27;user-color-scheme&#x27;</span>;
<span class="hljs-keyword">const</span> darkModeTogglebuttonElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(
  <span class="hljs-string">&#x27;dark-mode-toggle-button&#x27;</span>
);
<span class="hljs-keyword">const</span> validColorModeKeys = &#123; <span class="hljs-attr">dark</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">light</span>: <span class="hljs-literal">true</span> &#125;;
<span class="hljs-keyword">const</span> invertDarkModeObj = &#123; <span class="hljs-attr">dark</span>: <span class="hljs-string">&#x27;light&#x27;</span>, <span class="hljs-attr">light</span>: <span class="hljs-string">&#x27;dark&#x27;</span> &#125;;</code></pre><p>接下来使用 <code>try &#123;&#125; catch (e) &#123;&#125;</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">setLocalStorage</span> = (<span class="hljs-params">key, value</span>) =&gt; &#123;
  <span class="hljs-keyword">try</span> &#123;
    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(key, value);
  &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;
&#125;;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">removeLocalStorage</span> = (<span class="hljs-params">key</span>) =&gt; &#123;
  <span class="hljs-keyword">try</span> &#123;
    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(key);
  &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;
&#125;;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">getLocalStorage</span> = (<span class="hljs-params">key</span>) =&gt; &#123;
  <span class="hljs-keyword">try</span> &#123;
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(key);
  &#125; <span class="hljs-keyword">catch</span> (e) &#123;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 与 localStorage 中没有找到对应 key 的行为一致</span>
  &#125;
&#125;;</code></pre><p>获取当前 <code>prefers-color-scheme</code> 的方法：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getModeFromCSSMediaQuery</span> = (<span class="hljs-params"></span>) =&gt; &#123;
  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="hljs-property">matches</span>
    ? <span class="hljs-string">&#x27;dark&#x27;</span>
    : <span class="hljs-string">&#x27;light&#x27;</span>;
&#125;;</code></pre><p>再写一个清除 Class 和 LocalStorage 的函数：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">resetRootDarkModeClassAndLocalStorage</span> = (<span class="hljs-params"></span>) =&gt; &#123;
  rootElement.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(darkModeClassName);
  rootElement.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(invertDarkModeObj[darkModeClassName]);
  <span class="hljs-title function_">removeLocalStorage</span>(darkModeStorageKey);
&#125;;</code></pre><p>接下来就是起主要作用的函数了，负责为 <code>&lt;body&gt;</code> 标签增删深色模式的 Class ：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">applyCustomDarkModeSettings</span> = (<span class="hljs-params">mode</span>) =&gt; &#123;
  <span class="hljs-comment">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span>
  <span class="hljs-keyword">const</span> currentSetting = mode || <span class="hljs-title function_">getLocalStorage</span>(darkModeStorageKey);

  <span class="hljs-keyword">if</span> (currentSetting === <span class="hljs-title function_">getModeFromCSSMediaQuery</span>()) &#123;
    <span class="hljs-comment">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span>
    <span class="hljs-title function_">resetRootDarkModeClassAndLocalStorage</span>();
  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (validColorModeKeys[currentSetting]) &#123;
    rootElement.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(currentSetting);
    rootElement.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(invertDarkModeObj[currentSetting]);
  &#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-comment">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span>
    <span class="hljs-comment">// 或者 localStorage 被篡改，currentSetting 不是合法值</span>
    <span class="hljs-title function_">resetRootDarkModeClassAndLocalStorage</span>();
  &#125;
&#125;;</code></pre><p>还需要一个函数负责获取相反的显示模式，并将其存储到 LocalStorage 中</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleCustomDarkMode</span> = (<span class="hljs-params"></span>) =&gt; &#123;
  <span class="hljs-keyword">let</span> currentSetting = <span class="hljs-title function_">getLocalStorage</span>(darkModeStorageKey);

  <span class="hljs-keyword">if</span> (validColorModeKeys[currentSetting]) &#123;
    <span class="hljs-comment">// 从 localStorage 中读取模式，并取相反的模式</span>
    currentSetting = invertDarkModeObj[currentSetting];
  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentSetting === <span class="hljs-literal">null</span>) &#123;
    <span class="hljs-comment">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span>
    <span class="hljs-comment">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span>
    currentSetting = invertDarkModeObj[<span class="hljs-title function_">getModeFromCSSMediaQuery</span>()];
  &#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-comment">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span>
    <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 直接 return;</span>
  &#125;
  <span class="hljs-comment">// 将相反的模式写入 localStorage</span>
  <span class="hljs-title function_">setLocalStorage</span>(darkModeStorageKey, currentSetting);

  <span class="hljs-keyword">return</span> currentSetting;
&#125;;</code></pre><p>相关的函数都定义完了，是时候添加执行了：</p><pre><code class="hljs javascript"><span class="hljs-comment">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span>
<span class="hljs-title function_">applyCustomDarkModeSettings</span>();</code></pre><pre><code class="hljs javascript"><span class="hljs-comment">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span>
darkModeTogglebuttonElement.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;
  <span class="hljs-title function_">applyCustomDarkModeSettings</span>(<span class="hljs-title function_">toggleCustomDarkMode</span>());
&#125;);</code></pre><iframe src="https://codesandbox.io/embed/shiyong-media-query-toggle-button-shixiangensuixitongshoudongqiehuanshensemoshi-7d60d?autoresize=1&fontsize=16&theme=dark&view=preview" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" title="使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="使用-media-query-toggle-button-javascript-实现跟随系统-定时-手动切换深色模式">使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式</h3><p>CSS 和大部分 JavaScript 代码没有变化，此处仅说明有变化的代码。</p><p>在函数 <code>toggleCustomDarkMode()</code> 中添加写入一个时间戳的操作：</p><pre><code class="hljs diff"><span class="hljs-meta">@@ -85,19 +114,20 @@</span>
 const toggleCustomDarkMode = () =&gt; &#123;
     let currentSetting = getLocalStorage(darkModeStorageKey);

     if (validColorModeKeys[currentSetting]) &#123;
         // 从 localStorage 中读取模式，并取相反的模式
         currentSetting = invertDarkModeObj[currentSetting];
     &#125; else if (currentSetting <span class="hljs-comment">=== null) &#123;</span>
         // localStorage 中没有相关值，或者 localStorage 抛了 Error
         // 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式
         currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];
     &#125; else &#123;
         // 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值
         return; // 直接 return;
     &#125;
     // 将相反的模式写入 localStorage
     setLocalStorage(darkModeStorageKey, currentSetting);
<span class="hljs-addition">+    setLocalStorage(darkModeTimeKey, +new Date());</span>

     return currentSetting;
&#125;;</code></pre><p>重新编写入口，用来检测是否符合定时条件：</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">initDarkMode</span> = (<span class="hljs-params">nowTime</span>) =&gt; &#123;
  <span class="hljs-keyword">const</span> lastSunrise = (
    nowTime.<span class="hljs-title function_">getHours</span>() &lt; <span class="hljs-number">7</span>
      ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(
          nowTime.<span class="hljs-title function_">getFullYear</span>(),
          nowTime.<span class="hljs-title function_">getMonth</span>(),
          nowTime.<span class="hljs-title function_">getDate</span>() - <span class="hljs-number">1</span>,
          <span class="hljs-number">7</span>
        )
      : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(
          nowTime.<span class="hljs-title function_">getFullYear</span>(),
          nowTime.<span class="hljs-title function_">getMonth</span>(),
          nowTime.<span class="hljs-title function_">getDate</span>(),
          <span class="hljs-number">7</span>
        )
  ).<span class="hljs-title function_">getTime</span>(); <span class="hljs-comment">// 日出</span>
  <span class="hljs-keyword">const</span> lastSunset = (
    nowTime.<span class="hljs-title function_">getHours</span>() &lt; <span class="hljs-number">19</span>
      ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(
          nowTime.<span class="hljs-title function_">getFullYear</span>(),
          nowTime.<span class="hljs-title function_">getMonth</span>(),
          nowTime.<span class="hljs-title function_">getDate</span>() - <span class="hljs-number">1</span>,
          <span class="hljs-number">19</span>
        )
      : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(
          nowTime.<span class="hljs-title function_">getFullYear</span>(),
          nowTime.<span class="hljs-title function_">getMonth</span>(),
          nowTime.<span class="hljs-title function_">getDate</span>(),
          <span class="hljs-number">19</span>
        )
  ).<span class="hljs-title function_">getTime</span>(); <span class="hljs-comment">// 日落</span>
  <span class="hljs-keyword">const</span> darkModeTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(
    <span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">getLocalStorage</span>(darkModeTimeKey) || <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">10</span>)
  ).<span class="hljs-title function_">getTime</span>();
  nowTime = nowTime.<span class="hljs-title function_">getTime</span>();
  <span class="hljs-keyword">if</span> (lastSunrise &lt; lastSunset) &#123;
    <span class="hljs-comment">// 日出比日落早表示晚上</span>
    <span class="hljs-keyword">if</span> (lastSunset &lt; darkModeTime) &#123;
      <span class="hljs-comment">// 当晚自行调整过日间/夜间模式</span>
      <span class="hljs-title function_">applyCustomDarkModeSettings</span>();
    &#125; <span class="hljs-keyword">else</span> &#123;
      <span class="hljs-title function_">applyCustomDarkModeSettings</span>(darkModeClassName);
    &#125;
  &#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-comment">// 日出比日落晚表示白天</span>
    <span class="hljs-keyword">if</span> (lastSunrise &lt; darkModeTime) &#123;
      <span class="hljs-title function_">applyCustomDarkModeSettings</span>();
    &#125; <span class="hljs-keyword">else</span> &#123;
      <span class="hljs-title function_">applyCustomDarkModeSettings</span>(invertDarkModeObj[darkModeClassName]);
    &#125;
  &#125;
&#125;;

<span class="hljs-title function_">initDarkMode</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());</code></pre><iframe src="https://codesandbox.io/embed/shiyong-media-query-toggle-button-javascript-shixiangensuixitongdingshishoudongqiehuanshensemoshi-dyei7?autoresize=1&fontsize=14&theme=dark&view=preview" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" title="使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="深色模式下的页面滚动条">深色模式下的页面滚动条</h3><p>只需在页面的 <code>&lt;head&gt;</code> 中添加一个 <a href="https://html.spec.whatwg.org/multipage/semantics.html#meta-color-scheme" rel="external nofollow noreferrer"><code>&lt;meta name=&quot;color-scheme&quot;&gt;</code></a> 的标签即可让页面滚动条的样式跟随深色模式变化。</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span>
<span class="hljs-comment">  The page supports both light and dark color schemes,</span>
<span class="hljs-comment">  and the page author prefers light.</span>
<span class="hljs-comment">--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;color-scheme&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;light dark&quot;</span> /&gt;</span></code></pre><p>如果你使用类似上一节所示的切换按钮的话，别忘了添加下面的 CSS ：</p><pre><code class="hljs css"><span class="hljs-comment">/*</span>
<span class="hljs-comment">  The page supports both light and dark color schemes,</span>
<span class="hljs-comment">  and the page author prefers light.</span>
<span class="hljs-comment">*/</span>
<span class="hljs-selector-pseudo">:root</span> &#123;
  <span class="hljs-attribute">color</span>-scheme: light;
&#125;
<span class="hljs-selector-class">.dark</span> &#123;
  <span class="hljs-attribute">color</span>-scheme: dark;
&#125;</code></pre><h2 id="disqus-相关">Disqus 相关</h2><p>如果网页上有 Disqus 评论系统，请添加下方的 CSS 以避免 Disqus 的自动深色模式失效。</p><pre><code class="hljs css"><span class="hljs-selector-tag">iframe</span> &#123;
  <span class="hljs-attribute">color</span>-scheme: light;
&#125;</code></pre><p><em>来源：<a href="https://stackoverflow.com/a/65313819/14109955" rel="external nofollow noreferrer">Disqus iframe transparency won’t work on Chrome 87 - StackOverflow</a></em></p><h2 id="参考资料-3">参考资料</h2><ol><li><a href="https://material.io/design/color/dark-theme.html" rel="external nofollow noreferrer">Dark theme - Material Design</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2019/808/" rel="external nofollow noreferrer">What’s New in iOS Design - WWDC 2019</a></li><li><a href="https://blog.skk.moe/post/hello-darkmode-my-old-friend/" rel="external nofollow noreferrer">你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持 - Sukka’s Blog</a></li><li><a href="https://web.dev/color-scheme/" rel="external nofollow noreferrer">Improved dark mode default styling with the color-scheme CSS property and the corresponding meta tag - web.dev</a></li></ol><p><em>文章头图来自：<a href="https://material.io/design/color/dark-theme.html" rel="external nofollow noreferrer">https://material.io/design/color/dark-theme.html</a></em></p>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux Systemd 入门]]></title>
        <id>/post/linux-systemd/</id>
        <link href="/post/linux-systemd/"/>
        <updated>2021-02-11T16:06:31.000Z</updated>
        <summary type="html"><![CDATA[Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。]]></summary>
        <content type="html"><![CDATA[<img src="https://s1.baoshuo.ren/2021/08/17/bnP7pH3XR6IAx1U.png" width="100%" alt="Linux Systemd 入门" /><p>Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。</p><span id="more"></span><p>目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。</p><h2 id="常用命令列表">常用命令列表</h2><ul><li>列出所有已加载的单元：<code>systemctl list-units</code></li><li>查看指定的单元的配置：<code>systemctl cat [serviceName]</code> <em>(e.g. <code>systemctl cat sshd.service</code>)</em></li><li>修改指定单元的配置：<code>systemctl edit [serviceName]</code> <em>(e.g. <code>systemctl edit sshd.service</code>)</em></li><li>查看指定的单元的运行状态： <code>systemctl status [serviceName|pid]</code> <em>(e.g. <code>systemctl status sshd.service</code>)</em><ul><li>如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。</li><li>如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。</li><li>如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 <code>--all</code> 连用，则同时显示所有已加载的单元（可以用 <code>-t</code> 限定单元类型）的状态信息。</li></ul></li><li>启动指定的单元：<code>systemctl start [serviceName]</code> <em>(e.g. <code>systemctl start sshd.service</code>)</em><ul><li>被指定的单元必须是已经被加载的。</li></ul></li><li>重新启动指定的单元：<code>systemctl restart [serviceName]</code> <em>(e.g. <code>systemctl restart sshd.service</code>)</em><ul><li>如果指定的单元没有启动，则直接启动它们。</li></ul></li><li>停止指定的单元：<code>systemctl stop [serviceName]</code> <em>(e.g. <code>systemctl stop sshd.service</code>)</em></li><li>启用指定的单元：<code>systemctl enable [serviceName]</code> <em>(e.g. <code>systemctl enable sshd.service</code>)</em></li><li>停用指定的单元：<code>systemctl disable [serviceName]</code> <em>(e.g. <code>systemctl disable sshd.service</code>)</em></li><li>重新加载指定的单元的配置：<code>systemctl reload [serviceName]</code> <em>(e.g. <code>systemctl reload sshd.service</code>)</em></li><li>重新加载所有已修改过的配置文件：<code>systemctl daemon-reload</code></li></ul><h2 id="开机启动">开机启动</h2><p>对于那些支持 Systemd 的软件，安装的时候，会自动在 <code>/usr/lib/systemd/system</code> 目录添加一个配置文件。</p><p>如果你想让该软件开机启动，就执行下面的命令（以 <code>sshd.service</code> 为例）。</p><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> sshd.service</code></pre><p>上面的命令相当于在 <code>/etc/systemd/system</code> 目录添加一个符号链接，指向 <code>/usr/lib/systemd/system</code> 里面的 <code>sshd.service</code> 文件。</p><p>这是因为开机时，Systemd 只执行 <code>/etc/systemd/system</code> 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p><h2 id="unit">Unit</h2><h3 id="配置文件">配置文件</h3><p>对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。</p><blockquote><p>我曾经为 Sakura Frp 编写过一个脚本：<a href="https://getfrp.sh" rel="external nofollow noreferrer">getfrp.sh</a> <sup>（<a href="https://gist.github.com/renbaoshuo/9c351b3e5750a2f6d453d035e0fd071a#file-getfrp-sh-L200-L213" rel="external nofollow noreferrer">存档</a> 于 GitHub Gist）</sup> ，里面便是使用了自行编写配置文件的方法。</p></blockquote><p>以 <code>sshd.service</code> 这个配置文件为例子，来分析一下 Systemd 的配置文件：</p><pre><code class="hljs ini"><span class="hljs-comment"># /lib/systemd/system/ssh.service</span>

<span class="hljs-section">[Unit]</span>
<span class="hljs-attr">Description</span>=OpenBSD Secure Shell server
<span class="hljs-attr">Documentation</span>=man:sshd(<span class="hljs-number">8</span>) man:sshd_config(<span class="hljs-number">5</span>)
<span class="hljs-attr">After</span>=network.target auditd.service
<span class="hljs-attr">ConditionPathExists</span>=!/etc/ssh/sshd_not_to_be_run

<span class="hljs-section">[Service]</span>
<span class="hljs-attr">EnvironmentFile</span>=-/etc/default/ssh
<span class="hljs-attr">ExecStartPre</span>=/usr/sbin/sshd -t
<span class="hljs-attr">ExecStart</span>=/usr/sbin/sshd -D <span class="hljs-variable">$SSHD_OPTS</span>
<span class="hljs-attr">ExecReload</span>=/usr/sbin/sshd -t
<span class="hljs-attr">ExecReload</span>=/bin/kill -HUP <span class="hljs-variable">$MAINPID</span>
<span class="hljs-attr">KillMode</span>=process
<span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure
<span class="hljs-attr">RestartPreventExitStatus</span>=<span class="hljs-number">255</span>
<span class="hljs-attr">Type</span>=notify
<span class="hljs-attr">RuntimeDirectory</span>=sshd
<span class="hljs-attr">RuntimeDirectoryMode</span>=<span class="hljs-number">0755</span>

<span class="hljs-section">[Install]</span>
<span class="hljs-attr">WantedBy</span>=multi-user.target
<span class="hljs-attr">Alias</span>=sshd.service</code></pre><p>可以看出这个文件一共有三个部分：<code>[Unit]</code>, <code>[Service]</code> 和 <code>[Install]</code> 。</p><p>配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。<br>因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 <code>After=</code>），就将该设定归零了。</p><h4 id="unit-启动顺序与依赖关系">[Unit]: 启动顺序与依赖关系</h4><p>这个部分主要有以下几个配置项：</p><ul><li><code>Description</code>: 当前服务的简易说明</li><li><code>Documentation</code>: 文档位置（以空格分隔）<ul><li>该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。</li></ul></li><li><code>Before</code>: 在哪些服务之前启动<ul><li>本字段不涉及依赖关系，只是说明了启动顺序</li></ul></li><li><code>After</code>: 在哪些服务之后启动<ul><li>本字段不涉及依赖关系，只是说明了启动顺序</li><li>以 <code>sshd.service</code> 中的配置为例，该服务需要在 <code>network.target</code> 和 <code>auditd.service</code> 之后启动</li></ul></li><li><code>Wants</code>: 弱依赖的服务<ul><li>若被依赖的服务被停止，这个服务不需要停止</li></ul></li><li><code>Requires</code>: 强依赖的服务<ul><li>若被依赖的服务没有启动，则不能启动这个服务</li><li>若被依赖的服务被停止，则这个服务也必须停止</li></ul></li><li><code>Conflicts</code>: 冲突的服务<ul><li>如果列出的服务中有一个已经运行，那么就不能启动这个服务</li></ul></li></ul><h4 id="service-启动行为">[Service]: 启动行为</h4><p>这个部分主要有以下几个配置项：</p><ul><li><code>Type</code>: 启动类型。默认值为 <code>simple</code> ，可选值如下：<ul><li><code>simple</code>: 使 <code>ExecStart</code> 项启动的项成为主进程</li><li><code>forking</code>: <code>ExecStart</code> 项将会以 <code>fork()</code> 的形式启动，此时父进程将会退出，子进程将成为主进程</li><li><code>oneshot</code>: 类似于 <code>simple</code> ，但只执行一次，Systemd 会等它执行完，才启动其他服务</li><li><code>dbus</code>: 类似于 <code>simple</code> ，但会等待 <code>D-Bus</code> 信号后启动</li><li><code>notify</code>: 类似于 <code>simple</code> ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务</li><li><code>idle</code>: 类似于 <code>simple</code> ，但是要等到其他任务都执行完，才会启动该服务。<ul><li>这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合</li><li>这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序</li></ul></li></ul></li><li><code>Environment</code>: 指定环境变量</li><li><code>EnvironmentFile</code>: 环境变量配置文件，该文件内部的 <code>key=value</code> 形式的配置可以在当前文件中以 <code>$key</code> 获取</li><li><code>ExecStart</code>: 服务启动时执行的命令</li><li><code>ExecReload</code>: 服务重启时执行的命令</li><li><code>ExecStop</code>: 服务停止时执行的命令</li><li><code>ExecStartPre</code>: 服务启动之前执行的命令</li><li><code>ExecStartPost</code>: 服务启动之后执行的命令</li><li><code>ExecStopPost</code>: 服务停止之后执行的命令</li><li><code>Restart</code>: 服务退出后的重启方式，默认值为 <code>no</code><ul><li><code>no</code>: 进程退出后不会重启</li><li><code>on-success</code>: 当进程正常退出时（退出状态码为 0）重启</li><li><code>on-failure</code>: 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启</li><li><code>on-abnormal</code>: 当进程被信号终止或程序超时时重启</li><li><code>on-abort</code>: 当收到没有捕捉到的信号终止时重启</li><li><code>on-watchdog</code>: 当进程超时退出时重启</li><li><code>always</code>: 总是重启（不论原因）</li><li>对于守护进程，推荐设为 <code>on-failure</code>。对于那些允许发生错误退出的服务，可以设为 <code>on-abnormal</code>。</li></ul></li><li><code>RemainAfterExit</code>: 退出后是否重新启动<ul><li>当设定为 <code>RemainAfterExit=1</code> 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 <code>Type=oneshot</code> 的服务很有帮助</li></ul></li><li><code>TimeoutSec</code>: 当这个服务在启动或停止时失败进入&quot;强制结束&quot;状态的等待秒数。</li><li><code>KillMode</code>: 定义 Systemd 如何停止这个服务，默认值为 <code>control-group</code><ul><li><code>control-group</code>: 服务停止时关闭此控制组中所有的进程</li><li><code>process</code>: 服务停止时只终止主进程（ExecStart 接的后面那串指令）</li><li><code>mixed</code>: 主进程将收到 <strong>SIGTERM</strong> 信号，子进程收到 <strong>SIGKILL</strong> 信号</li><li><code>none</code>: 没有进程会被杀掉，只是执行服务的 stop 命令</li></ul></li><li><code>RestartSec</code>: 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）</li></ul><p>所有的启动设置之前，都可以加上一个连词号 (<code>-</code>) ，表示 「抑制错误」 ，即发生错误的时候，不影响其他命令的执行。以 <code>sshd.service</code> 为例，文件中的 <code>EnvironmentFile=-/etc/sysconfig/sshd</code>（注意等号后面的那个连词号），表示 <code>/etc/sysconfig/sshd</code> 文件不存在，也不会抛出错误。</p><h4 id="install-安装行为">[Install]: 安装行为</h4><p>这个部分主要有以下几个配置项：</p><ul><li><code>WantedBy</code>: 表示该服务所在的 Target<ul><li>一般来说，服务性质的单元都是挂在 <code>multi-user.target</code> 下的</li></ul></li><li><code>Also</code>: 当该服务被启用时需要同时启用的单元</li><li><code>Alias</code>: 指定创建软链接时链接至本单元配置文件的别名文件</li></ul><h3 id="模板实例">模板实例</h3><p>此处以 <code>getty@.service</code> 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的：</p><pre><code class="hljs ini"><span class="hljs-comment"># /lib/systemd/system/getty@.service</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment">#  SPDX-License-Identifier: LGPL-2.1+</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment">#  This file is part of systemd.</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment">#  systemd is free software; you can redistribute it and/or modify it</span>
<span class="hljs-comment">#  under the terms of the GNU Lesser General Public License as published by</span>
<span class="hljs-comment">#  the Free Software Foundation; either version 2.1 of the License, or</span>
<span class="hljs-comment">#  (at your option) any later version.</span>

<span class="hljs-section">[Unit]</span>
<span class="hljs-attr">Description</span>=Getty <span class="hljs-literal">on</span> %I
<span class="hljs-attr">Documentation</span>=man:agetty(<span class="hljs-number">8</span>) man:systemd-getty-generator(<span class="hljs-number">8</span>)
<span class="hljs-attr">Documentation</span>=http://<span class="hljs-number">0</span>pointer.de/blog/projects/serial-console.html
<span class="hljs-attr">After</span>=systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target
<span class="hljs-attr">After</span>=rc-local.service

<span class="hljs-comment"># If additional gettys are spawned during boot then we should make</span>
<span class="hljs-comment"># sure that this is synchronized before getty.target, even though</span>
<span class="hljs-comment"># getty.target didn&#x27;t actually pull it in.</span>
<span class="hljs-attr">Before</span>=getty.target
<span class="hljs-attr">IgnoreOnIsolate</span>=<span class="hljs-literal">yes</span>

<span class="hljs-comment"># IgnoreOnIsolate causes issues with sulogin, if someone isolates</span>
<span class="hljs-comment"># rescue.target or starts rescue.service from multi-user.target or</span>
<span class="hljs-comment"># graphical.target.</span>
<span class="hljs-attr">Conflicts</span>=rescue.service
<span class="hljs-attr">Before</span>=rescue.service

<span class="hljs-comment"># On systems without virtual consoles, don&#x27;t start any getty. Note</span>
<span class="hljs-comment"># that serial gettys are covered by serial-getty@.service, not this</span>
<span class="hljs-comment"># unit.</span>
<span class="hljs-attr">ConditionPathExists</span>=/dev/tty0

<span class="hljs-section">[Service]</span>
<span class="hljs-comment"># the VT is cleared by TTYVTDisallocate</span>
<span class="hljs-comment"># The &#x27;-o&#x27; option value tells agetty to replace &#x27;login&#x27; arguments with an</span>
<span class="hljs-comment"># option to preserve environment (-p), followed by &#x27;--&#x27; for safety, and then</span>
<span class="hljs-comment"># the entered username.</span>
<span class="hljs-attr">ExecStart</span>=-/sbin/agetty -o <span class="hljs-string">&#x27;-p -- \\u&#x27;</span> --noclear %I <span class="hljs-variable">$TERM</span>
<span class="hljs-attr">Type</span>=idle
<span class="hljs-attr">Restart</span>=always
<span class="hljs-attr">RestartSec</span>=<span class="hljs-number">0</span>
<span class="hljs-attr">UtmpIdentifier</span>=%I
<span class="hljs-attr">TTYPath</span>=/dev/%I
<span class="hljs-attr">TTYReset</span>=<span class="hljs-literal">yes</span>
<span class="hljs-attr">TTYVHangup</span>=<span class="hljs-literal">yes</span>
<span class="hljs-attr">TTYVTDisallocate</span>=<span class="hljs-literal">yes</span>
<span class="hljs-attr">KillMode</span>=process
<span class="hljs-attr">IgnoreSIGPIPE</span>=<span class="hljs-literal">no</span>
<span class="hljs-attr">SendSIGHUP</span>=<span class="hljs-literal">yes</span>

<span class="hljs-comment"># Unset locale for the console getty since the console has problems</span>
<span class="hljs-comment"># displaying some internationalized messages.</span>
<span class="hljs-attr">UnsetEnvironment</span>=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION

<span class="hljs-section">[Install]</span>
<span class="hljs-attr">WantedBy</span>=getty.target
<span class="hljs-attr">DefaultInstance</span>=tty1</code></pre><p>运行 <code>systemctl status getty@tty1.service</code> 命令，可以看到如下图所示的输出：</p><p><img src="https://s1.baoshuo.ren/2021/02/11/lhw1BzOUb7TRDrq.png" alt="" loading="lazy"></p><p>不难发现图中标橙色的字符与上方配置文件中的 <code>%I</code> 相对应，并且配置文件的名称也不是 <code>getty@tty1.service</code> ，而是 <code>getty@.service</code> ，这种配置文件叫做 「模板实例」 。</p><p>启动时只需要在 <code>@</code> 后面添加需要填入 <code>%I</code> 位置的参数即可，如 <code>getty@tty9.service</code> 。</p><h2 id="target">Target</h2><p>一般来说，常用的 Target 有两个：一个是 <code>multi-user.target</code> ，表示多用户命令行状态；另一个是 <code>graphical.target</code> ，表示图形用户状态（它依赖于 <code>multi-user.target</code>），这一点和 SysVinit 的运行级别很是相似。</p><p>官方提供了一张非常清晰的 Target 依赖关系图：</p><p><img src="https://s1.baoshuo.ren/2021/02/11/ubmqlLdiGeCtUg7.png" alt="" loading="lazy"></p><p>图源：<a href="https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup" rel="external nofollow noreferrer">https://www.freedesktop.org/software/systemd/man/bootup.html#System Manager Bootup</a></p><h3 id="配置文件-2">配置文件</h3><p>以 <code>multi-user.target</code> 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目：</p><pre><code class="hljs ini"><span class="hljs-comment"># /lib/systemd/system/multi-user.target</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment">#  SPDX-License-Identifier: LGPL-2.1+</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment">#  This file is part of systemd.</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment">#  systemd is free software; you can redistribute it and/or modify it</span>
<span class="hljs-comment">#  under the terms of the GNU Lesser General Public License as published by</span>
<span class="hljs-comment">#  the Free Software Foundation; either version 2.1 of the License, or</span>
<span class="hljs-comment">#  (at your option) any later version.</span>

<span class="hljs-section">[Unit]</span>
<span class="hljs-attr">Description</span>=Multi-User System
<span class="hljs-attr">Documentation</span>=man:systemd.special(<span class="hljs-number">7</span>)
<span class="hljs-attr">Requires</span>=basic.target
<span class="hljs-attr">Conflicts</span>=rescue.service rescue.target
<span class="hljs-attr">After</span>=basic.target rescue.service rescue.target
<span class="hljs-attr">AllowIsolate</span>=<span class="hljs-literal">yes</span></code></pre><ul><li><code>Requires</code>: 要求于某个 Target 一起运行</li><li><code>Conflicts</code>: 冲突的 Target</li><li><code>After</code>: 在哪些 Target 之后启动</li><li><code>AllowIsolate</code>: 是否允许使用 <code>systemctl isolate</code> 命令切换到这个 Target</li></ul><h2 id="参考资料-6">参考资料</h2><ol><li><a href="https://en.wikipedia.org/wiki/Systemd" rel="external nofollow noreferrer">Systemd - Wikipedia</a> <sup>（<a href="https://web.archive.org/web/20210210150200/https://en.wikipedia.org/wiki/Systemd" rel="external nofollow noreferrer">存档</a> 于 <a href="https://archive.org" rel="external nofollow noreferrer">互联网档案馆</a>）</sup></li><li><a href="https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html" rel="external nofollow noreferrer">Systemd - Ubuntu Manpages</a> <sup>（<a href="https://web.archive.org/web/20210210150518/https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html" rel="external nofollow noreferrer">存档</a> 于 <a href="https://archive.org" rel="external nofollow noreferrer">互联网档案馆</a>）</sup></li><li><a href="http://linux.vbird.org/linux_basic/0560daemons.php" rel="external nofollow noreferrer">第十七章 认识系统服务(daemons) - 鸟哥的 Linux 私房菜</a> <sup>（<a href="https://web.archive.org/web/20200810204650/http://linux.vbird.org/linux_basic/0560daemons.php" rel="external nofollow noreferrer">存档</a> 于 <a href="https://archive.org" rel="external nofollow noreferrer">互联网档案馆</a>）</sup></li></ol>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[你好，2021 —— 博客迁移记录]]></title>
        <id>/post/hello-2021/</id>
        <link href="/post/hello-2021/"/>
        <updated>2020-12-31T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[再见，2020。]]></summary>
        <content type="html"><![CDATA[<p>再见，2020。</p><span id="more"></span><p>最近总是觉得博客太慢了，于是乎，我把博客迁移到自己的服务器上面了。</p><h2 id="服务器端操作">服务器端操作</h2><h3 id="安装-nginx">安装 nginx</h3><p>apt 一把梭，省时又省力。</p><pre><code class="hljs shell">apt install nginx -y</code></pre><h3 id="配置-nginx">配置 nginx</h3><p>简简单单配置了一下，没有什么过于复杂的东西。</p><p>在申请 SSL 证书之前，不要写 HTTPS 的配置。</p><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;
    <span class="hljs-attribute">listen</span>      <span class="hljs-number">80</span>;
    <span class="hljs-attribute">listen</span>      [::]:<span class="hljs-number">80</span>;
    <span class="hljs-attribute">server_name</span> blog.baoshuo.ren;

    <span class="hljs-comment"># ACME-challenge</span>
    <span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /.well-known/acme-challenge/ &#123;
        <span class="hljs-attribute">allow</span> all;
        <span class="hljs-attribute">root</span> /var/www/_letsencrypt;
    &#125;

    <span class="hljs-section">location</span> / &#123;
        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://blog.baoshuo.ren<span class="hljs-variable">$request_uri</span>;
    &#125;
&#125;</code></pre><h3 id="申请-ssl-证书">申请 SSL 证书</h3><p>由于笔者懒得每年换证书，所以就用了 <a href="https://letsencrypt.org/" rel="external nofollow noreferrer">Let’s Encrypt</a> + <a href="https://acme.sh" rel="external nofollow noreferrer">acme.sh</a> 的组合套装来配置 SSL 。 当然，ECC 证书也是少不了的。</p><pre><code class="hljs bash">acme.sh --issue -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \
    -w /var/www/_letsencrypt/ \
    --renew-hook <span class="hljs-string">&quot;acme.sh --install-cert -d baoshuo.ren \</span>
<span class="hljs-string">    --key-file /***/baoshuo.ren.key \</span>
<span class="hljs-string">    --fullchain-file /***/baoshuo.ren.cer \</span>
<span class="hljs-string">    --reloadcmd \&quot;service nginx force-reload\&quot;&quot;</span>
acme.sh --issue --keylength ec-256 \
    -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \
    -w /var/www/_letsencrypt/ \
    --renew-hook <span class="hljs-string">&quot;acme.sh --install-cert -d baoshuo.ren --ecc \</span>
<span class="hljs-string">    --key-file /***/baoshuo.ren.ecc.key \</span>
<span class="hljs-string">    --fullchain-file /***/baoshuo.ren.ecc.cer \</span>
<span class="hljs-string">    --reloadcmd \&quot;service nginx force-reload\&quot;&quot;</span></code></pre><p>申请完成后，将 RSA 和 ECC 证书添加到 nginx 配置中，在配置文件中写入以下内容：</p><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;
    <span class="hljs-attribute">listen</span>                               <span class="hljs-number">443</span> ssl http2;
    <span class="hljs-attribute">listen</span>                               [::]:<span class="hljs-number">443</span> ssl http2;
    <span class="hljs-attribute">server_name</span>                          blog.baoshuo.ren;
    <span class="hljs-attribute">root</span>                                 /var/www/blog/;

    <span class="hljs-comment"># SSL</span>
    <span class="hljs-attribute">ssl_certificate</span>                      /***/baoshuo.ren.cer;
    <span class="hljs-attribute">ssl_certificate_key</span>                  /***/baoshuo.ren.key;
    <span class="hljs-attribute">ssl_certificate</span>                      /***/baoshuo.ren.ecc.cer;
    <span class="hljs-attribute">ssl_certificate_key</span>                  /***/baoshuo.ren.ecc.key;
    <span class="hljs-attribute">ssl_protocols</span>                        TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;
    <span class="hljs-attribute">ssl_ciphers</span>                          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">off</span>;

    <span class="hljs-comment"># HSTS</span>
    <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&#x27;max-age=31536000&#x27;</span>;

    <span class="hljs-comment"># logging</span>
    <span class="hljs-attribute">error_log</span>                            /var/log/nginx/blog.baoshuo.ren.<span class="hljs-literal">error</span>.log <span class="hljs-literal">warn</span>;

    <span class="hljs-comment"># 404 page</span>
    <span class="hljs-attribute">error_page</span>                           <span class="hljs-number">404</span> /<span class="hljs-number">404</span>.html;
&#125;</code></pre><p>上方使用的 SSL 配置是 Mozilla 推荐的现代化配置 ，如果需要更好的兼容性，可以使用 Mozilla 提供的中等安全性配置 ：</p><pre><code class="hljs apache"><span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;
<span class="hljs-attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;
<span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;</code></pre><h2 id="将博客文件同步到服务器上">将博客文件同步到服务器上</h2><p>在 <code>.github/workflows</code> 目录下创建一个 <code>server.yml</code> 文件，写入以下内容：</p><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">blog</span> <span class="hljs-string">to</span> <span class="hljs-string">Server</span>

<span class="hljs-attr">on:</span>
  <span class="hljs-attr">push:</span>
    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">master</span> ]
  <span class="hljs-attr">workflow_dispatch:</span>

<span class="hljs-attr">jobs:</span>
  <span class="hljs-attr">deploy:</span>
    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>
    <span class="hljs-attr">steps:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>
        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>
      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span>
        <span class="hljs-attr">uses:</span> <span class="hljs-string">easingthemes/ssh-deploy@v2.1.5</span>
        <span class="hljs-attr">env:</span>
          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span>
          <span class="hljs-attr">ARGS:</span> <span class="hljs-string">&quot;-avz --delete  --exclude &#x27;.git/*&#x27; --exclude &#x27;.github/*&#x27; --exclude &#x27;.gitlab-ci.yml&#x27; --exclude &#x27;.nojekyll&#x27;&quot;</span>
          <span class="hljs-attr">REMOTE_HOST:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.REMOTE_HOST</span> <span class="hljs-string">&#125;&#125;</span>
          <span class="hljs-attr">REMOTE_USER:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.REMOTE_USER</span> <span class="hljs-string">&#125;&#125;</span>
          <span class="hljs-attr">TARGET:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.TARGET</span> <span class="hljs-string">&#125;&#125;</span></code></pre><p>之后在 <code>https://github.com/&#123;username&#125;/&#123;repo&#125;/settings/secrets/actions</code> 中添加四个 Secrets 。</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>REMOTE_HOST</td><td>服务器 IP 地址</td></tr><tr><td>REMOTE_USER</td><td>服务器用户名</td></tr><tr><td>SSH_PRIVATE_KEY</td><td>连接到服务器的 SSH 私钥</td></tr><tr><td>TARGET</td><td>存放文件的路径</td></tr></tbody></table><p>将博客文件 push 到仓库中，就能在服务器上查看到文件了。</p><h2 id="参考资料-5">参考资料</h2><ol><li><a href="https://ssl-config.mozilla.org/#server=nginx&amp;version=1.18.0&amp;config=modern&amp;openssl=1.1.1f&amp;ocsp=false&amp;guideline=5.6" rel="external nofollow noreferrer">nginx 1.18.0, modern config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator</a></li><li><a href="https://ssl-config.mozilla.org/#server=nginx&amp;version=1.18.0&amp;config=intermediate&amp;openssl=1.1.1f&amp;ocsp=false&amp;guideline=5.6" rel="external nofollow noreferrer">nginx 1.18.0, intermediate config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator</a></li></ol>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NOIP 2020 游记]]></title>
        <id>/post/noip-2020/</id>
        <link href="/post/noip-2020/"/>
        <updated>2020-12-05T09:30:03.000Z</updated>
        <summary type="html"><![CDATA[我属实没想到初中生也能参加 NOIP ，只不过不给评奖罢了。]]></summary>
        <content type="html"><![CDATA[<p>我属实没想到初中生也能参加 NOIP ，只不过不给评奖罢了。</p><span id="more"></span><p>推荐阅读：<a href="https://oi.baoshuo.ren/solution-noip-2020/" rel="external nofollow noreferrer">NOIP 2020 题解 @ oi.baoshuo.ren</a></p><h2 id="day-1">Day -1</h2><p>强迫自己学了一天竞赛，并且和周围的人讨论了讨论 NOIP 会考点啥。</p><p>晚上看见机房里的学长们全员 typeracer ，属实被震撼到了。</p><h2 id="day-0">Day 0</h2><p>上午有 rp++ 模拟赛，结果一下子掉了 100 多分 <s>，出题人我真谢谢你</s> 。</p><p><img src="https://s1.baoshuo.ren/2021/10/05/qLdM3Fu6yO1Wirm.png" alt="" loading="lazy"></p><p>在线膜拜两位 AK 神仙。</p><p><img src="https://s1.baoshuo.ren/2021/10/05/6kJTM9VxEq2Ryzn.png" alt="" loading="lazy"></p><p>这是为数不多的几次我比 youwike 考得好的模拟赛。</p><p>然后就该收拾东西准备走了。</p><p>下午坐火车去秦皇岛，在车上教练把手机收走了 <s>，过了一会发现没缓存离线题面又把手机要了回来</s> 。</p><p>到了宾馆发现环境还不错，虽然 AzusaCat 和 AlanSP 的屋子正对着工地，但是比别人的都要大。</p><img src="https://s1.baoshuo.ren/2020/12/05/fRagTOlMvx3Gn6B.jpg" width="300" alt="选手胸牌"><p>▲ 选手胸牌</p><p>开会的时候教练们讲了讲注意事项，顺便替我们把选手胸牌领了回来。</p><p>晚上吃完饭，写了两个板子，颓废到 12 点才睡，羡慕 AlanSP 的健康作息。</p><img src="https://s1.baoshuo.ren/2020/12/13/5ePKrZ7Oy8Lj6fc.jpg" width="250" alt="youwike 在考前立的 flag"><p>▲ youwike 在考前立的 flag</p><p>可惜 youwike 最后还是没上二百。</p><h2 id="day-1-2">Day 1</h2><p><img src="https://s1.baoshuo.ren/2020/12/05/NQ4JYSWf5cXt3U6.jpg" alt="" loading="lazy"></p><p>比赛前照了一张合影。</p><p>打开题目发现 T1 可做，写了写调了调，过了样例。拿大样例测了下发现没开 long long ，开了就过了。</p><p>然后就去看其他题，并没有什么思路，于是水了水能水的暴力，骗了骗能骗的分。</p><p>出了考场以后就赶忙收拾东西去火车站。</p><p>在火车上出来了 OI 题库的民间数据，我测了下发现 T1 过了，当时非常兴奋，出分了以后才知道自己被卡了的事实。</p><p>然后就该退役去学文化课了嘛。</p><p>（完）</p>]]></content>
        <author>
            <name>宝硕</name>
            <uri>https://baoshuo.ren</uri>
        </author>
    </entry>
</feed>