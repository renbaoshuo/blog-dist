[{"title":"关于","url":"/about/","content":"关于我一个很正经的人。很惭愧，就做了一点微小的贡献。在上学。干什么事情学习文化课，准备高考。学习 信息学奥林匹克竞赛 相关知识。学习 计算机网络 相关知识。运营 AS141776，一个中立性的教育与科研网络。运营 AS4242420247 ，一个中立性的实验网络。代运营 AS142566。竞赛不是火，却能点亮一生。—— 石家庄二中实验学校 · 信息技术中心说什么语言中文 (zh-CN) ★★★★★（母语）英文 (en-US) ★★★☆☆会什么东西C++ ★★★★☆HTML ★★★★☆ (HTML is a programming language!)C ★★★★☆JavaScript ★★★★☆CSS ★★★★☆PHP ★★★☆☆Python ★★★☆☆ShellScript ★★★☆☆联系方式Telegram：@baoshuo （频道：@renbaoshuo）Twitter：@renbaoshuo电子邮件：i@baoshuo.ren关于博客评论根据相关法律法规，本博客的评论系统不对中国大陆地区的访客服务。评论使用与 烧饼博客 合作建立的 Artalk 实例。如果您使用代理连接至国际互联网，请将 shou.si 和 comments.baoshuo.dev 加入代理列表。大事记2019/01/30 开通博客，托管于 洛谷博客 上。2019/08/20 注册 baoshuo.ren 域名。2020/01/27 切换到 Typecho 平台，使用 handsome 主题。2020/06/23 切换到 Gridea 平台，使用 Pure 主题，旧博文大部分丢失。2020/07/22 更换到新域名 baoshuo.blog。2020/11/25 将所有图片迁移到 SM.MS 图床上。2020/12/06 换回旧域名 blog.baoshuo.ren ，迁回到国内服务器。2021/02/01 切换到 Hexo 平台，使用 Pure 主题。2021/02/23 重构主题。2021/08/26 再次重构主题，修复了许多问题。2021/09/22 将 OI 相关内容移至 oi.baoshuo.ren 。2021/10/06 使用 GitHub Actions 自动构建博客（相关文章：浅谈静态博客的自动部署方案）。2021/12/09 图片迁移至 SM.MS 国内 CDN 上。2022/01/29 切换到基于 Next.js 自行编写的静态博客系统，使用自行编写的主题。2023/02/19 迁移博客系统到使用 Artalk 搭建的 Shou.Si。免责声明本博客所载的材料和信息，包括但不限于文本、图片、网页或链接，虽然我们力图在博客上提供准确的材料和信息，但我们并不保证这些材料和内容的准确、完整、充分和可靠性，并且明确声明不对这些材料和内容的错误或遗漏承担责任，也不对这些材料和内容作出任何明示或默示的、包括但不限于有关所有权担保、没有侵犯第三方权利、质量和没有计算机病毒的保证。我们可以在没有任何通知或提示的情况下随时对本博客上的内容进行修改，请定期访问本博客以获取最新信息。如无明确说明，在本博客上所提及的一切第三方服务均是为了提供相关信息，并不构成对这些产品、服务的认可或推荐。根据相关法律法规，本博客的评论系统不对中国大陆地区的访客开放。隐私政策请参见本博客的 隐私政策 页面。鸣谢 & 版权相关本博客使用 Next.js 和 Hexo 构建。博客主题在设计过程中得到了 Sukka、Menci 等大佬们的指导，在此表示感谢。本博客上的图片使用 SM.MS 图床存储，感谢 Showfom 大佬赞助的 SM.MS 图床定制版服务。本博客的 SSL 证书由 Google Trust Services LLC 提供。博客上所有文章除特别声明外，均采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可。转载请在文中明显位置注明出处。"},{"title":"隐私政策","url":"/privacy-policy/","content":"本政策最后更新于 2023 年 6 月 29 日。总则宝硕博客（下称“我们”）非常重视并承诺保护网站访客的隐私。为了更好地保护您的隐私，我们提供了本隐私政策，本政策详细阐述了我们对个人信息的处理方式。信息的收集、传输、处理、存储与使用收集以下类型的个人信息可能被收集：您通过电子邮件等方式与我们交流时所包含的信息，包括通信内容和元数据；您在本网站中发送评论时的 IP 地址和用户代理信息；或您发送给我们的任何其他个人信息。以下类型的非个人信息可能被收集：有关您的计算机的信息，包括但不限于您的大致地理位置（精确到国家）、浏览器类型和版本以及操作系统类型和版本；有关您访问和使用本网站的信息，包括但不限于引荐来源、访问日期和时间、页面浏览量以及网站导航路径；有关应用程序和网站的启动、加载速度信息以及关键的运行计时；或其他非个人信息。通过我们的网站提交的个人信息及非个人信息将用于本政策或网站相关页面所说明的用途。我们不会主动通过我们提供的服务来收集任何个人身份信息。除此之外，我们的服务器和 CDN 服务也会自动收集某些信息，如您的 IP 地址和 HTTP 请求头。这些信息一般会安全地存储在日志文件中，并在收集后的 14 ~ 30 天之内删除。传输我们提供的在线服务会使用加密技术，如传输层安全协议（TLS，Transport Layer Security），在传输过程中保护我们收集到的信息不被中间人获取。但您仍需了解并认同互联网上的信息传输本质上是不安全的，我们不能保证互联网上发送的数据的安全性，但我们仍然承诺将最大限度地致力于保护您在我们的网站存放的个人信息。处理我们收集的分析信息将被归类和汇总，以便用于在下述条款中所描述的用途。任何非分析信息和任何其它非审核和研究用途所需的信息将在汇总阶段被删除或去标识化。存储前述条款中收集到的信息将被存储在具有有限的，需要授权的访问权限的计算机系统中，这些系统受到数学算法加密和（或）物理安全措施的保护，在我们使用第三方提供的存储服务时也是如此。这些措施在现代计算机系统中不可能在短时间内被破解。使用我们可能将您的个人信息及非个人信息用于以下用途：管理我们的网站和业务；为您呈现个性化的网站；为您提供我们的网站服务；向您发送您指定的电子邮件通知；向第三方提供有关我们用户的统计信息（但第三方无法从信息中识别任何个人用户）；处理您在我们网站上的查询或投诉；确保我们的网站安全和防止欺诈；检查使用我们的网站是否符合条款和条件（包括监控通过我们的网站私人信息传送服务发送的私人消息）；以及其他用途。未经您的明确同意，我们不会将您的个人信息提供给任何第三方以供其或任何其他第三方用于营销。我们如何使用 Cookie 和同类技术我们提供的服务可能会使用 Cookies 和其他技术，如像素标签、浏览器信标等。这些技术帮助我们更好地了解用户的行为（如用户浏览了我们网站的哪些部分），以及区分自然人和自动化程序。我们也可能使用 Cookies 储存 Session 信息，这些信息中可能会包含您的登录状态。我们将通过 Cookie 和其他技术收集的信息视为非个人信息，因为他人无法使用这些信息还原出您的任何个人相关数据。我们不会使用 Cookie 技术向任何第三方披露、或辅助第三方收集任何您的个人信息。第三方网站和服务我们提供的服务可能会包含第三方的产品和服务，或包含通往它们的链接。我们无法控制第三方的隐私政策和规则，并且不对此承担任何责任。我们也可能通过第三方获取由他们收集的您的信息。我们对这些信息的获取和使用将不受本隐私政策限制。然而，第三方能够向我们披露的信息依然会受到他们的隐私政策的限制。我们使用 Cloudflare 在中国大陆以外的区域优化我们的网络传输、保护我们免受在线攻击。关于 Cloudflare 如何收集和处理数据的信息，请参见 Cloudflare 的隐私政策。我们使用 Alibaba Cloud CDN 和腾讯云 CDN 来在中国大陆地区优化我们的网络传输。我们使用阿里云和腾讯云的云计算服务为中国大陆地区的访客提供服务。我们使用 xTom Analytics 来收集和分析我们的网站的使用情况，监测我们服务的使用情况。关于 xTom Analytics 如何收集和处理数据的信息，请参见 Plausible Analytics 系列产品的隐私政策 和 数据处理政策。国际数据迁移我们收集的信息可能会在我们运营的任何国家或地区之间进行存储、处理和迁移，以便我们能够根据本政策使用这些信息。我们收集的信息可能会被迁移到以下国家或地区：中国大陆、中国香港、美国、欧洲联盟和日本。个人信息的披露我们不会主动公开披露您的用户信息，除非本政策另有规定，或者出现下列情形之一：与国家安全、国防安全有关的；与公共安全、公共卫生、重大公共利益有关的；与犯罪侦查、起诉、审判和判决执行等有关的；出于维护您或其他个人的生命、财产等重大合法权益但又很难得到本人同意的；您自行向社会公众公开的个人信息；从合法公开披露的信息中收集个人信息的，如合法的新闻报道、政府信息公开等渠道。名词释义本节给出了本政策中使用到的专有名词在通常意义中的定义。部分定义由 GB/T 35273-2017：信息安全技术 个人信息安全规范 标准给出。个人信息个人信息是指以电子或者其他方式记录的能够单独或者与其他信息结合识别特定自然人身份或者反映特定自然人活动情况的各种信息、内容或资料。个人信息不包括匿名化处理后的信息。个人身份信息个人身份信息是个人信息的一种。如果仅通过某一项信息（不加以任何辅助）就可以直接辨识、联系或准确找到相应的单一特定自然人，那么这项信息就是个人身份信息，反之则不是个人身份信息。个人身份信息包括但不限于真实姓名、出生日期、身份证号码或社会保障号码、生物识别信息（如照片、指纹、虹膜等）、居住地址、电话号码、车牌号码。网络身份标识信息网络身份标识信息是个人信息的一种，包括但不限于系统账号、IP 地址、邮箱地址、用户个人数字证书。个人敏感信息个人敏感信息是指一旦泄露、非法提供或滥用可能危害人身和财产安全，极易导致个人名誉、身心健康受到损害或歧视性待遇等的个人信息。个人敏感信息包括但不限于身份证号码、个人生物识别信息、银行账号、通信内容、健康生理信息、14 岁及以下儿童的个人信息。非个人信息非个人信息，指以任何形式记录的，但是其本身无法与任何特定自然人建立直接联系的数据。通常情况下，这些数据会被归类和汇总，因此，几乎不可能通过这些数据来还原出有关特定个人的任何相关信息。唯一标识符唯一标识符（又称唯一设备标识符）是一串字符，可用于唯一标识浏览器、应用或设备。不同的标识符在有效期、是否可由用户重置以及获取方式方面会有所不同。收集收集，指获得对个人信息的控制权的行为，包括由个人信息主体主动提供、通过与个人信息主体交互或记录个人信息主体行为等自动采集，以及通过共享、转让、搜集公开信息间接获取等方式。共享个人信息控制者向其他控制者提供个人信息，且双方分别对个人信息拥有独立控制权的过程。匿名化通过对个人信息的技术处理，使得个人信息主体无法被识别，且处理后的信息不能被复原的过程。注：个人信息经匿名化处理后所得的信息不属于个人信息。去标识化通过对个人信息的技术处理，使其在不借助额外信息的情况下，无法识别个人信息主体的过程。注：去标识化建立在个体基础之上，保留了个体颗粒度，采用假名、加密、哈希函数等技术手段替代对个人信息的标识。修订我们保留在任何时间修改，修订或更新本政策的权利。「最后更新」日期的变化表示该政策已被更新或编辑，更新或编辑的版本在发布后立即取代先前任何版本。浏览器、运营商、CDN、和其他组织或个人可能出于节省带宽或其他因素缓存我们的页面，在这种情况下导致您看到的页面内容和实际不符，应当以我们提供的为准。版权声明本政策在编写时参考了 GB/T 35273-2017：信息安全技术 个人信息安全规范，并受到了来自前 IDC.MOE 的编者们的帮助，在此表示感谢。本政策谢绝以任何形式的复制、抄袭、转载、爬取。"},{"title":"向着璀璨的未来进发 —— 我的 2024 年度总结","date":"2025-08-05","url":"/post/goodbye-2024/","tags":["年度总结"],"categories":["乐生活"],"content":"即使是沉重的过去，也要接受它再继续向前迈进。2024 年就这样过去了。上半年发生的一系列事情对我仿佛一场梦一样，而下半年我才回到真实的生活中。前一阵子有读者来询问我的近况，同时进行了一个博客更新的催。其实我有写几篇草稿，不过中途废弃了一些，另一些还没有完成，所以一整年都没有产出。这篇总结中也会截取弃稿中一些完成度比较高的部分分享给各位读者。高考备战高考是我今年上半年的主旋律。从 2023 年 5 月 4 日正式回班，到 2024 年 6 月 6 日（高考前一天），刚好经历了整整四百天。从起初的三百余分，到高考的 615 分，我实现了在旁人看来几乎不可能的飞跃。我没有任何理由不为我自己的巨大进步而感到自豪。我在刚出考场时的估分恰好就是 615 分，这么准确的估分我觉得也可以吹很久了。总的来说，我用自己的实力与汗水，狠狠地打了某些幻想看我过不了本科线的笑话的 “学生” “老师” 和 “家长” 的脸。在实在学不下去的时候，由于没有任何的娱乐设施，我只能通过写文章来做一些与学习无关的事情。受精神状态影响，这些文章的行文思路可能不是很正常，表达的情感也会比较激烈，还望各位读者海涵。《从零开始的异世界文化课生活》在一些比较特殊的日子里，我会用日记的形式来记录近况。《从零开始的异世界文化课生活》是一篇日记选集，笔者从中再次截取了一部分比较有代表性的内容。节选一竞赛机房的灯熄灭了。我心中的火，也骤然灭了。笃行楼陷入了黑暗之中。我踩着黑暗，一步步地走向楼下。这段熟悉地不能再熟悉的路，我已经走了许多年。在昏暗的夜色中，教学楼的灯光确实格外璀璨，无数学子正在其中奋笔疾书，追逐属于他们的梦想。可惜这梦想并不属于我，我的梦想已然破灭。我背着书包，走向了教学楼，再也没有回头……▲ 从存真楼旧竞赛机房向远处望去。摄于 2022 年 6 月。▲ 从实验楼五楼向下望去。摄于 2022 年 2 月。节选二很多人都说竞赛生们个个智商超群，学习能力异于常人，可我却不这么认为。站在聚光灯下的人终究是那一小部分，从总体上来看，大部分人还是陪跑的选手。很不幸，我就在陪跑之列。竞赛招生时，教练们口中的「半个月逆袭登顶」的神话也不是人人都能书写的。我终究还是要独自面对这冰冷残酷的现实。回到班后，我发现教室内甚至已经没有了我的座位 —— 只有花名册上的名字证明着我属于这个班。甚至考试的时候都不会给我分配考场。我确实成为了一个透明人。一张张陌生的面孔，一个个陌生的名字，一阵阵陌生的声音…… 我虽然回到了我自己的班级，但却没有得到任何归属感。节选三虽然学习是一名高中生的本职工作，但是我仍然要指出，我并不喜欢囿于应试教育的牢笼之中。每天机械地刷题、考试，于宿舍、食堂和教室三点一线间往返，并非我所向往的生活。我希望我能够将青春的火焰燃烧在我所热爱的事业上，而不是在一摞摞试卷中消磨殆尽。一次次的模拟考试，每次我的名字都会出现在成绩单的末尾。在一个几乎人人都能上 600 分的班级里面，我三四百分的成绩显得格外突兀。相比于大多数同学们的包容，数任班主任和年级主任都有想过把我从省理科实验班里面给踢出去。好在到最后也没有成功。能够留在这个班里，算是不幸中的万幸。他们可否想过：如果我真的离开了这个班级，那我该怎么重新适应一个新的环境，该怎么重新接纳一批新老师的讲课风格，又该怎么与一批新的同学相处？我猜，他们并没有想过。▲ 高三时的教室。摄于暑假放假后，此时同学们都已把自己的书本搬回了家，准备接下来的线上学习。节选四高考前一百天左右，我的座位被固定了下来。我坐在教室的倒数第二排，靠窗户的位置。有句话叫「后排靠窗，主角故乡」，希望能够在我身上应验。另外，靠后的位置更有利于我自由发挥 —— 毕竟我的进度和班里面其他人的进度还是不太一样的，所以课上内容不能全听。坐在这里学累了能够转向窗外看风景也是一件美事啊~节选五我站在天台上，冷风直吹着我的脸庞。向下望去，大地突然显得十分亲切，仿佛在等待着我的造访。独处一会，我最终还是选择从楼梯走下去。我不知道我是在逃避什么，还是在寻找什么。我只知道，我不能就这样放弃。▲ 黄昏时的天台外景。我是从忘记锁门的维修通道溜上去的，那段时间学校在烫房顶。《四百天的疯狂之后》（节选）此文写于高考期间。节选中删去了一些琐碎的细节部分。四百天很长，能让我从一名小白变成一名可以安稳面对高考的成熟学生。四百天也很短，回班的日子仿佛还是昨天。明天就要高考了，而我还坐在这里写文章。心里是不是该有愧疚感呢？我不知道。不过我觉得再继续临时抱佛脚也只能够让自己乱了阵脚罢了。尽人事，听天命。还有那不能缺席的：高考加油！高考第一天。上午的语文考试只能说是正常发挥，没有什么特别的感觉。因为还有四科考试，所以也没有和别人对答案。下午的数学考试是题型改革后的第一次高考。前面的选择填空感觉还好，第一道大题是解三角形，也比较常规。但是到了第二道大题，炸裂的就来了 —— 圆锥曲线放到第二题考，打了个措手不及。要知道，我对自己的定位是丢弃掉导数和圆锥曲线这两类大题的。但是放到第二道大题的位置，理论上不应该不拿这分。所以我只能硬着头皮做了下去，结果没做出来。接下来的几道大题也并不顺利，一道做完的都没有（好像其他同学也差不多）。不过十九题做了两问，在同学们里面算做得比较多的了。晚上由于大家的数学都很稀碎，班里面基本上没有多少动笔的声音，许多人都在发呆。班主任老师见状紧急开会平复大家的心情，以免影响次日的考试。（对答案后补充：选择和填空加起来应该只扣了两分。第十九题写了的两问全部正确。感觉能 120+ 了）（出分后补充：真的考了 120 分欸）高考第二天。上午的物理答题意外地顺利，除了第一道大题卡了三分钟和本来就没想着做的最后一道大题以外，其他的题目都莫名其妙地顺利。出了考场以后我甚至跟老师自信地说能上 90 分（出分后补充：没上，只考了 72 分）。于是立马兴奋了起来，昨天数学带来的阴霾一扫而空。下午的英语考试感觉自己彻底进入了状态。答完卷子以后发现还剩四五十分钟，遂捂住之前的答案再做了一遍。做完后发现有三处不一样的。仔细检查后修改了其中的两处。出考场后告知任课老师这个情况的时候她还安慰我，让我不要慌，这个是正常现象。（出分后补充：考了 137 分）晚上又看了看化学。生物明天考完化学再看。化学好难。不是说一年比一年简单的吗？怎么今年考完化竞生都落泪了。抱着老师哭的都出来了……考生物的时候，我的笔速愈发加快，花了不到一个小时就做完了。然后就是等待高考结束了。这个时候的我已经没有丝毫检查的欲望了，只想快点结束这该死的考试回家睡大觉。出考场，大概估了一下，应该能考 615 分左右吧，就会这些了。▲ 高考结束后家委会送来的小蛋糕。就这样吧。志愿填报在近一个星期紧张刺激的志愿填报过后，我根据自己的成绩、结合目标院校层次，筛选出了 96 个志愿 —— 卡着志愿填报的上限 —— 作为我的最终填报志愿。根据我的期望，最终录取志愿会落在 40 ~ 60 序号的志愿上。等到录取的那天，面对迟迟没有动静的河北省教育考试院系统，我转向了各个大学的招生办的录取查询系统进行查询，最终在第 45 号志愿所对应的福州大学的查询系统上查询到自己被录取到了计算机科学与技术专业。不久后（但是依然是焦急的等待），我就收到了录取通知书：▲ 福州大学录取通知书外封套。从福州发出到石家庄签收全程只花了十几个小时。虽然我知道，在这个人均 985 的时代，一张 211 的文凭已经不算什么了。但是我仍为我能通过自己的努力考上一所好学校而感到自豪。大学8 月 30 日，我从石家庄启程，经由南京转机，最后抵达了福建福州，准备开始我的大学生活。24 年的下半年可以说是非常顺畅的：考上了一所好大学。遇到了一群好老师。分到了几位好舍友。此外，我还加入了福州大学西二在线工作室（校计算机协会），遇到了一群有着相同爱好的好朋友们。下面是日常随拍分享时间：▲ 福州大学铜盘校区教学楼。摄于 2024 年 9 月 5 日。▲ 福州福山郊野公园。▲ 福州西湖公园。▲ 落日。▲ 从鼓山上俯瞰福州城。摄于 2024 年 12 月 20 日。▲ 从鼓山上夜瞰福州城。摄于 2024 年 12 月 20 日。▲ 贵安欢乐世界一角。摄于 2024 年 12 月 31 日。追番看过请问您今天要来点兔子吗？系列请问您今天要来点兔子吗？（第一季）请问您今天要来点兔子吗？？（第二季）请问您今天要来点兔子吗？？～Sing for You～（剧场版）不时轻声地以俄语遮羞的邻座艾莉同学亚托莉 -我挚爱的时光-（剧场版）间谍过家家 代号：白葬送的芙莉莲想看请问您今天要来点兔子吗？BLOOM（剧场版）请问您今天要来点兔子吗？？～Dear My Sister～魔女之旅业余无线电在大学生活之余，我还完成了我中学时的一个愿望 —— 考取业余无线电台操作证，成为一名 HAM。若要了解更多信息，请访问网址：后记过去的 2024 年总体上来说还是比较顺利的。不过上了大学以后各种事情明显变多了，搞得年终总结都拖了好久😂。最后，祝大家新的一年里身体健康，万事如意！"},{"title":"从 CSS 字符串到 AST（一）—— 词法分析器（Lexer）的实现","date":"2025-08-05","url":"/post/css-lexer/","tags":["CSS","编译原理"],"categories":["技术向"],"content":"最近在实习的时候，遇到了一些需求，需要自己去实现 CSS 的解析、（伪）渲染流程。以之为契机，我学习了一下编译相关的知识，其中的第一环就是 Lexer。本文中的代码均使用 Go 实现，成果已经作为 Go 库 go.baoshuo.dev/csslexer 发布。GitHub 仓库：renbaoshuo/go-css-lexer实现标准：CSS Syntax Module Level 3 (W3C Candidate Recommendation Draft; 24 December 2021)建议在阅读本文前对 CSS 标准内容有一定理解。词法分析词法分析（lexical analysis）是计算机科学中将字符序列转换为记号（token，也有译为标记或词元）序列的过程。进行词法分析的程序或者函数叫作词法分析器（lexical analyzer，简称 lexer），也叫扫描器（scanner）。词法分析器一般以函数的形式存在，供语法分析器调用。——维基百科词法分析是编译中的第一个步骤。它读入组成源码的字符流，并将他们组织成一个个的词素（lexeme）。有了词素以后，识别并标注它的类型，就可以生成一个 <token-name, attribute-value> 形式的词法单元（token）。这个单元会被传送给下一个步骤 —— 语法分析 —— 进行后续的处理。在进行词法分析之前，首先要设定好到底有多少种 token 类型，然后再确定每个 token 类型的判断条件和解析方式。Token 的分类由 CSS Syntax Module Level 3 中的 4. Tokenization 一节可以得到 CSS 的 token 有以下几种类型：为了解析方便，我们又在标准的 token 类型外拓展了几个 token 类型，得到了下面的 token 表：于是乎，我们就有了词法分析的期望目标产物 —— 由这 33 种类型的 token 组成的 token 流。输入流工欲善其事，必先利其器。在实现真正的词法分析流程以前，我们需要编写一套输入流来辅助我们完成读入的操作。首先，我们给出输入流的定义：这个结构封装了对一个 rune 切片的访问，并维护了当前扫描的位置（pos）和当前正在扫描的 token 的起始位置（start）。需要注意的是，我们使用 rune 而不是 byte 来存储内容，这样做的原因是为了便于处理代码中包含的 Emoji 等 Unicode 字符。为了使用方便，这个输入流可以从 string、[]rune、[]byte 和 io.Reader 初始化。实现细节可以查看仓库中的 input.go，各个函数签名如下：NewInput(input string) *InputNewInputRunes(runes []rune) *InputNewInputBytes(input []byte) *InputNewInputReader(r io.Reader) *Input接下来，我们需要设计一系列合理的方法，使得这个输入流的使用能够在满足我们的实际需求的同时，还保持简洁的风格。在 4.2 节的一系列定义中，通过观察不难发现，在解析过程中会不断地出现 consume 和 reconsume 的操作，也就是说，在输入流的末尾会不断地进行 pop_back 和 push_back 的操作。那么我们可以将这些操作转化为「预读」和「后移指针」的操作，以此来减少频繁在流末尾进行的弹出和插入操作。于是，我们就有了以下两个方法：func (z *Input) Peek(n int) rune预读输入流中 pos+n 位置的字符。func (z *Input) Move(n int)将当前输入流的指针后移 n 位。经过阅读规范以后，不难发现一个 token 可以由几个不同类别的字符序列组成，比如 16px 就是一个 16 (number sequence) 和一个 px (ident sequence) 共同组成的 dimension-token。所以我们在解析一个 token 的时候可能会调用多个解析函数，那么就需要在 token 级别做一个固定的输出模式。于是，我们定义 func (z *Input) Shift() []rune 来弹出当前 token，并更新 Input 实例中的 start 值，以开始下一 token 的解析。不过后续在解析 url-token 的时候遇到了需要读取当前已经 consume 的内容的情况，于是将 Shift 方法拆分成了 Current 和 Shift 两个不同的方法，以便使用。除此以外，在解析的时候还有需要在满足某一特定条件下一直 consume 的能力需求，因此又设计了较为通用的 func (z *Input) MoveWhilePredicate(pred func(rune) bool) 方法，来实现这一能力。加上错误处理逻辑以后，整个 Input 的方法如下：接下来，我们就可以正式开始 lexer 的编写了。词法分析器其实 Lexer 的方法框架设计就相对简单了，下面直接给出定义：在 Next 方法中有一个巨大的 switch-case 语句，这里面包含了 4.3.1. Consume a token 中所描述的所有在 token 开始时的情形。我们将会根据一个 token 开始的几个字符（小于等于 3 个）来确定这个 token 的后续部分应该如何解析。Token 开始处的分类讨论开始解析 token 的时候一定是在文件流的开头或者上一个 token 刚刚解析完毕的时候，那么此时我们只需要根据对应规则判断 token 类型即可。首先预读 1 个字符，记为 next，然后对这个字符进行分类讨论。EOF：直接返回 EOF-token。\\t, \\n, \\r, \\f, ：根据标准需要将此字符及后续的所有 whitespace 组合成一个 whitespace-token。/：如果是 /* 则一直读取到 */ 或者 EOF 作为 comment-token。' (单引号), \"(双引号)：遇到这两种引号，会调用字符串解析函数 consumeStringToken()。该函数会持续读取字符，直到遇到与之匹配的结束引号。在此过程中，它会处理转义字符（如 \\\"）。如果在中途遇到换行符或文件末尾，则会生成一个 bad-string-token，否则生成一个 string-token。0 ~ 9 的数字字符：如果以数字开头，确定无疑是数字类型，调用数字解析函数 consumeNumericToken()。(, ), [, ], {, }：生成对应的括号字符。function-token 或者 url-token 的情况会在处理 ident-like 的时候另行考虑。+, .：这两个字符，再加上 -，都比较特殊。不过 - 需要包含一些额外的判断，因此归属于另外一条规则处理。解析器会向后预读，通过 nextCharsAreNumber() 判断后续字符是否能构成一个合法的数字（例如 +1.5, .5）。如果可以，则调用 consumeNumericToken() 将其完整解析为一个 numeric-token。如果不构成数字，则 + 和 . 会被当作 delimiter-token。-：除了像 + 一样判断是否有可能进入数字的处理逻辑以外，还需要考虑作为 --> (CDC-token) 和 ident-like 的情况。如果都不是才会被当做 delimiter-token。<：如果能构成 <!--，解析为一个 CDO-token，否则解析为 delimiter-token。*, ^, $, |, ~: 这些是属性选择器中的匹配符。如果它们后面紧跟 =，则会组合成一个专有 token：*= → substring-match-token^= → prefix-match-token$= → suffix-match-token~= → include-match-token|= → dash-match-token特别地，对于 |，如果能够组成 ||，则会成为 column-token。如果没有，则单独作为 delimiter-token。@：如果后续的字符能够组成一个 identifier，那么解析为 at-keyword-token，否则解析为 delimiter-token。, (逗号)：直接生成 comma-token。: (冒号)：直接生成 colon-token。; (分号)：直接生成 semicolon-token。u 或 U：这是一个特殊前缀。如果其后是 + 紧跟着十六进制数字或 ? (例如 U+26 或 u+A?)，则调用 consumeUnicodeRangeToken() 解析为一个 urange-token。否则，按标识符处理。这里有一个坑点，需要在编写 parser 的时候注意，比如 u+a 既是一个合法的 unicode-range，也是一个合法的 selector，需要根据上下文来判定。1 <= c <= 31, !, %, &, =, >, ?, `, 127：解析为 delimiter-token。其余字符：尝试解析为 ident-like。整个流程在 lexer.go 的 24-198 行，由于篇幅原因此处就不贴代码了。Token 解析为了方便，我们为几种逻辑复杂 / 需要重用的 token 解析逻辑进行了封装，产生了如下函数：consumeNumericToken()先 consume 一个数字；如果后续跟一个合法的 name，则 consume 这个 name 作为它的单位，组合为 dimension-token；如果后续跟一个 %，consume 掉这个 %，产生一个 percentage-token；否则产生一个 number-token。consumeUnicodeRangeToken()有以下几种情况：U+0000FF，+ 后面可以跟 1 ~ 6 个 16 进制数字；U+0000??，+ 后面先跟 16 进制数字再跟 ?（通配符），总数不超过 6 个；U+0001-0002，- 两侧可以有 1 ~ 6 个 16 进制数字。这些情况需要各自分类讨论，最后产生一个 urange-token。consumeIdentLikeToken()先 consume 一个合法的 name；然后判断是否为一个函数的开始，如果是，再判断是否是 url-token，转入特定的解析流程。需要额外注意的是，如果 url 函数的参数是使用单 / 双引号包裹的字符串，那么按照普通函数参数解析即可。注意这里的实现其实会在含转义的 URL-token 上出现问题，后续通过修改 consumeName 函数的实现，通过返回值判断解决了此问题。consumeStringToken()简而言之，就是从开始的引号的位置一直匹配到相对应的结束引号位置或者文件末尾；特别地，如果遇到没有转义的换行，那么此时就需要作为 bad-string-token 返回了。consumeURLToken()需要按照规范特别注意 bad-url-token 的情况。但此处的实现和规范不同，在 consumeIdentLikeToken() 中我们把 URL 的前导空格全部 consume 掉了，但如果遇到使用引号包裹的 URL 时，这段空格理应单独作为一个 whitespace-token，不过无伤大雅，这样解析也可以，不影响后续的 parse 流程。特定类型字符片段解析一共有以下几个片段解析的函数：consumeUntilCommentEnd()：一直读取到注释结束。consumeEscape()：解析一个转义字符。consumeName()：读取一个 name。consumeNumber()：读取一个数字。需要特别注意对科学计数法的处理，以及与调用侧配合正确解析 .7 +.7 等 case。consumeSingleWhitespace()：读取一个空格。consumeWhitespace()：读取多个空格。consumeBadUrlRemnants()：读取 bad-url-token 的剩余部分。小结让我们来总结一下 lexer 工作流程：在 lexer 读取到某个 token 的起始点的时候，lexer 预读起始的几个字符，然后辨别 token 的类型。对于大致分类好的 token，根据其更具体的特征预读并消耗掉对应的字符，直到这个 token 结束。大致的类型辨别是通过 Next() 函数中的那个巨大的 switch-case 语句来完成的。而对于精细的 token 类型的判断，则是 case 中的语句和 consume_token.go 定义的一系列函数来共同完成的。至于 token 内部的字符段的解析，则是 consume.go 中的一系列函数完成的。由此组合，整个 token 的解析过程得以良好运转。测试为了验证 lexer 的实现正确性，我们引入了 romainmenke/css-tokenizer-tests 的测试用例来对 lexer 进行测试。具体的测试流程可以参考 lexer_test.go 中的实现。根据测试结果来看，出现的问题主要集中在与转义字符相关的处理，对于大部分情况已经能够正常解析。截止编写本文之时，测试通过率为 96.53% (167/173)，个人认为已经处于可用水平。后记文中所述的 lexer 的具体实现已经开源在 renbaoshuo/go-css-lexer，欢迎大家 Star！搓这个 lexer 花了半个周末的时间，修修补补又消耗了一些时间。也算是在工作之余充实自己的大脑了。文章题图由 Gemini 2.5 Pro Imagen 生成。"},{"title":"愿此去前路皆坦途 —— 我的 2023 年度总结","date":"2024-01-01","url":"/post/goodbye-2023/","tags":["年度总结"],"categories":["乐生活"],"content":"2023 年就这样在恍恍惚惚间过去了，在这一年中发生了许多事情，就让我挑一些大家可能感兴趣的事情来讲讲吧。回归文化课如我在《我的 OI 生涯 —— 一名退役竞赛生的回忆录》中所述，我在竞赛失利后，已经选择了回归文化课道路。在回班以后，不时有好友、读者向我私信或者邮件询问我的近况。由于寄宿制学校放假时间极短，未能一一详尽回答，所以我将在此介绍一下我的近况，以回应各位热心读者的关切。博君一笑首先先给大家看点好笑的：在班里感觉如何？截止到现在，我在回班以后主要分为了以下几个阶段：心态恢复期（4 月 ~ 5 月）一轮复习前期（5 月 ~ 7 月上旬）暑假（7 月下旬 ~ 8 月）一轮复习后期（9 月以后）随着时间的推移，我从最开始几个月的 “听天书” 到现在已经逐渐适应了班内的学习节奏。虽然由于高一高二的长时间停课导致现在的成绩不太理想，但我相信通过一轮复习，我的知识水平会得到很大的提升。虽然今后还有一段很艰苦的道路要走，但我坚信只要努力就能克服路途上的艰难险阻，到达成功的彼岸。想上什么大学？暂时还没想好。考哪算哪，不强求。考虑出国吗？暂时不考虑。原因有三：语言：我的英语水平不算很高，出国后可能会存在沟通障碍；耗财：出国留学需要不少费用，我更希望将家里的钱花到一个合适的地方去，而不是浪费在我身上；思乡：我希望能有多一些的陪伴家人的时间，在出国以后回家的机会可能会大大减少，这于我来说不太能接受。考虑复读吗？高考之日未到，现在谈复读与否其实有点早。我个人以及我家长的意见都倾向于不复读。复读，意味着又要承受一年高三的巨大压力，这对于一个人的身体和心理都是一个巨大的挑战，而我的身体较为羸弱，恐怕很难再扛得住一年这样的压力。除此之外，复读还使我在一条我不喜欢的且充满不确定性的道路上多耗费了整整一年的光阴，这样做真的值得吗？我不太好回答这个问题。竞赛对你的高考有什么帮助吗？在强基计划公布以后，除非取得国家级的奖项，否则竞赛对高考已经没有了什么实质性的帮助，省一等奖最多也就给三四十分的优惠，所以最后还得看文化课的水平到底如何。我学竞赛并无太多功利因素，更多的是怀揣着一份对计算机的热爱，这也是支撑着我度过这四年有余的竞赛生涯的最关键因素。此外，我也没见过几个一心为了功利还能取得好成绩的竞赛生。毕竟竞赛的学习过程并不轻松，且其对文化课的影响常常是显著的，所以从功利的角度来看，学习竞赛显然是不划算的。不过，如果再给我一次机会，我还会选择学习竞赛。正如我在《我的 OI 生涯 —— 一名退役竞赛生的回忆录》中所述，竞赛带给我的并不仅仅是那几张薄薄的证书，更多的是思维方式的蜕变，这将在我今后的人生中产生深远影响。有什么想对学弟学妹们说的吗？高一的时候一定要打牢文化课基础，不然等到省选前有你紧张到哭的时候。我就是一个很好的反面教材，高一停课停早了导致文化课约等于没学，结果最后几场比赛前就非常害怕退役回去学文化课，于是就整夜整夜的失眠。追番情况动漫于我的意义并不只是看个 “动画”，一段精彩的作画、一段感人的故事、一段轻松的日常，都能以其积极向上的乐观主义精神，将我从低谷中拉出来，使我能够更加乐观地面对今后的人生道路。《别当欧尼酱了！》（2023 年 1 月）评分：6 分（还行）短评：剧情还可以，但不算完全合我口味。《我推的孩子》（2023 年 4 月）评分：6 分（还行）短评：有点玄幻？看个乐呵也挺好的。《孤独摇滚》（2022 年 10 月）评分：8 分（佳作）短评：在上映近一年之后才抽出时间来看这部番，看完以后为波奇的改变而欣慰，同时也非常喜欢活泼开朗的虹夏。是一部非常值得去看的好番。《间谍过家家（第二季）》（2023 年 10 月）评分：7 分（可以）短评：一如既往的家庭喜剧，欢乐多彩的家庭日常。（二刷）《莉可丽丝》（2022 年 7 月）评分：8 分（佳作）短评：喜欢千束的活泼开朗以及面对困难时的积极向上，同时也非常羡慕千束和泷奈之间真挚的感情。▲ 我宿舍内悬挂的《莉可丽丝》海报（三刷）《干物妹！小埋》系列评分：9 分（神作）短评：最能打动我的一部番。轻松愉快的日常、真挚热烈的友情，无不令我心驰神往。同时也从大平的身上看到了自己的影子。（二刷）《天使降临到我身边》系列评分：8 分（佳作）短评：欢乐而充实的孩童日常。喜欢可爱的孩子们。一些照片▲ 故地重游（参见：USTC Hackergame 2021 旅行照片）▲ 燕山大学 ▲ 二南随拍GitHub 活动概况由于学业因素，在过去的一年里我用来写代码的时间大大减少。不出意外的话，在高考结束以前我都会保持这种低频活动状态。个人主页对整体布局进行了一些重新设计。此外我还计划将其迁移至 Next.js 13 App Router，但尚未完工。后记在新的一年里，我会继续冲刺高考，争取考一所好大学。同时也在此感谢读者们对我的关心，不过由于我长期住校，故评论、邮件等可能不会及时回复，敬请谅解。最后，祝大家新的一年里身体健康，万事如意！"},{"title":"如何创建一个打印友好型的网页","date":"2023-05-28","url":"/post/printer-friendly-webpage/","tags":["前端","CSS","Web","打印"],"categories":["技术向"],"content":"在某些情况下，我们会遇到需要将网页打印出来的需求。但是，直接打印网页的效果往往不尽如人意，因为网页的排版和打印的排版是不同的。本文将介绍如何创建一个在打印时具有出色的质量和可读性的网页。前置知识：@media print 媒体查询经常编写 CSS 的读者应该对 @media 媒体查询是比较熟悉的了。这个语句在创建响应式网页时是非常有用的，经常被大家用来调整不同屏幕宽度的设备间的样式。而 @media print 媒体查询则是专门用来调整打印时的样式的。@media print 媒体查询的语法如下：这些样式只会在打印时应用，而不会在屏幕上显示。了解了 @media print 媒体查询的基本语法后，我们就可以开始创建打印友好型的网页了。优化内容和布局隐藏不必要的页面元素、样式在打印时，页面上的一些与正文无关的元素需要被隐藏掉。比如在《二分图学习笔记》页面中（本文在后续部分中将会一直以本页面作为示例），顶部的导航栏以及右侧的侧边栏与正文信息并没有什么关联，因此可以在打印输出中隐去。确保信息的整齐和清晰可读性▲ IT 之家某篇文章的打印版截图。从这张截图中可以看出这个页面似乎并没有对打印机进行适配，并且侧边栏还遮挡到了正文中的文字。不过由于笔者并没有找到更好的遮挡示例，因此只能给出这么一个有点勉强的例子 —— 侧边栏按照上一节中的建议是应该要被隐藏掉的。对于这种情况，需要在设计、编写页面布局的时候下功夫，以避免遮挡到正文。除了文字被遮挡的问题，截图下部的超链接在纸质媒介上显然是不能被点击的。以此处的超链接为例，可以通过特殊处理来在纸上显示出链接的实际指向 URL：效果如图：除此之外，如果需要，还要对字体及其大小进行一些调整。笔者认为在相当一部分情况下，使用衬线字体在打印后的观感要比使用非衬线字体时好很多。（PS：在此对通篇使用微软雅黑出试卷的老师表示强烈谴责）多媒体内容的处理有时网页上会包含一些音频、视频等多媒体内容，这些内容在纸质媒介上与超链接类似，无法与读者交互。此时可以考虑提供一些替代文本来对其内容进行描述，并提供指向相关资源的链接、二维码等辅助工具来帮助读者获取多媒体资源中的信息。编写适合打印的样式单位制在网络世界中，我们的常用单位诸如像素（px）、百分比（%）、相对大小（em、rem） 等。然而在现实世界中，我们常用的单位则为物理单位，如厘米（cm）、点（pt）等。这导致了在打印输出时需要额外注意单位制相关的问题。虽然现代浏览器对这些问题的处理已经比较优秀了，但在部分情况下仍然会导致页面排版布局出现错乱。CSS 优先级经常写 CSS 的读者应该对 CSS 中的样式优先级不陌生了。笔者建议在编写 CSS 时将打印相关样式置于靠下的位置以免产生冲突，同时也可以适当地使用 !important 来强制覆盖一些样式。测试和调整可以使用 DevTools 来模拟打印环境进行调试（按 Ctrl + Shift + P 组合键唤出菜单；对于中文版浏览器，请搜索「打印」关键字）。演示感兴趣的读者可以访问 oi.baoshuo.ren/bi-graph 并尝试打印该页面。▲ 原网页▲ 打印效果（预览）"},{"title":"我的 OI 生涯 —— 一名退役竞赛生的回忆录","date":"2023-04-02","url":"/post/oi/","tags":["OI","竞赛"],"categories":["乐生活"],"content":"在经历了四年半的不算短也不算长的时光后，我的 OI 生涯画上了一个并不算圆满的句号。是的，我退役了。写回忆录的本质是自己给自己整理遗容。—— 郑渊洁《舒克和贝塔历险记》谨以此文纪念我与 OI 一同逝去的青春。OI 之路：我的成长历程我第一次接触信息学竞赛时在初一上学期（2018 年）。当时学校与旁边的高中部合作开设了「信息贯通」课程，使得我在信息老师的帮助下了解到了信息学竞赛这个东西。这便是一切的开端了。在学 OI 之前，我已经具有了一定的 Python 基础，并且还掌握了一些网页开发相关技能。不过这些东西和 OI 并没有什么关系，如果硬要说有的话，那么这些东西对我的帮助就是使得我的 C++ 语法入门过程并没有那么痛苦，促使了我留下来继续深入学习 OI 知识。我对计算机有着与众不同的兴趣 —— 别的同龄人用电脑基本上都是打游戏，而我用电脑则是折腾软硬件、写写代码等等。在接触 OI 之后，我找到了有着相同兴趣的一群小伙伴，我们可以在一起交流很多计算机相关的东西 —— 大多是算法相关的内容 —— 我们都为代码可以实现的无限可能性着迷。这让我对 OI 的喜爱更甚 —— 又能学知识，还能结交好友。▲ 初中开设的「信息贯通」课程正在授课。来源于学校微信公众号。本人跟随高中部学习，因此不在照片中。不过与此同时，我在班级里并不是很合群，因为我不打游戏。当时流行的游戏叫做《王者荣耀》，同学们周末都会废寝忘食的去玩它，然后在返校后的课余时间交流上周末打游戏的心得，以及规划下次放假的游戏时间。而我因为对游戏没有兴趣，所以很难插上话。这使得我与班级的主体渐行渐远，转而更加亲近我们这个小圈子，在这个圈子里我能获得更多的认同感和归属感。我初中的 OI 生涯到初三下学期（2021 年）告一段落。初三下学期是一段比较痛苦的日子 —— 我需要补习文化课，来应对即将到来的中考。我和我在学习 OI 时认识的邻班的好伙伴赵泽峰同学一起互帮互助（其实还是我向他取经比较多），共同学习。那段时间几乎每天我们两个都是最后回宿舍睡觉的人。最后的结果很令人振奋，我们都考上了我们理想的高中 —— 石家庄二中实验学校，也就是前文中提到的高中部，这所重点高中有着专业的教练团队和竞赛培养体系，是学习竞赛的好去处。▲ 二南日落。本人在 2022 年 6 月摄于石家庄二中实验学校存真楼上。进入高中后，我有更多的时间学习 OI，但相应地，学习文化课的时间减少了。我最初被分入了竞赛班，但我的成绩排在很靠后的位置，这是因为我不仅文化课考不了高分，而且不能兼顾竞赛和文化课的学习。这招来了文化课老师的不满 —— 学竞赛不拿金牌最后还得学文化课，而且文化课成绩太差会拉低班级平均分，这显然是他们所不想看到的。好在我高一下学期被编入了另外一个省理科实验班，这个班的班主任是上一届带竞赛班的班主任（我先前在竞赛班时班主任从没有接触过竞赛生），所以相比之下高一下学期时来自文化课班的压力要减轻许多。高一下学期的期中考试结束后，我停课了。这给了我充足的时间去研究一些较为困难的知识点，这对我来说是一大收获。▲ 我在存真楼上旧信息中心 NOI 教室 3 中的机位。由本人在 2022 年 6 月拍摄。然后我就进入了高二，每天都被模拟赛压得喘不过气来。当时基本上每天的规划都是上午模拟赛，下午改题，晚上隔三岔五的还会有南校自己办的「基础模拟赛」—— 专练第一、二题难度，防止挂分（虽然该挂的还得挂）。直到快要退役的时候，才能真正体会到往届学长们的痛楚。我送走了好几届学长，这次终于要成为了被送走的那一批。CSP-S 2022 拿了个一等，全省二十多名，这应该就是我能够达到的最好的成绩了吧。NOIP 2022 被取消了，没有考成。春季赛和省选又给我强行续了几个月的命，但于事无补。▲ 我在 CSP-S 2022 中获得的获奖证书。我的 OI 之旅到这里就结束了。退役之后特别喜欢学长们常说的一句话：菜是原罪。如果我的实力能够再强一些的话，我肯定不用担心退役这件事情。但即使最终的结局必然是退役，我也无悔竞赛。收获思维方式的转变在学习竞赛的过程中，我收获了许多宝贵的经验和知识。其中最重要的收获之一就是我的思维方式进行了深刻的转变。竞赛知识点的数量很大，并且通常都比较深入、复杂、抽象。这要求我们必须具备良好的理科思维和创新思维，能够将问题进行深入研究，并将其与实际问题相结合，产生新的想法和解决方案，从而在比赛中熟练运用它们。知识面的拓展OI 中所涉及的知识非常广泛，仅在《NOI 大纲》中列出的知识点就已经能够涉及到好几摞半人高的书堆了。此外，在日常训练的过程中还需要接触到各类国内外的在线资料，这同时需要良好的外语水平。等等。对我而言，在学习 OI 之余，我还略微了解了一些软件工程相关的知识，写了一些小玩具出来。社交关系与合作学习我结识了许多友好的同学，他们都非常优秀。在竞赛学习的过程中，我们经常会相互帮助，互相学习。这种友好的关系使得我们的竞赛旅途更加愉快。向优秀选手学习俗话说得好，「人外有人，天外有天」。在学习竞赛的过程中，我时常有机会接触到并认识来自全国乃至全世界的优秀选手。比自己更强的选手不一定只是对手，更可以成为我们的老师和榜样。从他们身上可以学习到很多独特的思维方式和优秀的解题方法，而这些在自己日常独自训练时是很难接触到的。所以要学会欣赏和学习优秀选手的思路和方法，并从中受益、成长。只有这样，我们才能不断提高自己的水平，成为更好的自己。竞赛与文化课平衡与挑战对于大部分人，竞赛和文化课是不可兼顾的。既然要抽出时间来学习竞赛，那么就必须压缩一些干其他的事情的时间，比如学习文化课。这会导致文化课的学习效果受到影响，然后成绩就不可避免地下滑了。考试成绩下降之后，班主任和任课老师们自然会有意见。竞赛不是一条捷径，我们学校每年只有那么几个人能够进入省队并在国赛中取得奖牌，其他人则会慢慢地被淘汰下来，这是不可避免的。老师们自然希望我们的文化课成绩要好一些，所以会鼓动甚至要求我们放弃学习竞赛，毕竟相比之下，竞赛的容错率和回报率太低了。那么如何在竞赛和文化课之间取得一个较好的平衡就成了一个棘手的问题，这个问题各路人马争论至今也没有一个定论，我觉得以后也不会有一个定论，毕竟人和人是不一样的。重回文化课在春季赛后，我休息了半天便准备考虑回归文化课学习的事宜。我先回班找到了各科的任课老师们，向她们说明了我的实际情况。她们表示理解，希望我能够尽快找回状态，回归文化课的学习，因为我已经落下了很多课程的学习进度。一些能听懂的科目自然也是要回班听一听的，网课讲得显然不如老师好。不能听懂的科目就只能自己看书听网课，一轮复习再回班跟了。刚退役的时候还是很失落的，也不能专注到文化课的学习上，不过经过后来的慢慢调整，现在情况有转好的迹象。再慢慢观察吧。感谢不论结果如何，我能坚持学习竞赛到今天，都少不了来自家长、教练和同学们的鼓励与支持。我想感谢我的父母，没有他们的支持和鼓励，我不可能坚持到今天。我想感谢我的教练任亮老师和聂文彬老师，没有他们的指导和帮助，我不可能取得今天的成绩（虽然并不是很出类拔萃）。我想感谢我的同学们，没有他们的陪伴和帮助，我不可能从竞赛学习中收获如此多的东西。后记0虽然退役了，但是我应该还会经常回来 OI 圈子看一看，没准还会参加一些比赛呢。一切皆有可能，接下来的日子里，我会继续努力，不断提高自己的水平，成为更好的自己。1竞赛不是火，却能点亮一生。这是石家庄二中实验学校旧信息中心旁的信息学竞赛教室墙外贴的一句话。这句话的意思是，学习竞赛虽然不会像火焰燃烧那样为当下带来光明与温暖，但是它能够在一个人的一生中产生持久的影响。竞赛可以激发人的竞争精神，并培养毅力和耐力等品质。这些优点不仅在竞赛过程中得到锻炼，而且会伴随一个人的一生，对其产生长远、积极的影响。上初中时第一次看到这句话时，我便对其留下了深刻的印象。随着时间的推移以及心境的不同，每次看到这句话，我都会对其有不同的理解。直到我的 OI 之旅走到尽头之时，我才明白了这句话之中的深意。2在退役之前的一个晚上，我走出实验楼的机房，向旁边的教学楼望了过去。灯火通明的教学楼与人烟稀少的实验楼形成了鲜明的对比 —— 这使得我莫名地产生了一种怅然若失的感觉 —— 我的竞赛之旅即将结束，我将要离开这个我已经熟悉的环境，去面对一个陌生的未来。我想起了小时候读过的一首诗歌中的内容：也许多少年后在某个地方，我将轻声叹息把往事回顾，一片树林里分出两条路，而我选择了人迹更少的一条，因此走出了这迥异的旅途。– The Road Not Taken, Robert Frost.我选择了竞赛，一个小众的发展方向，而这个选择决定了我今后的人生道路。竞赛决不是捷径，它只是另一种艰辛的生活方式。我不知道未来的路会怎么走，但我知道，我会一直一步一步脚踏实地地走下去。即使不再参加与竞赛相关的活动，竞赛带给我的思维方式也将伴我一生。3【心态乐观】有人说，“生命中，我们都接到不同的剧本。平淡或浓烈，欢笑或眼泪，我们总要演好，直至落幕。”心态好，一切都好。积极乐观的心态，是幸福生活的钥匙。不管发生什么事，记得告诉自己，一切都会过去，好事自会发生。—— 摘抄：人民日报夜读《善待自己，过张弛有度的生活》，2023 年 02 月 25 日。4大家都说，高考是千军万马过独木桥，不容易。可是又有几个「大家」知道，竞赛是一个人摸黑走路，盲人骑瞎马，半夜临深池？在无数个孤独清冷的深夜，无数次羡慕已经安然入梦的同学们。我们都是行走在镜面边缘的人。低下头看到的，是半个迷茫的自己，和半个不见底的深渊。到哪里，会不会跌倒，是到终点还是滑进深渊，都不知道。唯一确定的是，自己只有一个人。—— 《行走在镜面的边缘》5得到与失去，只有时间会去评判；成功与失败，只有历史能去仲裁。我不会永远成功，正如我不会永远失败一样。—— 洪骥《……》本文为原创文章，未经许可禁止任何形式的复制、摘抄与转载。"},{"title":"向 #define int long long 说不","date":"2023-02-08","url":"/post/say-no-to-define-int-long-long/","tags":["C++"],"categories":["技术向"],"content":"TL;DR#define int long long 是一种未定义行为，尽量不要在代码中使用它。前言在算法竞赛社区中，经常能看见有人在代码中使用 #define int long long 来偷懒。我是一直极力反对这种做法的，因为这种做法会导致代码的可读性大大降低，并带来一些难以预料的问题。C++ 标准在 ISO/IEC 14882:2014(E) 的 17.6.4.3.1 Macro names 一节中，有这样一段描述：翻译并整理一下，就是：翻译单元不可 #define 或 #undef 词法上等同于下列部分的名称：C++ 中的关键字（表 4、表 5，在 2.12 节 Keywords [lex.key] 中给出）；有特殊含义的标识符（表 3，在 2.11 节 Identifiers [lex.name] 中给出）；任何标准属性记号（attribute-token，在 7.6 节 Attributes [dcl.attr] 中给出）。也就是说，标准中 并不允许 #define int 这种操作。编译器实现GCC在 GCC 的 C Preprocessor 文档中 给出了下面的说明：You may define any valid identifier as a macro, even if it is a C keyword.也就是说，GCC 并没有严格按照标准来实现预处理器，而是稍微放宽了一些限制以允许通过这种方式来使得代码更加灵活，便于增强代码的向下兼容性。Clang相关文档中并未提及是否允许 define 关键字，但源代码中未见相关限制。MSVC#define 指令 相关文档中并未提及。后记使用适当的数据类型来存储数据，有利于代码的可读性和稳定性，便于编写和调试。同时，正确设置变量类型也能提高程序的运行速度和效率。因此，我们应该做好正确的数据类型定义，而不是在编写代码时滥用 #define int long long。"},{"title":"再见，2022 —— 我的 2022 年度总结","date":"2022-12-31","url":"/post/goodbye-2022/","tags":["年度总结"],"categories":["乐生活"],"content":"又一年过去了。由于学业繁忙，这一年中发生的能写出来公之于众的事情并没有多少，但做一些微小的记录总是值得的，所以就有了这篇年度总结。大事记竞赛生涯的续命先向大家报告一个好消息，我在 CSP-S 2022 中取得了省一等奖（省排第 30），这么多年的竞赛算是没有白学。不过，按照正常的进度，到 NOIP 2022 结束之时也就是我的退役之日了，毕竟河北省只有 15 个省队。由于疫情影响，河北省取消了 NOIP 2022，并将在 2023 年 3 月举办春季赛，以此作为省选成绩的参考，这也就意味着我可以继续冲刺省选了（虽然进省队的希望不大，但仍然可以一试）。但是，现在也是时候考虑如何补习文化课的事情了。网课的日子在得知 NOIP 2022 取消后，我们便返回家中，开始了上网课的日子。跟班上网课貌似不太现实，所以只好跟着竞赛一起上网课。竞赛这边没有早读，早上上课时间比较晚，可以多睡会。在网课期间既要补习文化课，又要兼顾竞赛的进度，实属一个难题。疫情的终结此部分内容没有文字描述。关于我感染之后的情况记录，可以查看《我的新冠阳性日记》一些零碎我的 IPv4 地址段感谢炮总相助，今年 3 月我终于有了一段属于自己的 IPv4 地址段 —— 174.136.239.0/24。不过因为线路问题，这段地址并没有开展大规模应用。关于 AS141776 的更多信息，请访问 baoshuo.ren/network。新的个人主页基于 Vite + React + Primer Design 的新个人主页上线了！新的个人主页主要分为了个人简介、项目介绍、友情链接、项目单页等几个板块，并可以方便地在后期增删页面及其内容。请访问 baoshuo.ren 了解更多信息。OIerDb NG 正式上线又经过了半年多的开发，OIerDb NG 正式上线了。详细介绍可以查看文章《OIerDb NG —— 新一代的 OIerDb》，在此不作过多叙述。附上今年最后一个季度的访问量数据，平均日访客数也能保持在 900 人左右。欢迎体验：oier.baoshuo.dev。加入 Hexo Core Team今年上半年折腾了折腾自己的 OI 博客，在折腾的过程中顺手给 Hexo 发了一些 PR，并在 Sukka 大佬的引荐下加入了 Hexo Core Team。S2OJ v3.0今年下半年正式接手了学校的 在线测评系统，并进行了 一些大改（当心过大的 diff 导致浏览器卡死）。▲ 旧版界面▲ 新版界面除了界面更新之外，还增加了许多新功能，并修复了一些问题。在开发的过程中，也向上游 UOJ 官网版、UOJ 社区版发送了一些 Pull Request，算是为后人栽树了。GitHub 上的贡献又是碌碌无为的一年呢！后记2022 年就这样在疫情阴霾退散的过程中结束了。希望在走出这一困难之后，2023 年能够是一个更加美好的年份，让我们一起期待着明天的希望，共同迎接更加美好的未来。"},{"title":"我的新冠阳性日记","date":"2022-12-23","url":"/post/covid19-diary/","tags":["新冠"],"categories":["乐生活"],"content":"一直以为「感染新冠」这件事离我很远，像我这种居家上网课的人也不太可能与外面的病毒产生什么联系。直到 12 月 13 日午休之后，我居然发烧了，拿出抗原一测，发现自己阳了。至前几日，笔者已经基本康复，于是决定写下这篇文章，记录下这一个多星期的别样的体验。Day 1（12 月 13 日）上午正常上课。午饭后开始感觉略有不适，开始发烧（38.5℃ 左右），遂请假休息。下午烧到 39℃ 后服用一包布洛芬，体温略有下降，但并未退烧。抗原测试呈弱阳性。半夜继续高烧（39.4℃），服用一包布洛芬，体温略有下降，但仍未退烧。Day 2（12 月 14 日）全天请假休息。上午高烧（39.5℃），服用一包布洛芬后于午饭前退烧。下午重新开始低烧（37.5℃），一直烧到晚上睡觉。Day 3（12 月 15 日）继续全天请假休息。早上感觉身体已经适应了高烧的状态，没有前几日那么蔫，但体温仍在 39.5℃ 附近徘徊。下午排便后转为低烧，并未服用退烧药。Day 4（12 月 16 日）正常上课。不再发烧，有轻微咳嗽和流鼻涕的症状。Day 5（12 月 17 日）正常上课。咳嗽和流鼻涕的症状加重，但没有太大影响。Day 6（12 月 18 日）正常上课。咳嗽和流鼻涕导致头昏脑胀。晚上因咳嗽久久无法入眠。Day 7（12 月 19 日）正常上课。症状与前一天相似。Day 8（12 月 20 日）正常上课。症状开始转轻。Day 9（12 月 21 日）正常上课。抗原测试基本转阴。仍有些许咳嗽。Day 10（12 月 22 日）症状基本消失，食欲恢复。后记人民日报发布的「新冠发病 7 日典型症状过程」还是比较准确的，值得参考。由于我去年在家中准备了一盒布洛芬颗粒，因此并没有陷入到「一药难求」的境地。从发病到痊愈，只消耗了半盒布洛芬颗粒（即 5 包）和两盒连花清瘟胶囊（48 颗），因此无需囤积药品，够用就好。最后，希望各位读者在疫情期间保护好自己，也祝大家身体健康，百毒不侵！"},{"title":"USTC Hackergame 2022 Write Up","date":"2022-10-29","url":"/post/ustc-hackergame-2022-write-up/","tags":["CTF","Hackergame"],"categories":["技术向"],"content":"签到日常改参数。猫咪问答喵中国科学技术大学 NEBULA 战队（USTC NEBULA）是于何时成立的喵？在这个页面中有这样一段介绍：星云战队（Nebula）中国科学技术大学“星云战队（Nebula）”成立于 2017 年 3 月，“星云”一词来自中国科学技术大学 BBS“瀚海星云”，代表同学们对科学技术的无限向往和追求。战队现领队为网络空间安全学院吴文涛老师，现任队长为网络空间安全学院李蔚林、童蒙和武汉。战队核心成员包括了来自网络空间安全学院、少年班学院、物理学院、计算机学院等各个院系的同学，充分体现了我校多学院共建网络空间安全一级学科的特点。战队以赛代练，以赛促学，在诸多赛事中获得佳绩。可知答案为 2017-03。22 年坚持，小 C 仍然使用着一台他从小用到大的 Windows 2000 计算机。那么，在不变更系统配置和程序代码的前提下，Firefox 浏览器能在 Windows 2000 下运行的最后一个大版本号是多少？Google 搜索 windows 2000 firefox 可以搜索到一个帖子：Last version of fireFox to work on Windows 2000?，可知答案为 12。你知道 PwnKit（CVE-2021-4034）喵？据可靠谣传，出题组的某位同学本来想出这样一道类似的题，但是发现 Linux 内核更新之后居然不再允许 argc 为 0 了喵！那么，请找出在 Linux 内核 master 分支（torvalds/linux.git）下，首个变动此行为的 commit 的 hash 吧喵！关于这部分的限制在 fs/exec.c 文件下，那么 git blame 可知这部分是在 dcd46d8 中被修改的。家目录里的秘密VS Code 里的 flag全局搜索 flag{ 可得：rclone 里的 flag在 rclone.conf 里可以找到一个密码，通过在 Google 上搜索可以找到 一份现成的解密代码：跑一遍就出来了：HeiLang打开 VSCode，将 \\| ([\\d]+)\\] = ([\\d]+) 递归替换为 ] = $2\\na[$1] = $2，然后执行脚本即可得到 flag：Xcaptcha在打开验证码页面的一瞬间将这段 JS 脚本塞进控制台里即可。旅行照片 2.0照片分析exiftool 一把梭。LaTeX 机器人纯文本众所周知，LaTeX 有一个 \\input 指令：Flag 到手：flag{becAr3fu11dUd3c5a1b17ffa}。安全的在线测评无法 AC 的题目最开始我打算在程序里读文件，结果不知道为什么写挂了……于是就立马想到了用汇编读文件，代码和动态数据差不多。动态数据查看评测机的源码可以发现 n = 5，那么可以用汇编在编译的时候读文件：企鹅拼盘这么简单我闭眼都可以！手动一个一个试就好啦~后记今年是我打 Hackergame 的第三年了，由于近期学业繁忙（甚至我刚从 CSP-S 考场出来就回来写 Write Up），所以并没有能抽出足够的时间来享受这场比赛了，只能用两天的零碎时间水一点签到题了事，binary 还是一如既往地稀烂……"},{"title":"OIerDb NG —— 新一代的 OIerDb","date":"2022-08-09","url":"/post/oierdb-ng/","tags":["OI","OIerDb"],"categories":["分享境"],"content":"笔者有幸能与 OI 巨神虞皓翔等人合作来共同参与 OIerDb NG 的开发，经过数个月的不断改进，目前项目已经初具雏形，特此写下本篇文章对其进行简要介绍。笔者主要参与了前端用户界面的开发工作，而数据处理部分则主要由虞皓翔完成。OIerDb NG 的新特性纯前端处理 —— 效率更高、可离线使用相比于老版 OIerDb，OIerDb NG 摈弃了传统的「客户端发送查询请求 -> 服务器响应查询请求」的模式，而是采用了纯前端的处理方式 —— 将数据库存储在浏览器的 indexedDB 中，这样在用户查询时无需向服务器发送请求，直接在浏览器端即可处理。这样带来的好处是显而易见的 —— 我们拥有了更快的查询响应速度，同时也减轻了对服务器的压力。至于缺点嘛… 在首次访问网页的时候会下载几 MB 的数据，从统计数据来看，这个过程在大部分情况下最多需要消耗 5 秒左右的时间。在下载好所有页面的代码、数据加载完成后，即使断开网络连接也能正常使用 OIerDb NG 的基础功能 ，可以在断网打模拟赛 AK 之后找点东西看 。查询更灵活 —— 满足用户的不同需求老版的 OIerDb 只能应对两种类型的查询 —— 以选手或者学校为中心的查询。而新版的 OIerDb 在设计之初就希望具备应对更灵活的查询请求的能力，比如「查询『NOIP 2021』中『河北省』的获奖情况」（如上图所示），更进一步的话还可以「查询『NOIP 2021』中位于『河北省』的『石家庄市第二中学』的获奖情况」（不过这种查询目前还没有在用户界面中实现）。开发回忆录在 2021 年 12 月初的一天中午，笔者在 OIerDb 的页面底部发现了 nocriz 的《呼吁广大选手积极参与开发下一代 OIerDb》文章，恰巧笔者在课余时间学习了一些在现在看来非常浅薄的前端技术，于是跃跃欲试地在 12 月 12 号的那天创建了一个新的 GitHub 仓库，并使用模板来提交了 第一个 commit。接下来的几天，笔者利用自己的空余时间来编写代码，终于在 12 月 19 日完成了第一版的 OIerDb NG，并部署到了 Netlify 上。▲ OIerDb NG 的第一版界面。当时笔者初学 React，许多知识仍有待学习，再加之笔者忙于完成学业，因此开发进度异常缓慢，网站的功能也有很多欠缺。第一版完成后没多久，笔者找到了精通 React 的好友 Menci 来帮忙 review 代码。在这个过程中，Menci 提出了许多富有建设性的意见，同时对项目整体进行了一番调整，使其更加现代化、工程化。笔者也从中学到了很多知识。之后笔者边实践边学习，还从 LibreOJ 的前端中抄来了一些代码，比如手机端的导航栏。慢慢地，OIerDb NG 上线了 nocriz 的文章中提到的大部分功能（点击图片可以前往对应页面）：▲ 基础 / 高级搜索▲ 搜索页选手信息卡片▲ 地区信息学奥林匹克竞赛选手 / 学校排名▲ 学校 / 比赛详情页面OIerDb NG 的不足之处尽管 OIerDb NG 有了一个还算可以的开始，但仍然存在诸多不足之处。例如，对于网络速度较慢的用户，加载数 MB 的数据可能仍需要十几秒甚至数十秒。并且，即使是一些小更新也需要重新从服务器拉取全量数据，对用户与服务器的流量都是一种浪费。再比如一些用户可能需要指向性更强的查询条件，目前还没有找到一个比较好的办法来添加到用户界面中。除了这些之外，还有一些其他的问题存在。这些问题由于团队内的各位开发者都在现实生活中有着自己的工作、学习任务，无法去逐一解决。笔者希望广大对信息学竞赛感兴趣的朋友们能或多或少地参与进 OIerDb NG 的开发，共同为信息学竞赛社区做出贡献。后记感谢 nocriz 建立的 OIerDb 网站，为国内的信息学竞赛社区做出了巨大贡献。也感谢 yhx-12243、Menci 参与 OIerDb NG 的开发，完成了许多工作。最后的最后，给 OIerDb-ng/OIerDb 求一波 Star~"},{"title":"拥抱 Atomic CSS-in-JS","date":"2022-07-23","url":"/post/atomic-css-in-js/","tags":["前端","CSS","Atomic CSS","Tailwind"],"categories":["技术向"],"content":"当下，Atomic CSS 愈发受到人们的关注。相比于传统 CSS 编写方法中每个组件对应一个 CSS 类，使用了 Atomic CSS 以后，每一个 CSS 类都唯一对应了一条独立的 CSS 规则，随着组件数量逐渐增加、能复用的 CSS 规则越来越多，最终的 CSS 产物体积也会下降许多，使得网页的加载速度能够产生一个质的飞跃。CSS 编写方法的发展历程在介绍 Atomic CSS 之前，让我们先来回顾一下 CSS 编写方法的发展历程。SMACSSSMACSS（Scalable & Modular Architecture for CSS），是由 Jonathan Snook 提出的 CSS 理论。其主要原则有 3 条：Categorizing CSS Rules（为 CSS 分类）Naming Rules（命名规则）Minimizing the Depth of Applicability（最小化适配深度）规则分类SMACSS 将规则分为了五类：Base（基础）、Layout（布局）、Module（模块）、State（状态）、Theme（主题）。基础（Base） 规则里放置默认样式。这些默认样式基本上都是元素选择器，不过也可以包含属性选择器，伪类选择器，孩子选择器，兄弟选择器。本质上来说，一个基础样式定义了元素在页面的任何位置应该是怎么样的。布局（Layout） 规则将页面拆分成几个部分，每个部分都可能有一到多个模块。顾名思义，这个分类主要用来做页面的整体或其中一块区域的布局。模块（Modules） 是我们的设计当中可重用，可模块化的部分。插图，侧边栏，文章列表等等都属于模块。状态（State） 规则定义了我们的模块或者布局在特殊的状态下应该呈现怎样的效果。它可能定义模块、布局在不同显示屏上应该如何显示。也可能定义一个模块在不同页面（例如主页和内页）中可能呈现怎么样的效果。主题（Theme） 规则和状态规则类似，定义模块或者布局的外观。很多网站的「深色模式」「换肤」等等功能就是这样实现的。命名规则将规则分成五类之后，还需要命名规范。命名规范能够使得我们立刻了解到某个样式属于哪一类，以及它在整个页面中起到的作用。在一个大型项目中，我们可能会将一个样式分割成几个文件，这个时候命名约定能够使得我们更容易知道这个样式属于哪个文件。推荐使用前缀来区分布局、模块和状态等等规则。比如对布局规则使用 layout- 前缀，对状态规则使用 is- 前缀就是一个不错的选择。最小化适配深度尽量不要依赖文档树的结构来编写样式。这样可以让我们的样式更加灵活，并且容易维护。BEMBEM（ Block Element Modifier）是由 Yandex 团队提出的一种前端 CSS 命名方法论。它是一个简单又非常有用的命名约定。让前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确，而且更加严密。BEM 命名约定的模式是：block 代表了「块」，用于组件本体。element 代表了「块」中的某个「元素」（也可以叫做「子组件」），是块构成的主要成员。modifier 代表了「块」的修饰符，表示不同的状态和版本。使用 -- 做区分，适用于「块」和「元素」，分别称之为「块修饰符」和「元素修饰符」。命名的不同部分之间之所以使用 __ 和 -- 分割，是因为如果某部分中如果出现了多个单词需要使用 - 分隔，这样可以避免造成混淆。CSS Modules随着时代的发展，一个大型前端工程中的 CSS 类名越来越多，此时难免会出现类名冲突的情况，此时 CSS Modules 应运而生 —— 它通过为 CSS 类名添加 Hash 等方式来产生唯一的名称来防止冲突的产生。CSS Modules 并不是 CSS 官方的标准，也不是浏览器的特性，而是使用一些构建工具，比如 Webpack，对 CSS 类名和选择器限定作用域的一种方式。Utility-First CSS当传统大型项目使用的 CSS 方法论还都大多是上方提到的 OOCSS、SMACSS、BEM 等等主要聚焦在「关注点分离」的「语义化 CSS」方案的时候，Utility-First 的 CSS 概念脱颖而出、逐渐受到社区的关注。而这之中最为被人熟知的、也最典型的就是 Tailwind CSS 了。Utility-First CSS 不像 Semantic CSS 那样将组件样式放在一个类中，而是为我们提供一个由不同功能类组成的工具箱，我们可以将它们混合在一起应用在页面元素上。这样有几个好处：不用纠结于类名的命名；功能越简单的类，复用率越高，可以减小最终的打包大小；不存在全局样式污染问题；等等。但也存在一些不足：class 属性的内容过长；存在 CSS 规则插入顺序相关的问题；不能通过语义化类名得知组件的作用；不压缩的话构建产物体积过大。新时代，来临了 —— Atomic CSS-in-JS在前文介绍的 Utility-First CSS 的基础之上更进一步，Atomic CSS 便映入了人们的眼帘。Atomic CSS 背后的思想与以往的「关注点分离」的思想可以称得上是背道而驰了。使用 Atomic CSS 时实际上将结构层和样式层耦合在了一起，这样的方式在现代 CSS-in-JS 的代码库中基本上得到了广泛认可，下文将会进行进一步的介绍。Atomic CSS 可以看作是 Utility-First CSS 的极致抽象版本，每一个 CSS 类都对应一条单一的 CSS 规则。可面对如此繁复的 CSS 规则，手写 Atomic CSS 的类名并不是一个好的办法。于是 Atomic CSS-in-JS 应运而生，它可以看作是「自动化的 Atomic CSS」：无需手动设计 CSS 类名；能够提取页面的关键 CSS，并进行代码拆分；可以解决经典的 CSS 规则插入顺序的问题。传统 CSS 编写方式的缺点Christopher Chedeau 一直致力于推广 React 生态系统中 CSS-in-JS 理念。在很多次演讲中，他都解释了 CSS 的几大问题：全局命名空间依赖无用代码消除代码压缩共享常量非确定性（Non-Deterministic）解析隔离虽然 Utility-First CSS 和 Atomic CSS 也解决了其中的一些问题，但它们无法解决所有问题（特别是样式的非确定性解析）。举个例子：Tailwind CSS 会在生成时生成出来许多无用代码，导致样式文件体积的增长，看看下面这份代码：生成出来的样式文件长这个样子：可以看到这份文件中包括了许多的无用代码，比如重复的 content: var(--tw-content)。更小的构建产物传统的 CSS 编写方法无法复用组件间重复的 CSS 规则，比如下图中高亮的几条规则各自躺在它们对应的 CSS 类中：这样会导致 CSS 产物大小与项目的复杂程度和组件数量线性正相关。但使用 Atomic CSS 之后，这些规则被提取出来进行复用：随着后期组件数量逐渐增加、能复用的 CSS 规则越来越多、最终 CSS 产物大小与项目复杂程度呈对数关系：Facebook 分享了他们的数据：在旧网站上，仅登录页就需要加载 413 KiB 的样式文件，而在使用 Atomic CSS-in-JS 重写后，整个站点只有 74 KiB 的样式文件，还包括了深色模式。虽然在使用 Atomic CSS 之后，HTML 的体积会显著增大，不过由于这些类名的高冗余度，可以利用 gzip 来压缩掉很大一部分体积。处理 CSS 规则的插入顺序让我们再来回顾一遍这个经典的 CSS 规则插入顺序的问题：我们都知道，最后生效的样式不是最后一个类名对应的规则，而是样式表中最后插入的规则。那么，如何在 CSS-in-JS 中处理这个问题呢？通用的做法是在生成阶段就将冲突的规则过滤掉，以避免产生冲突。比如下面这个组件：过滤后组件的实际样式如下：而如果将组件样式中的 styles.card 和 styles.profileCard 调换一下顺序，过滤之后的样式就变成了这样：但 CSS 中有一些简写规则，如果只按照规则名称来处理显然是不行的。有的库强制开发者们不使用简写规则来避免这个问题，而另外的一些库则将这些简写规则展开成多条规则后再进行过滤，比如 margin: 10px 可以被拆成 margin-top: 10px、margin-right: 10px、margin-bottom: 10px、margin-left: 10px 四条独立的规则。经典实现Atomic CSS-in-JS 实现有运行时（Runtime）和预编译（Pre-Compile）两种。运行时（Runtime）的优点在于可以动态生成样式，相比于下文中采用预编译方法的库来说灵活度高了不止一点半点。其缺点则在于 Vendor Prefix 等操作需要在 Runtime 执行，因此 Bundle 中必须携带相关依赖导致体积增大。预编译（Pre-Compile）的优点则在于无需将相关依赖打包发送给客户端，改善了性能。而缺点则是预编译的过程高度依赖静态代码分析，所以难以实现动态样式生成与组合。StyletronStyletron 是 Uber 公司开发的一个较为典型的运行时 Atomic CSS-in-JS 库，驱动了 Uber 的官网和 H5 页面。Styletron 还提供了一套 Styled Components 的实现，可以通过下面的方式使用：还可以根据 prop 的值来动态生成样式：Fela与 Styletron 同为运行时 Atomic CSS-in-JS 库的还有沃尔沃汽车前技术主管开发的 Fela，驱动了沃尔沃汽车官网，Cloudflare Dashboard 和 Medium 等众多网站。vanilla-extractStylex 是 Meta（原 Facebook）的一个尚未开源的预编译 Atomic CSS-in-JS 库。不过由于 Meta 迟迟不开源 stylex，社区中已经涌现出了数个基于其思想的开源实现，其中以 vanilla-extract 最为知名。style9基于 stylex 思想的预编译 Atomic CSS-in-JS 库除了 vanilla-extract 之外还有 style9 和 styleQ。compiled将视线从 stylex 系列中转移开来，Atlassian 还编写了一个名为 compiled 的预编译 Atomic CSS-in-JS 库，但在笔者的实际使用过程中坑点较多，可能会导致样式的重复生成，并且其对 TypeScript 的支持也不尽人意，不过其代码实现中的许多技巧还是有借鉴价值的。Styled Componentscompiled 依靠一个 babel transformer 来对代码进行转换以插入样式。在 packages/react/src/styled/index.tsx 文件中可以看到，@compiled/react 包含了一个导出了一个名为 styled 的对象，这个对象一旦被访问就会立刻抛出错误，提示 transformer 没有正常工作：那么可以看出，styled 会被 transformer 替换掉，对应的入口逻辑在 packages/babel-plugin/src/babel-plugin.tsx 文件中：这段代码记录了 @compiled/react 的引入情况，为下方的处理提供了便利。对 TaggedTemplateExpression 和 CallExpression 的处理，正好对应了文档中的两种不同调用方式：跟随着 visitStyledPath 函数的定义，可以找到 packages/babel-plugin/src/styled/index.tsx 文件。再来看提取样式信息的函数 extractStyledDataFromNode，这个函数根据不同情况使用不同的方法提取样式信息：构建新节点的函数被定义在 packages/babel-plugin/src/utils/ast-builders.tsx 文件中：至于构建节点的操作，则是较为简单的字符串拼接：这样兜兜转转一圈下来，就将使用了 styled 方法生成的组件的样式抽离出来，变成了一个 compiled 的 Atomic CSS-in-JS 组件。css Propcompiled 首先 增加了 css prop 的 TypeScript 定义，然后和 styled component 一样在 babel transform 的时候对这个 prop 进行特殊处理：相比于 styled component 繁复的处理方式，css prop 的处理看起来简洁了许多：构建新节点的 buildCompiledComponent 函数被定义在 packages/babel-plugin/src/utils/ast-builders.tsx 文件中，这个函数主要完成了以下操作：合并现有的 className；处理 css prop 中的样式；生成 compiled 的 Atomic CSS-in-JS 组件。这样就将组件的 css 参数拆成了两部分 —— 静态的样式和附加到原组件的 className 参数值。其他微软最近开源的 Griffel 既支持运行时模式，又支持预编译模式，同时拥有着更佳的 TypeScript 支持，不失为一个好的选择。这个库目前驱动了微软官方的 Fluent UI。后记以上就是本文要介绍关于 Atomic CSS 的全部内容了。虽然 Atomic CSS-in-JS 是 React 生态系统中新涌起的一股潮流，但在使用前一定要三思 —— 这个方案到底符不符合项目的需求，而不是盲目地「为了使用而使用」，给将来的维护工作埋雷，但如果使用它能带来显而易见的好处，那么何乐而不为呢？笔者才疏学浅，只是在前人的基础之上做了一些微小的工作而已，文章中如有错误欢迎在评论区指正。感谢 Sukka 大佬在本文编写过程中的指导。感谢 Byran Lee 指出本文中的错误。参考资料Atomic CSS-in-JS，Sébastien Lorber，2020 年 4 月 27 日。聊聊原子类（Atomic CSS），Mongkii，2021 年 7 月 26 日。值得参考的 CSS 理论：OOCSS、SMACSS 与 BEM，ACGTOFE，2014 年 9 月 30 日。Utility-First Fundamentals，Tailwind CSS。"},{"title":"使用 GitHub Actions 自动申请与部署 SSL 证书","date":"2022-05-15","url":"/post/actions-ssl-cert/","tags":["SSL","GitHub Actions","ACME","阿里云"],"categories":["技术向"],"content":"对于一个有很多服务器的人来说，在不同服务器上同步 SSL 证书是一件麻烦事。笔者尝试过很多种方式，最后在 Menci 的推荐下选定了使用 GitHub Actions 来自动申请、续期 SSL 证书，并自动推送到各个服务器上。本博客的证书也是使用这种方式进行签发、部署的，可以点击浏览器地址栏上的按钮查看证书。申请证书前期准备首先请在本地（或自己的服务器上）成功使用 acme.sh 的 DNS-01 验证方式成功申请一次证书，如果不会操作的话可以参考 烧饼博客的教程 来进行。这个过程包括：向 CA 注册 ACME 账户（如果使用 Let’s Encrypt 则会自动进行，详细步骤请参阅 acme.sh 的 Wiki）。通过环境变量指定 DNS 提供商的凭据，用于添加/删除 ACME DNS-01 认证所需的 TXT 记录。确认证书申请可以成功，为后续调试排除可能的问题。第一次申请证书后，CA 的 ACME 账户凭据将被存储到 ~/.acme.sh/ca 中，DNS 提供商的凭据将被存储到 ~/.acme.sh/account.conf 中。将它们打包并使用 Base64 编码存储，以备在 GitHub Actions 中使用：将输出内容添加到 GitHub 仓库的 Secrets 中。注意不要复制输出中的多余信息。自动化如果没有特殊需求，可以使用 Menci/acme 来简单地申请证书：如果需要高度自定义 acme.sh 的参数，比如为不同的域名设置不同的 DNS 提供商，可以使用下面的方式手动编写命令来执行：上传证书至仓库部署证书在申请证书的 Job 执行完成后，可以执行一系列其他的 Job 来将证书部署到各个服务器或云服务。服务器可以使用 easingthemes/ssh-deploy 来使用 rsync 将证书同步到服务器上。同步完成后再使用 appleboy/ssh-action 远程执行命令重载 Nginx / Apache。需要注意的是，重载 Nginx / Apache 的命令需要 root 权限才能执行，可以采用只允许部署用户以 root 权限执行重载脚本的方式来避免出现安全问题。在 /opt/hooks 目录下新建一个文件 reload-nginx.sh，内容如下：然后新建一个名为 actions-cert 的用户，然后在 /etc/sudoers 文件中添加以下内容：这个配置可以使 actions-cert 用户免密码以 root 用户的权限执行 /opt/hooks/reload-nginx.sh。最后使用 chmod 755 /opt/hooks/reload-nginx.sh 命令将 reload-nginx.sh 文件设置为可执行，同时禁止非所有者对其进行写入操作。如果服务器位于 NAT 后，或者禁止了 SSH 连接，还有两个方法可以将证书部署到内网服务器上：将证书先部署到有部署条件的服务器上，然后再在内网服务器上使用 rsync 从部署好的服务器上拉取证书。将证书上传到 Azure Key Vault 等托管服务中，再在服务器上按照 Menci 的文章 中的教程拉取即可。阿里云阿里云的 SSL 证书服务 支持上传自定义证书，该证书可以用于 阿里云 CDN。阿里云暂未提供将证书部署至 OSS 的 API，建议 OSS 用户使用 CDN 回源 OSS 来代替。使用 Menci/deploy-certificate-to-aliyun 将证书部署到阿里云：其中 certificate-name 指定上传的证书在证书服务中的名称（将自动替换旧版本），cdn-domains 指定需要将该证书部署到的 CDN 域名列表（用空白字符隔开）。建议使用子账户 Access Key，为其赋予以下权限（并按需使用资源组隔离）：AliyunYundunCertFullAccessAliyunCDNFullAccessAliyunPCDNFullAccessAliyunSCDNFullAccessAliyunDCDNFullAccess腾讯云使用 renbaoshuo/deploy-certificate-to-tencentcloud 将证书部署至腾讯云 CDN：其中 cdn-domains 指定需要将该证书部署到的 CDN 域名列表（用空白字符隔开）。建议使用子账户 API 密钥，为其赋予以下权限（并按需使用资源组隔离）：QcloudCDNFullAccess自建 GoEdge CDN使用 renbaoshuo/deploy-certificate-to-goedge 将证书部署至自建的 GoEdge CDN：注：在部署前需要手动上传一次证书以便获取证书 ID。证书 ID 可以在「证书文件下载」处的 URL 参数中找到。完整例子这个 Action 完成了以下操作：申请证书，并上传到仓库的 certs 分支。在申请证书后将 certs 分支中的证书部署到服务器上。杂项部分情况下，GitHub Actions 中的 GITHUB_TOKEN 只有 Read repository contents permission，而本文中的 Actions 要求这个 Token 具有 Read and write permissions，那么需要在仓库的 Settings > Actions > General 页面的底部赋予其写入权限，如图所示：设置好后点击 Save 按钮即可。参考资料使用 GitHub Actions 自动申请与部署 ACME SSL 证书，Menci，2022 年 5 月 11 日。对原文章内容的使用已经过作者同意。使用 acme.sh 配置自动续签 SSL 证书，烧饼博客，2022 年 2 月 3 日。文章头图由 Menci 制作，使用已经过授权，在此表示感谢。"},{"title":"强制卸载三星应用分身中的残留应用","date":"2022-04-30","url":"/post/uninstall-samsung-extra-dual-app/","tags":["手机","三星","应用分身"],"categories":["便签格"],"content":"前一阵子不小心手抖把手机里的 Chrome 卸载了，然后就装不上了。▲ 安装时的报错信息这个迷惑的报错信息误导了我很长时间，再加上我在学校里拿不到手机，于是 3 月初的问题一直拖到了 4 月底才解决。拿到手机之后我突然想看看手机里有什么不再需要的应用需要卸载，清理清理手机的存储空间。于是我翻到了这么一个应用：▲ 应用图标右下角的橙色标志代表了这是一个安装在应用分身中的应用但是我手机里的应用分身只能安装两个应用：微信和 QQ。所以问题应该就是出在了这里。我试着点击了下方的「卸载」按钮，但提示卸载成功并重启后，这个 Chrome 浏览器依然静静地呆在手机里，丝毫没有要离开的意思。我在网上找到了一篇名为《技术 | One UI 不熔断，让应用分身双开任何应用》的文章，里面讲解了如何在应用分身中安装其他应用的方法，还提到了应用分身其实是以 Android 多用户的形式实现的，分身中的所有应用都安装在了名为 DUAL_APP 的用户下。知道了这些信息，事情就好办得多了，直接用 ADB 把它搞掉就行了（ADB 下载地址）。在手机上开启开发者模式 后，在「开发者选项」中允许「USB 调试」，然后使用数据线将手机连接到电脑，这样就可以在电脑上通过 ADB 操控手机了。使用下面的命令来查看手机中的用户列表：▲ 图中被红色方框框住的就是应用分身对应的用户了然后使用下面的命令来查看分身中的应用列表：▲ 图中被红色方框框住的就是应用分身中的 Chrome 浏览器的包名了那么就可以卸载分身中的 Chrome 浏览器了：卸载完成后，就可以通过你喜欢的方式安装应用了。我这里同样使用了 ADB 来进行 Chrome 浏览器的安装操作：最后不要忘记关掉「USB 调试」功能，以免产生安全风险。"},{"title":"2022 年常中集训游记","date":"2022-02-28","url":"/post/travel-scz-2022/","tags":["游记","OI"],"categories":["乐生活"],"content":"这是我第一次出省参加外校集训。此行的目的地是江苏省常州高级中学，于 1907 年建校，截止本文写作时该校在「OIerDb 全国信息学竞赛学校排行榜」上位列第九。启程走前 2 天，也就是 2 月 18 日，我们才正式确定要动身去常中参加集训，当时火车票余票已经所剩无几了，索性直接买了一等座，省时省力，就是有点费钱。一等座确实比二等座舒服了很多，还有免费的零食、饮料、矿泉水。不过，要是下次可以自己挑的话，我还是选二等座，经济实惠。晚饭在火车上买了份「豚骨面」，花了 39 元，除了汤有点发酸（可能是醋倒多了）以外别的没啥毛病。见闻住宿由于学校没有给我们提供宿舍，所以我们两人成团一起住宾馆，每间 160 元/晚。环境还行，凑合着住。食堂▲ 外景▲ 饭卡食堂的餐食比假期的二南好多了，但我觉得赶不上开学时候的二南食堂。蹭网常中并没有给我们分配上网账号，所以要么用打开文件资源管理器都能死机的台式机上网，要么用自己的笔记本离线操作。毛主席说过：「自己动手，丰衣足食。」所以我们把台式机的网线拔下来插到了自己的电脑上，并且手动配好了 IP 地址，成功解决了上网问题。蹭网期间出一个小插曲：有人拿自己配好的网开热点给大家共享网络，结果被系统自动断网并且封掉设备了…校园进入校园。标志性的「SCZ」标识。校园一角。教学楼外景。小亭子。 学校旁边的 天宁宝塔。返程来的时候在火车上吃的是面条，于是返程的时候买了一盒「红烧牛肉饭」，花了 40 元，味道也不错。花絮回学校的最后一段路是坐公交回去的。到站了，老师带着我们下了车，下车后才发现 zzq 还在车上，于是我们眼睁睁地看着公交车继续前行，而 zzq 还不知道他已经坐过站了…后记在校期间的学习、交流等活动均属保密范畴，在本文中不做叙述。希望以后还能有这么好的机会参加外出集训。"},{"title":"再见，2021 —— 我的 2021 年度总结","date":"2021-12-31","url":"/post/goodbye-2021/","tags":["年度总结"],"categories":["乐生活"],"content":"时光飞逝，2021 年就这么过完了。在这一年，我经历了很多，也学到了很多。现在，让我坐在电脑前，用文字的方式将这一切都记录下来…本文内容按照发生时间先后排序。大事记封校的日子2021 年 1 月 3 日，石家庄疫情 爆发，石家庄市进入战时状态（新华网）。次日清晨，学校里传开了一条爆炸性新闻 —— 封校了！中午下课后，大家纷纷奔向学校超市，开始抢购商品。由于初三下课最晚，等我们奔向超市的时候，超市空得连价签都没了。我并没有去抢，因为我在元旦假期返校的时候带了不少东西，足够我吃了。然而超市一连好几天无货可卖，这使得我们都开始担心 —— 万一哪天没饭了怎么办？而这时学校终于传来了好消息：学校和政府终于为超市协调来了货源，可以继续上架面包、牛奶和生活必需品了。不过我去食堂的时候倒是发现了一个以前从未出现的奇妙现象，那就是肉给的比菜多。我举一个典型事例：我去食堂买板面吃，食堂阿姨给我盛了半勺子肉，然后从旁边的菜盆里夹了三根很小的菠菜叶放到了碗里。除此之外，免费续米饭的量也变得越来越少。不过有的吃我就知足了，没必要那么挑。周末学校还给放了电影，周日按照正常留宿作息多睡了会。封校的第一周就这么过去了。谁也没想到封校会持续那么久，于是大家都在学校呆着，在学习的同时等待外界的好消息。有一次教育处的尹主任值我们班晚自习，我正好坐第一排，作业写完了没事干，又去不了高中部，便和老师聊了起来。我向老师抱怨初三的学生觉不够睡，而初一的学生休息时间太多以至于睡不着觉，希望能多给初三的学生点休息时间，不然上课得困死。听完以后，老师给年级主任发了条微信。没想到，第二节晚自习下课，年级就广播说以后每周六都让初三的多睡一小时。多亏了尹主任的反馈，我终于能补个好觉了，上课也终于不用再半睡半醒了。就这样又过了大概二十天，外面终于传来了好消息 —— 解封了！听到解封的消息时，我的心情很复杂 —— 我的健康码是黄色的。这代表即使学校解封了，我也回不了家。好在解封的第二天，我的健康码变回了绿色，当天下午我被接回了家，一切都结束了。中考6 月 21 日，我迎来了人生中的第一次大考 —— 中考。 说实话，头进考场我还是有一点点发慌的，因为我的知识大多都是退役以后现补的。物理的力学还没补，语文的古诗文刚背完原文没背课注和赏析，政治看都没看…总之没好好复习就是了。就这样硬着头皮进了考场，考啥算啥吧。考完以后便是漫长的等待。7 月 3 日 0 时，终于出分了：中考试卷的难易度还算适中，考得不算特别差，全市三千多名。由于疫情的原因，石家庄并没有举行体育和实验的考试，所以中考总分只有 610 分。这对于体育不是很好的我来说是一个救命稻草，要不然我得比别人低至少 10 分，就没学可上了。中考成绩出来以后，我向我的竞赛教练咨询了一下我的成绩，教练告诉我没啥问题，能上二南。 居然混进了一个省重点高中… 失学儿童有学上了！上了高中以后因为学习竞赛，被分到了省理科竞赛实验班，大概是全校最好的班级了吧。只不过因为班里其他人都是各地状元，所以我的文化课被同学们吊起来暴锤。总体还行。只是没想到因为这些事就被别人称为了「别人家的孩子」，当不起当不起，毕竟我是真的菜…竞赛今年的竞赛成绩并不理想。CSP 拿了个省二，再多考 19 分就有省一了。NOIP 打算冲省一，结果考试的时候电脑蓝屏了… 以后再也不用画图当草稿纸了！不过和自己的好朋友们在一起努力还是很开心的~丢人的练习详情可以在 GitHub 上查看：Compare 2020…2021 - renbaoshuo/OI-codes。一些零碎GPG今年年初，我开始使用 GPG 来对我的消息和提交签名。我的 GPG 公钥可以在 GitHub 上找到。HUSTOJ年初的时候给 HUSTOJ 贡献了两个主题：SYZOJ 和 MDUI。因为 SYZOJ 主题被设置为了默认主题，所以年末的时候还被教练找上门问 HUSTOJ 相关的问题来了。计算机网络从寒假开始我开始接触计算机网络相关的知识，并且在 DN42 和公网上进行了相关实践。Pure 主题这个主题移植自 imhanjie/gridea-theme-pure。源代码公开在 GitHub 上。我的 Yubikey体验良好，于是年末又入了个 CanoKey 作为备用 Key。OIerDb NG这是个从 12 月份刚刚开始搞的项目，目前正处于开发期，由我和 Menci 共同维护。计划中 OIerDb NG 将会最终替代现在的 OIerDb。OIerDb NG 的前端缓存式查询方法在提高查询速度的同时还省去了后端服务器的处理。代码开源在 GitHub 上，欢迎 Star ~其他其实里面有好多都是贡献给自己的私有仓库了。可以直接去 我的 GitHub 主页 上看公开的贡献详情，懒得再多说了。后记2021 年一转眼就过完了，有很多新收获，同时也有很多遗憾，就不再多说了。希望自己 2022 年会过得更好吧，也祝读者们新年快乐。本文封面图片来自美国驻华使领馆官方推特账号，其他图片均为本人所拍摄或截取。"},{"title":"浅谈静态博客的自动部署方案","date":"2021-11-10","url":"/post/auto-deploy-static-blog/","tags":["GitHub Actions","Hexo","自动化","Vercel","Netlify","Cloudflare"],"categories":["技术向"],"content":"笔者最近阅读了 ChrAlpha 大佬的 初探无后端静态博客自动化部署方案 这篇博文，发现其中的一些内容已经过时，所以我决定写下这篇博文来简单说一说现在（2021 年）静态博客的自动部署方案。笔者 9 月中旬将自己的 OI 博客（oi.baoshuo.ren）迁到了 GitHub 上并使用 GitHub Actions 进行持续部署，在感觉良好以后又在 10 月初将自己的主博客（blog.baoshuo.ren）也迁移到了上面，这期间我尝试了多家 CI/CD 服务，并总结了一些配置要领。本文中使用的 NodeJS 包管理器为 yarn 。GitHub ActionsGitHub Actions 是笔者最常用的 CI/CD 服务，没有之一。关于 GitHub Actions 的介绍可以查看 GitHub Actions 官网文档 和阮老师的 GitHub Actions 入门教程 。配置 GitHub Actions 是非常方便的，无需绑定任何第三方平台，仅需在仓库中新建一个 .github/workflows/*.yml 即可。Hexo 核心团队成员之一 Sukka 大佬在他的 将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录 一文中强烈建议不要使用任何 Hexo 的 GitHub Action ，把 Hexo 当成一个普通的依赖 NodeJS 的构建程序，遵照这个思路编写配置文件即可。该工作流的大体步骤如下：检出仓库中的源文件到工作目录安装 NodeJS 和 yarn 包管理器，如果使用的是 npm 包管理器请自行修改。安装依赖。构建站点。部署到 GitHub Pages 。在构建完成后会发现文章的更新时间出现了错误，可以在生成前添加下面这步来将文件的修改日期更正为该文件最后一次 commit 时的时间。当然，为了让 git 有日志可寻，还得在检出的时候顺带把所有提交历史一并拉下来，指定 fetch-depth 就能做到：然后开启 GitHub Pages 功能即可访问到构建好的站点了。Cloudflare Pages如果觉得 GitHub Actions + GitHub Pages 比较麻烦的话，才推出不久的 Cloudflare Pages 或许是一个不错的选择。前往 CloudFlare 管理面板 登录账号后即可在右侧找到「网页」或者「Pages」功能的入口。点击新建按钮，选择要使用的仓库，点击下一步。Cloudflare Pages 的构建配置模板中并没有给出 Hexo 的模板，所以需要自己填写：完成之后点击确定就可以开始构建站点了。构建完成后，访问分配的 pages.dev 子域名即可查看构建好的站点。可以在「自定义域」选项卡中添加自定义域名。NetlifyNetlify 是一家为静态网站提供托管服务的平台，有一定的免费额度，对于小型站点来说使用免费套餐就足够了。首先登陆账号，点击「New site from Git」按钮新建一个站点。可以看到 Netlify 自动识别出了博客使用的框架并且填充好了构建命令，接下来只需要点击下一步即可。新建站点完成以后可以在「Domain Settings」页面中修改默认分配的 netlify.app 子域名，并添加自定义域名。VercelVercel 是一个类似于 Netlify 的静态网站托管平台（Vercel 也支持托管 Serverless 函数，不过不在本文的讨论范围内）。绑定好 GitHub 账号后导入一个新的项目即可。Vercel 也和 Netlify 自动填充好了构建命令，如果没有特殊需求可以直接点击下一步。可以在项目的域名设置中绑定自定义域名。参考资料初探无后端静态博客自动化部署方案，ChrAlpha，2020 年 2 月 14 日。Finding files older than certain dates in Git repository，Scott Weldon (on Stack Overflow)，2017 年 2 月 7 日。将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录，Sukka，2020 年 6 月 7 日。"},{"title":"USTC Hackergame 2021 Write Up","date":"2021-10-30","url":"/post/ustc-hackergame-2021-write-up/","tags":["CTF","Hackergame"],"categories":["技术向"],"content":"签到点击 Next 键，发现页面的 URL 后多了个 ?page=1 ，结合第一个页面中的 1970-01-01 字样，可以判断出来 page 参数应为比赛期间的 Unix 时间戳。示例：进制十六——参上可以照着 16 进制数据搞一搞，然后 flag 就出来了：去吧！追寻自由的电波下载音频之后使用 Adobe Audition 进行变速即可。旅行照片从图片中可以看出拍摄者在 14 层，并且楼下有一个蓝色的肯德基，那么使用 Google 搜索关键词 海洋 蓝色 KFC 可以得到以下结果：从照片的描述中可以得到这家肯德基位于秦皇岛新澳海底世界。在百度地图上可以找到这家肯德基的电话、详细位置。同时按照卫星图可以推断出拍摄者所在的方向，进而推断出拍摄的大致时间。flag 获取成功。FLAG 助力大红包查看点击助力按钮后的浏览器请求可以发现请求时有一个名为 IP 的参数，尝试修改这个参数发现会报错提示前后端检测 IP 不一致，那么考虑添加 X-Forwarded-For 头伪造经过代理的来源 IP 地址即可。比赛平台的速率限制为每秒最多请求一次，所以在每次请求后还需要等待 1 秒。猫咪问答 Pro Max2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（sec.ustc.edu.cn）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？Wayback Machine 是个好东西啊。（页面存档）中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？LUG 官网上直接搜就出来了。但实际上的答案应该是 5 ，可能是官网没更新最新信息。中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？谷歌是你的好朋友。 Hackergame 2020 「猫咪问答++」 flag 。可以看到正确答案为 Development Team of Library 。在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？可以在 the record of the proceedings of SIGBOVIK 2021（页面存档）的 212 页找到这篇论文。不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？搜索关键词：IETF Protocol Police可以搜到这个「搞笑 RFC」：Establishing the Protocol Police ，在第 6 节中有相关介绍。正确答案应为 /dev/null 。卖瓜最开始拿到题我先想的是能不能用负数凑，结果发现不行，于是考虑溢出。试了试发现使用 6 斤瓜无法触发溢出，而使用 9 斤瓜的就可以触发溢出了。写了个脚本跑一跑，试出来了几个负数，挨个试了下发现放 2e18 个 9 斤瓜可以凑到 20 斤。然后在计算器里算了一下，只需要加 6 斤的瓜和 9 斤的瓜各 29782938247303441 个就能让称的显示变成 -1 。接下来放 2 个 6 斤瓜和 1 个 9 斤瓜就能拿到 flag 了。透明的文件本题与 ANSI Escape Code 有关。首先需要将文件中的 [ 替换成 \\033[ ，然后再找一个支持显示 ANSI 控制码的终端输出。然后发现一片空白，啥也没有。捣鼓到快怀疑人生才发现终端上的某些字符被遮挡了，进而想到这个脚本可能清除了终端上某些地方的字符来显示 flag 。先编写一个复读函数用来填满终端：再配合上方替换好的文件输出即可，效果如图。Amnesia轻度失忆使用 putchar() 函数即可解决此问题。图之上的信息可以使用 __schema 字段查询所有存在的类型：发现一个名为 GUser 的类型，再构造一个语句查询类型结构：顺便获取了下 GNote 类型的结构：进行查询即可得到 flag ：后记今年拿的名次比去年的高，感觉在这一年里自己的 web 水平有很大的提升，但 math 还是一如既往地爆了零，和我的数学中考成绩一样的烂。以后如果有时间的话逆向、汇编什么的也都要学一学，不然的话每次一看见 binary 就有点不知所措、无从下手属实不太好。推荐阅读：USTC Hackergame 2020 Write Up。"},{"title":"浅谈跨域资源共享（CORS）","date":"2021-10-02","url":"/post/cors/","tags":["Web","HTTP","JavaScript"],"categories":["技术向"],"content":"跨域资源共享（CORS）是一种基于 HTTP 头来让网页的受限资源能够被其他域名的页面访问的一种机制。通过该机制，页面能够自由地使用不同源（cross-origin）的图片、样式、脚本、iframes 以及视频。在通常情况下，一些跨域的请求（特别是 ajax）会被同源策略（same-origin policy）禁止。而 CORS 定义了一种方式，可以允许 Web 应用服务器进行跨源访问控制，从而使得跨源数据传输得以安全进行。目前几乎所有现代浏览器都支持 CORS ，可以在 MDN 上找到有关浏览器兼容性的信息。浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。这两个术语并不属于 Fetch 规范。简单请求某些请求不会触发 CORS 预检请求。本文中称这样的请求为「简单请求」。定义若请求满足所有下述条件则该请求可被视为「简单请求」：请求方法为 HEAD，GET 或 POST 。除了被用户代理自动设置的字段以及在 Fetch 规范中被定义为 禁用头名称 的字段之外，HTTP 头信息只允许包含 Fetch 规范定义的 对 CORS 安全的首部字段集合 ：AcceptAccept-LanguageContent-LanguageLast-Event-IDContent-Type 仅限于三个值：application/x-www-form-urlencoded、multipart/form-data 或 text/plain请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。请求中没有使用 ReadableStream 对象。简单请求的设计是为了兼容表单（form），因为历史上表单就一直可以发出跨域请求。基本流程对于简单请求，浏览器会直接发出 CORS 请求。具体来说，就是增加一个名为 Origin 的字段到 HTTP 头中。上面的头信息中，Origin 字段用来说明本次请求来自哪个源，服务器端根据这个值决定是否同意这个请求。如果 Origin 指定的源在许可范围内，服务器返回的响应头会添加以下几个字段：Access-Control-Allow-Origin 字段表明服务器允许的请求源，其值要么为请求时 Origin 字段的值，要么为 * 。Access-Control-Allow-Credentials 字段表明服务器是否允许发送凭据信息，该字段是可选的，默认情况下不允许发送凭据信息。Access-Control-Expose-Headers 字段表明服务器指定的允许获取的 HTTP 头字段，该字段是可选的。如果 Origin 指定的源不在许可范围内，服务器会返回一个不带 Access-Control-Allow-Origin 字段的正常的 HTTP 回应。当浏览器发现没有包含这个字段就知道请求出错了，会抛出一个异常。需要注意的是，这种错误的 HTTP 响应码有可能是 200 或 204 ，因此无法通过状态码识别。代码示例非简单请求 —— 预检请求上面提到，CORS 请求除了简单请求外还有非简单请求。简单来说，非简单请求时对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE ，或者 HTTP 头中 Content-Type 字段的值不是上文所述的那三个「对 CORS 安全的 Content-type 字段值」。基本流程非简单请求的 CORS 请求，会在正式通信之前增加一次称为「预检」（preflight）的 HTTP 查询请求。从上面的报文中可以看到，浏览器先发送了一个使用 OPTIONS 方法的「预检请求」。OPTIONS 是 HTTP/1.1 协议中定义的方法，用以从服务器获取更多信息。该方法不会对服务器资源产生影响。预检请求中同时携带了下面两个首部字段：Access-Control-Request-Method 字段将告知服务器实际请求将要使用的方法。Access-Control-Request-Headers 字段将告知服务器实际请求将要携带的自定义请求首部字段。服务器将据此决定是否允许实际请求，并返回相应的响应。Access-Control-Allow-Origin 字段与简单请求时并无差异。Access-Control-Allow-Methods 字段表明服务器允许哪些方法发起请求。Access-Control-Allow-Headers 字段表明服务器允许请求头中携带的额外字段。Access-Control-Allow-Credentials 字段与简单请求时并无差异。Access-Control-Max-Age 字段表明该响应的有效时间，在有效时间内浏览器无须为同一请求再次发起预检请求。需要注意的是浏览器自身维护了一个最大有效时间，如果该字段的值超出了浏览器维护的最大有效时间则不会生效。如果服务器「否定」了一个预检请求，也会返回一个正常的 HTTP 回应，但不包含任何与 CORS 相关的 HTTP 头信息字段。此时浏览器就会认定服务器不同意预检请求，并抛出一个错误。一旦通过了预检请求，接下来的步骤就都和简单请求一样了，此处不过多赘述。代码示例附带身份凭证的 CORS 请求上文中提到，CORS 请求默认不发送凭据信息（Cookie 和 HTTP 认证信息），如果要向服务器发送凭据，不仅需要服务器指定 HTTP 头的 Access-Control-Allow-Credentials 字段，还需要在请求时指明是否发送凭据信息。代码示例使用 XmlHttpRequest 向服务器发起 CORS 请求时，需要将 withCredentials 标志设置为 true 。使用 fetch 进行请求时则需要设置 credentials 为 include 才能使浏览器向跨域源发送包含凭据的请求。与 JSONP 的比较CORS 与 JSONP 的使用目的是相同的，但是 CORS 比 JSONP 更强大。JSONP 的缺点是只支持 GET 请求，而 CORS 则支持所有类型的 HTTP 请求。如果网站需要兼容老式浏览器或者需要向不支持 CORS 的网站请求数据仍然需要使用 JSONP 。参考资料跨源资源共享（CORS），MDN Web Docs，2021 年 8 月 8 日。跨域资源共享 CORS 详解，阮一峰的网络日志，2016 年 4 月 12 日。跨域资源共享，维基百科，2021 年 5 月 3 日。3.2. CORS protocol，Fetch Standard，2021 年 9 月 30 日。参数，WorkerOrGlobalScope.fetch()，MDN Web Docs，2021 年 9 月 1 日。"},{"title":"NOI Linux 2.0 上手体验","date":"2021-08-08","url":"/post/noi-linux-2/","tags":["Linux","VMware","NOI Linux"],"categories":["分享境"],"content":"时隔多年，CCF 终于发布了新版的 NOI Linux ，替换了以前基于 Ubuntu 14.04 的 NOI Linux 1.4.1。在 NOI Linux 2.0 发布的当天，我就迫不及待地下载好了镜像（ubuntu-noi-v2.0.iso），但由于时间原因，没有第一时间进行体验。安装首先先新建好一台虚拟机。新建虚拟机及挂载镜像的步骤不再过多叙述，在安装时需要断开网络连接。开屏就是自定义的启动界面。安装后需要连接网络，运行 sudo apt update 更新软件包列表，然后安装 open-vm-tools-desktop ，安装完成后建议重启虚拟机。简单体验整体评价在考场上如果提供 NOI Linux 虚拟机的话，可能需要手动安装 VMware Tools （因为没网所以不能装 Open VM Tools），略麻烦。系统操作有点卡，不知道是不是因为虚拟机的原因。预装的软件部分是处于半残状态的，在考场上无法正常使用。编译器版本较新，默认支持一些新的语言特性。在考场上推荐使用 Sublime Text 或者 Code::Blocks 进行代码编写，不推荐使用 VSCode 。更新模拟考试环境时不建议安装任何更新，以还原考场上的「本真的」NOI Linux 。如果需要日常使用则建议安装更新。VSCodeCCF 预置在 NOI Linux 2.0 中的 VSCode 只能当一个编辑器，并且并没有安装中文语言包和完整的 C/C++ 扩展，处于半残状态。Sublime Text相比于 VSCode ，NOI Linux 预装的 Sublime Text 的自动补全功能在始终离线的环境下依旧能正常工作，同时 Sublime Text 也支持单文件编译运行，颜值也不低，写起代码来很舒服。Code::BlocksCode::Blocks 是一个免费、开源、跨平台的集成开发环境，可以在 codeblocks.org 上找到系统对应版本的 Code::Blocks 预编译二进制包及其源码。NOI Linux 中内置的 Code::Blocks 的自动补全、代码提示等功能均能正常使用，且不需要网络连接。Nano关于 Nano 此处就不再过多叙述，可以在 The GNU nano homepage 上找到系统对应版本的 Nano 预编译二进制包及其源码。Emacs笔者并没有深度体验过 Emacs ，所以不做过多评价，在这里推荐一篇入门教程：Emacs 入门指南：Why & How - Keep Coding 。可以在 GNU Emacs 找到系统对应版本的 Emacs 预编译二进制包及其源码。VimVim 还是老样子，可以在 vim.org 上找到系统对应版本的 Vim 预编译二进制包及其源码，关于 Vim 的使用请参阅 第九章、vim 程式編輯器 - 鳥哥的 Linux 私房菜。编译器使用 g++ -dM -E -x c++ /dev/null | grep -F __cplusplus 命令可以查看编译器默认使用的 C++ 标准。通过上图可以得出 NOI Linux 自带的编译器默认的 C++ 标准是 C++ 14 ，希望 CCF 在比赛评测的时候不要添加 --std=c++98 ，同时选手也需要做好无法使用 C++ 14 特性的准备。对拍NOI Linux 2.0 依旧安装了 Arbiter 评测系统，但是由于系统内置了 Python ，所以可以自行编写对拍程序。后记NOI Linux 的本次更新使得 NOI Linux 系统更加地人性化、更加适合 OIer 们的使用。美中不足的一点是此版本的 NOI Linux 仍然没有卸载 openssh-client 软件包。参考资料NOI Linux 2.0 发布，将于 9 月 1 日起正式启用！ - noi.cn安装 Open VM Tools - VMware Tools - VMware Docs"},{"title":"使用 Cloudflare Warp 为单栈 VPS 添加双栈网络访问","date":"2021-07-15","url":"/post/vps-cloudflare-warp/","tags":["Cloudflare","Linux"],"categories":["技术向"],"content":"Warp 是 Cloudflare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 Cloudflare 的边缘节点实现隐私保护及链路优化。由于 Cloudflare 官方的 Warp Client 过于臃肿，导致我看到安装包大小后就决定直接放弃安装，于是我选择了 ViRb3/wgcf 替代。安装依赖可以前往 Releases 页面 下载编译好的二进制文件以供使用。安装好之后运行 wgcf --help ，得到类似下图的输出即为安装成功：另外还需按照 WireGuard 官网 上的说明安装 WireGuard 。根据需求可能还需要安装 resolvconf 。生成 WireGuard 配置文件先使用 wgcf register 命令注册 Warp ，使用键盘上的方向键选择 「Yes」 并回车确认：注册成功后的提示：之后使用 wgcf generate 命令生成配置文件。修改 WireGuard 配置文件这是一份生成出来的配置文件：添加 IPv4 网络访问删去 [Interface] 中的 Address = fd01:******/128 ；删去 [Peer] 中的 AllowedIPs = ::/0 ；将 Endpoint 的域名替换为解析出来的 IPv6 地址，如 [2606:4700:d0::a29f:c001]:2408 。添加 IPv6 网络访问删去 [Interface] 中的 Address = 172.16.*.*/32 ；删去 [Peer] 中的 AllowedIPs = 0.0.0.0/0 ；将 Endpoint 的域名替换为解析出来的 IPv4 地址，如 162.159.192.1:2408 。如果不需要使用 Cloudflare 的 DNS 服务可以删去 DNS = 1.1.1.1 这一行，使用的话需要安装 resolvconf 。启动 WireGuard 隧道将刚才修改好的配置文件移动到 /etc/wireguard/ 目录下，推荐命名为 wgcf.conf ，下面的操作以这个文件名为准。使用 systemd enable --now wg-quick@wgcf 命令启动隧道，然后使用 wg show wgcf 命令查看隧道状态。如果在启动时出现了错误，可以使用 systemd status wg-quick@wgcf 命令查看错误信息，修复后使用 systemd start wg-quick@wgcf 启动隧道。之后就可以享受双栈网络带来的便利了~注：日常如果需要重启隧道可以使用 systemctl restart wg-quick@wgcf 命令。后记折腾这些的原因是我从某个 Player IX 那里嫖的 VM 没有提供 IPv4 网络访问权限，这让我日常的维护工作麻烦了很多，于是我想到了 Cloudflare Warp 这个东西。CloudFlare Warp 提供的网络访问相较于 TunnelBroker.net 、 TunnelBroker.ch 等一众隧道要好很多，延迟并不像其他隧道那样高。在查找资料的过程中我也发现了很多博客里面所描述的内容有误或已经过时，所以综合其他文章的内容加上自己的实践，写下了这篇文章。参考资料【WGCF】连接 CF WARP 为服务器添加 IPv4/IPv6 网络 - Luminous’ HomeCloudflare WARP 给 VPS 服务器额外添加 IPv4 或 IPv6 网络获得“原生”IP - P3TERX"},{"title":"搭建 BIRD Looking Glass 速成指北","date":"2021-05-03","url":"/post/bird-looking-glass/","tags":["BIRD","BGP","DN42"],"categories":["技术向"],"content":"BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 蓝天 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。项目地址：成品： 安装 Docker 和 Docker Compose虽然这个程序可以直接运行，但我还是比较喜欢套个 Docker 防止污染环境。编排 Docker Compose 服务在运行 web 的服务器上找个地方（如 /var/bird-lg/），将下面的内容修改后写入 docker-compose.yml 中：在各个节点上只需要写入下面内容即可：之后启动 Docker 容器：使用 nginx 反代页面使用下方的配置启动反向代理即可。配置 DNS 解析bird-lg-go 的节点 endpiont 生成逻辑是 http://[节点].[endpoint后缀]:8000 ，如  ，所以只需要去配置对应的解析。警告建议解析到节点的公网 IP 上，以免 DN42 炸掉时 Looking Glass 也一并炸掉。配置示例：成果"},{"title":"初探 DN42 网络","date":"2021-04-04","url":"/post/dn42-network/","tags":["BGP","DN42"],"categories":["技术向"],"content":"DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。DN42 适合以下类别的用户：想要研究网络技术，练习服务器、路由器等网络设备配置，甚至后续在真实互联网建立 AS 的用户。已经拥有真实 AS ，但担心自己配置错误广播出错误路由、干掉半个互联网，希望有个地方测试的用户。DN42 不适合以下类别的用户：单纯想要保护隐私、规避网络审查的用户在网内消耗大量流量，例如用于解锁流媒体服务的用户所以，DN42 的使用门槛还是比较高的。这与在真实互联网中一样，你要扮演一个 ISP （互联网服务提供商），注册自己的个人信息， ASN 号码，IPv4 和 IPv6 的地址池，并且使用 BGP 在自己的服务器上广播它们。你还要和其它的用户联系，和他们进行 Peering（对等互联），一步步进入完整的 DN42 网络。DN42 在 172.20.0.0/14 和 fd00::/8 上运行，而这两个 IP 段都是分配给内网使用的。换句话说，你在 DN42 上怎么折腾，都不会影响到服务器其它的互联网连接。你可以通过加入 Telegram 群组 或者 IRC 频道 来寻求帮助。请注意，DN42 是一个测试网络，所有人都在帮助所有人。即使你不小心搞砸了，也没有人会指责你。欢迎在搭建完成自己的内网以后与我进行对等互联，可以访问 dn42.baoshuo.ren 获取更多信息。若无特别说明，本文中所使用的系统环境均为 Ubuntu 20.04.2 LTS ，本文中所有使用 <> 包裹的内容均需要自行替换。注册 DN42在注册过程中会大量使用到一些 UNIX 工具（如 Git 、 GPG 等），所以最好使用 Linux 或者 macOS 系统完成整个流程，如果你正在使用 Windows 系统，那么可以使用 WSL 。注册前的准备了解如何编写 RPSL （RFC2622） 格式的配置文件。了解如何使用 CIDR （RFC1518，RFC1519） 格式表示 IP 地址块。熟悉 DN42 Wiki 中的 Getting-Started 、 Address Space 页面中的内容。在 DN42 Git 中有一个注册好的账户。会使用英文与他人交流。克隆 DN42 注册表 Git 仓库将 dn42/registry 这个仓库 clone 到本地。新建一个名为 <用户名>-<日期, YYYYMMDD>/<自定义名称> 的分支。注册维护者在仓库的 data/mntner 目录下新建一个文件，命名为 <昵称>-MNT 。文件内填入以下内容：示例：data/mntner/BAOSHUO-MNT at dn42/registry@mastermntner ：维护者（全称为 Maintainer），这个维护者的名称，与文件名相同。admin-c ：管理员联系信息（Admin Contact），需要指向 注册联系人 一节中的 person 文件，一般为 <昵称>-DN42 。tech-c ：技术人员联系信息（Tech Contact），需要指向 注册联系人 一节中的 person 文件，一般为 <昵称>-DN42 。auth ：身份验证信息，接受 GPG 公钥 和 SSH 公钥 ，可以查看 Registry Authentication 页面获取详细信息。mnt-by ：由谁维护（全称为 Maintain by），此处需要指向这个维护者本身，即 <昵称>-MNT 。source ：信息来源，默认为 DN42 。注册联系人在仓库的 data/person 目录下新建一个文件，命名为 <昵称>-DN42 。示例：data/person/BAOSHUO-DN42 at dn42/registry@masterperson ：姓名。contact ：联系方式，一般为邮箱。nic-hdl ：NIC 句柄（即 NIC handle），指向文件本身，与文件名相同。mnt-by ：由谁维护（全称为 Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。source ：固定为 DN42。注册 ASN在国际互联网上，ASN 范围 4200000000 - 4294967294 是被保留以供私人使用的，而 DN42 占用的就是其中的一块： 4242420000 - 4242429999 。目前 DN42 开放注册的 ASN 范围是 4242420000 - 4242423999 ，只需要在这个区间里面挑一个没有被他人占用的号码即可。DN42 Registry 的管理员 burble 提供了一个在线查看可用 ASN 的工具: DN42 Free ASN Explorer 。访问该页面就会随机生成 10 个当前还未注册的 ASN 以便使用。在仓库的 data/aut-num 目录下新建一个文件，命名为刚才选中的 AS 号码。示例：data/aut-num/AS4242420247 at dn42/registry@masteraut-num ：AS 号，此处可以使用私有 AS 号码，也可以使用公网 AS 号码（不推荐）。as-name ：AS 的名称，可以设置为 <昵称>-AS 。descr ：（选填）AS 简介，随意填写。admin-c ：管理员联系信息（Admin Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。tech-c ：技术员联系信息（Tech Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。mnt-by ：由谁维护（Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。source ：如果使用私有 AS 号码则此处填写 DN42 ，否则填写 ASN 所对应的 RIR 名称。注册 IPv4 地址块如果您想在 DN42 上创建一个 IPv6 Only 网络，请不要注册 IPv4 地址块，并忽略 添加路由记录 一节中的 IPv4 部分。在国际互联网上， 172.16.0.0/12 是由 RFC1918 规定的由专用网络使用的 IP 地址块，而 DN42 占用的就是其中的一块： 172.20.0.0/14 。目前 DN42 开放注册的地址块范围可以在 Address Space 页面上查看。DN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv4 地址块的网站，点击 DN42 Free IPv4 Explorer 即可随机生成 10 个当前还未注册的 IPv4 地址块。和在真实互联网上一样，DN42 的 IPv4 地址资源也是十分紧缺的，因此 IPv4 的申请原则是「够用就好」。如果节点数量足够少，只申请 /28 或 /29 大小的地址块就够用了。在仓库的 data/inetnum 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 _ 代替 /。示例：data/inetnum/172.23.250.64_26 at dn42/registry@masterinetnum ：这个地址块的范围。cidr ：以 CIDR 格式表示的这个地址块的范围，含义与 inetnum 相同。netname ：这个地址块的名称。可以设置为 <昵称>-IPV4 。descr ：（选填）这个地址块的简介。nserver ：（选填）IP 地址反向解析的 DNS 服务器。country ：你的 ISO 3166 国家代码，填 CN 代表中国大陆地区。admin-c ：管理员联系信息（Admin Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。tech-c ：技术员联系信息（Tech Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。mnt-by ：由谁维护（Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。status ：固定为 ASSIGNED。source ：固定为 DN42。注册 IPv6 地址块在国际互联网上， fc00::/7 是由 RFC4193 定义的 唯一本地地址，而 DN42 占用的就是其中的一块： fd00::/8 。目前 DN42 开放注册的地址块范围可以在 Address Space 页面上查看。DN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv6 地址块的网站，点击 DN42 Free IPv6 Explorer 即可随机生成 10 个当前还未注册的 IPv6 地址块。在仓库的 data/inet6num 目录下新建一个文件，命名为 IPv6 地址块的 CIDR 格式，并使用 _ 代替 /。示例：data/inet6num/fd42:4242:247::_48 at dn42/registry@masterinet6num ：这个地址块的范围。cidr ：使用 CIDR 格式表示的这个地址块的范围，含义与 inet6num 相同。netname ：这个地址块的名称。可以设置为 <昵称>-IPV6 。descr ：（选填）这个地址块的简介。nserver ：（选填）IP 地址反向解析的 DNS 服务器。country ：你的 ISO 3166 国家代码，填 CN 代表中国大陆地区。admin-c ：管理员联系信息（Admin Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。tech-c ：技术员联系信息（Tech Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。mnt-by ：由谁维护（Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。status ：固定为 ASSIGNED。source ：固定为 DN42。添加路由记录在仓库的 data/route 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 _ 代替 /。route ：这个 IPv4 地址块的范围，CIDR 格式。descr ：（选填）路由简介。origin ：填写你的 AS 号码。mnt-by ：由谁维护（Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。source ：固定为 DN42。如需添加 IPv6 路由，将本节所述的 route 改为 route6 即可，此处不再赘述。上传更改到 DN42 注册表完成以上步骤之后，使用 git diff 查看文件变动，检查无误后，使用 git add . 暂存。运行仓库根目录下的 ./check-my-stuff <维护者> 检查文件内容是否有误，确定无误后，提交。在提交时，如果需要使用 GPG 签名，需要在添加 -S 参数，如 git commit -S ；如果使用 SSH 签名，请直接使用 git commit 进行提交，待提交后再进行签名工作。使用下面的命令进行签名：之后使用下面的命令上传即可：上传后在 DN42 Git 中切换到自己的分支，并创建一个合并请求，等待管理员审核。注意事项各个项目的键和值之间有一长串空格，键、冒号与空格的总长度必须是 20 个字符，且不能随意修改。为了编辑时的方便，注册表中提供了一个脚本 fmt-my-stuff ，只需要使用 ./fmt-my-stuff <维护者> 即可自动完成此步骤。DN42 Registry 的工作语言是英语。请使用英语完成全部流程，以免出现不必要的麻烦。请认真对待管理员提出的更改请求，按照要求完成全部修改后直接上传到原分支下即可，无需再新开合并请求。推荐使用随机的 IPv4 与 IPv6 地址块，避免与其他网络重复。请明白，DN42 并不是这些网络资源的权威注册机构。DN42 BIRD2 使用入门如无特别说明，本部分中所使用的 BIRD 版本为 2.0.7 。安装 BIRD2一般情况下，执行此命令即可自动安装 BIRD2 并启动系统服务。编写 BIRD 配置文件对于刚刚加入 DN42 网络的新人来说，推荐使用 howto/Bird2 - DN42 Wiki 中的示例配置以节省配置时间。这套配置默认使用了 Multi Protocol BGP ，如果不想使用此功能请自行编写配置文件，如果没有 DN42 IPv4 地址需要去掉文件中的 IPv4 部分。将以下配置写入到 /etc/bird/bird.conf 中：然后在 /etc/bird 目录下创建一个文件夹，命名为 peers ，以便后续存储配置文件使用。如果想更深入的学习如何编写 BIRD 配置文件，推荐查看 BIRD 与 BGP 的新手开场 和 BIRD 官方文档 。下载 ROA 配置文件使用此命令即可将 ROA 文件下载到本机以供使用。还需要将此命令添加为定时任务，推荐设置为每小时运行一次，否则不会更新到最新的 ROA ，每次更新后都需要使用 birdc configure 命令重载 BIRD 配置。重新加载 BIRD 配置使用该命令重新加载 BIRD 配置，并使用 birdc show protocol 查看状态。DN42 WireGuard 使用入门WireGuard 是一种简单易用、速度快、现代化的 VPN ，它利用了最先进的加密技术，并使用 UDP 协议传输数据。WireGuard 设计为通用 VPN ，可在嵌入式设备和超级计算机上运行，​​ 适用于许多不同的环境。WireGuard 起初是专为 Linux 编写并发布的，后来被移植到各个平台上。在 WireGuard.com 上可以找到它的 技术白皮书 。安装 WireGuard一般情况下，执行此命令即可直接安装 WireGuard 和 WireGuard Tools ，无需额外操作。生成公钥与私钥使用此命令即可在当前目录下生成两个名叫 privatekey 和 publickey 的文件，分别代表私钥和公钥。搭建 WireGuard 隧道搭建 WireGuard 隧道非常简便，只需要生成一对公钥与私钥并与对等端交换公钥即可。如果需要通过 WireGuard 隧道建立 BGP 会话，不能使用 WireGuard 内建的多 Peer 功能，必须为每个对等端创建一条隧道。在 /etc/wireguard 目录下新建一个名为 <隧道名>.conf 的文件：PrivateKey ：私钥。ListenPort ：监听端口。第一个 PostUp ：（可选，推荐）添加链路本地地址。第二个 PostUp ：（可选）添加本地和对等端的 DN42 IPv6 地址。第三个 PostUp ：（可选）添加本地和对等端的 DN42 IPv4 地址。Table ：必须设定为 off （不导入系统路由表），否则会导致系统断网。当使用链路本地地址建立 BGP 会话时，可以不设置 DN42 IPv4 和 DN42 IPv6 地址，但是机器上必须有一张网卡上绑定了本机的 DN42 IPv4 和 DN42 IPv6 地址。同理，如果不使用链路本地地址建立 BGP 会话则无需添加链路本地地址。PublicKey ：对端公钥。PresharedKey ：（可选）对端预共享密钥。Endpoint ：（可选）对端的连接域名/IP 及端口号。如果对端没有公网 IP 地址，需要本地设置为被动模式则无需填写此项。PersistentKeepalive ：（可选）每隔多少秒发送一次握手信息防止连接被中断并更新对端 IP 。如果本地没有公网 IP 地址，必须配置此项。AllowedIPs ：允许使用 WireGuard 转发流量的 IP 地址段。之后使用 wg-quick up <隧道名> 来启动隧道即可。如需开机自启，可以在测试无误后执行 systemctl enable wg-quick@<隧道名> 。检测隧道状态使用该命令即可查看隧道状态。如上图所示，当 latest handshake 时间较近且 transfer 有收有发时可以认为隧道正常。如需查看所有隧道的状态，直接使用 wg 命令即可。与其他网络进行对等互联系统配置在 DN42 网络中，没有绝对意义上的客户端，每个人都可能是他人的路由器，经常会出现数据包的来源网卡与回复使用的网卡不一致的情况，因此需要打开 Linux 内核的数据包转发功能，具体操作如下：同时，也需要关闭 Linux 内核的 rp_filter 的严格模式，具体操作如下：除此之外，还需要关闭一些自动化的配置 iptables 防火墙的工具，如 UFW 。搭建 WireGuard 隧道请参考 DN42 WireGuard 使用入门 一节。配置 BGP 会话在 /etc/bird/peers 目录下新建一个文件，命名为 <名字>.conf 。如果使用链路本地地址进行 Peer 的话，需要按照下面的配置示例进行配置：否则按照下面的配置示例进行配置：然后使用 birdc configure 重载配置即可。更新日志2021-04-04 第一版 （2021 年 8 月 10 日存档于 互联网档案馆）2021-08-14 第二版参考资料Getting Started - DN42 WikiGuide for creating a Pull Request - dn42/registry - DN42 GitDN42 实验网络介绍及注册教程（2020-10-01 更新） - Lan Tian @ BlogIETF DatatrackerUnique local address - WikipediaBIRD 与 BGP 的新手开场 - Soha Jin - GitHub"},{"title":"年轻人的第一个 ASN","date":"2021-03-20","url":"/post/my-own-asn/","tags":["BGP","计算机网络"],"categories":["分享境"],"content":"很久之前就有了这样的一个想法：拥有一个自己的 ASN 。2021 年的寒假末尾，我终于找到了一个肯给我这个未成年人申请 ASN 的 LIR 。于是这个世界上又多了一个祸害公网的人。2021-12-09 更新：将 IP 广播部分直接链接到《初探 DN42 网络》中的「DN42 BIRD2 使用入门」一节，以及一些不大不小的修改。注册 ASN我找了某个 LIR 注册的 APNIC 的 ASN ，下号用时 3 个工作日。需要提供的信息有这些（带有 [保密] 标签的是非公开信息，只有你的 LIR 和 APINC 会知道）：[保密] 身份证明材料主标识联系人邮箱noc 邮箱abuse 邮箱国家联系人地址联系人姓名联系人电话ASN 的标识ASN 的全名ASN 所属国家[保密] 两个上游 ASN[保密] ASN 将要部署在的物理位置然后等了 3 个工作日，我的 ASN 申请终于通过审核并下号了。需要注意的是 APNIC 每半年会向联系人邮箱发送一封验证邮件，所以邮箱需要保持畅通，并且及时查看新邮件。申请 Vultr 的 BGP 广播功能Vultr 的 BGP 广播功能可以称得上是「新手友好」的了。Vultr 良好的过滤系统保证了一般情况下即使发送了错误的路由表也不会漏到公网去，不怕搞炸，方便学习时使用。点击  进入 Vultr BGP 广播功能的开通页面。点击页面中的 Get Started 进入 BGP 开通申请页面。将 I have my own IP space 和 I have my own ASN 设置为 YES 。在 My ASN 处填写 ASN （不含 AS 前缀）。在 BGP Password 处填写你想要的 BGP 密码。在 IP Prefixes 处填写你的 IP 前缀（CIDR 格式）。Routes we shoule send you 选择 Full Table 。LOA 按照下方提供的模板照抄即可。然后点击 Setup 即可。LOA 模板这是一篇 LOA 模板，照抄即可。提交完毕之后会出现如图所示的界面，点击 Start 即可开始验证进程。以 AS141776 的验证为例，选择好接收验证邮件的邮箱，然后点击 Send 即可。点击邮箱里的链接即可（第一个是允许，第二个是拒绝）验证成功后的提示。之后等待客服开通即可。由于我是在晚上申请的 Vultr BGP 服务，所以几分钟就开通好了。之后不要忘记去控制台重启实例哦~使用 BIRD2 广播 IP可以参考我在 初探 DN42 网络 这篇文章的「DN42 BIRD2 使用入门」一节中描述的步骤，此处不再赘述。如果不会写配置文件可以参考 renbaoshuo/network-configs 仓库中的配置。一些注意事项拆分 IP 段由于我一下子用不了那么多 IP ，所以我决定把我的 /44 拆分成几个 /48 来用。如果不涉及 whois 信息的修改操作，那么只需要修改一下 bird 的配置分开广播即可。APNIC 修改 whois 信息的流程可以参考 Sending updates by email - APNIC 页面上的指引发送邮件。网络交换中心（Internet Exchange）加 IX 的操作流程和 Peer 差不多，注意只发送自己和自己下游（如果有）的路由，不能把上游发来的路由也塞进去，否则会被断开连接。名词释义LIR: 本地互联网注册机构RIR: 区域互联网注册机构 （维基百科）ASN: 自治系统编号（维基百科）BGP: 边界网关协议（维基百科）BIRD: 一个功能齐全的动态 IP 路由守护程序（官方网站）参考资料Example Letter of Authorization for BGP Announcements，Vultr Docs。IP 广播 : CentOS 7 使用 bird6 广播 IPv6，LiCEO。初探 DN42 网络，宝硕博客。年轻人的第一个私人BGP(一) - 注册一个ASN，LovelyWei’s 废纸篓。年轻人的第一个私人BGP(二) - 广播你的IP，LovelyWei’s 废纸篓。"},{"title":"初识 Service Worker —— 使用 Workbox 快速开发 Service Worker","date":"2021-02-27","url":"/post/workbox-service-worker/","tags":["Web","JavaScript","ServiceWorker"],"categories":["技术向"],"content":"对于优化前端加载性能这个问题，许多人以 http-cache、异步加载、304 状态码、文件压缩、CDN 等方法来解决。其实除了这些方法，还有一个比它们都强大的，那就是 Service Worker 。我们可以使用 Google Chrome 团队的 Workbox 来实现 Service Worker 的快速开发。注册 Service Worker在页面中添加以下内容以注册一个 Service Worker 。当然，在这之前你需要先有一个 Service Worker 的代码 /sw.js 。你可以在这个文件中写入以下代码来检测是否成功地注册了 Service Worker 。引入 Workbox你可以使用 Google 提供的 CDN 来引入 Workbox 。只需在 sw.js 的开头写入以下内容即可：如果你觉得 Google 的 CDN 不太靠谱的话，可以使用 workbox-cli 将资源存在本地：这时需要在 sw.js 的开头将上方写入的内容替换为以下内容即可：Workbox 策略Stale While Revalidate（重新验证时过期）此策略将对网络请求使用缓存来响应（如果有），并在后台更新缓存。如果未缓存，它将等待网络响应并使用它。这是一个相当安全的策略，因为这意味着用户会定期更新其缓存。这种策略的缺点是：它总是从网络上请求资源，较为浪费用户的带宽。Network First（网络优先）此策略将尝试首先从网络获得响应。如果收到响应，它将把它传递给浏览器，并将其保存到缓存中。如果网络请求失败，将使用最后一个缓存的响应。Cache First（缓存优先）此策略将首先检查缓存中是否有响应，如果有响应，则使用该策略。如果请求不在缓存中，则将使用网络，并将任何有效响应添加到缓存中，然后再传递给浏览器。Network Only（仅网络）强制响应来自网络。Cache Only（仅缓存）强制响应来自缓存。策略配置可以通过定义要使用的插件来自定义路由的行为。Workbox 中的自定义策略在某些情况下，您可能希望使用自己的其他策略来响应请求，或者只是通过模板在 Service Worker 中生成请求。为此可以提供一个异步返回 Response 对象的函数 handler 。需要注意的是，如果在 match 回调中返回一个值，它将 handler 作为 params 参数传递到回调中。如果 URL 中的某些信息可以在 match 回调中解析一次并在中使用，则这可能会对 handler 有所帮助。Workbox 实践通常对于大部分项目使用 Workbox 时一般会引入相应的 gulp 或者 webpack 插件，在构建流程中完成对 Service Worker 的注册、将指定 URL 进行 Precache、完成 sw.js 的生成，等等。但是对于 Hexo、Jekyll 这些静态站点生成器或者 WordPress、Typecho 这些 CMS，如果不安装相应的插件，就需要自己从头编写一个 sw.js。先写一下总的配置：Google FontsGoogle Fonts 主要使用两个域名：fonts.googleapis.com 和 fonts.gstatic.com ，因此只需在匹配到这两个域名时进行缓存。jsDelivr CDN使用 jsDelivr CDN 时如果指定了库的版本，对应的文件可以称得上是永久不会改变的，所以使用 CacheFirst 来进行缓存。Google AnalyticsWorkbox 有一个 Google Analytics 离线统计插件，可惜我用的是 Sukka 大佬编写的非官方 Google Analytics 实现，所以只能添加一个 NetworkOnly 来放弃离线统计。图片由于我开通了 SM.MS 的 LifeTime Premium VIP ，所以图片当然是要存到这里啦~SM.MS 的图片域名有这几个：i.loli.net、vip1.loli.net、vip2.loli.net、s1.baoshuo.ren、s1.baoshuo.ren，只需要写一个正则匹配下就好了。由于图片链接对应的文件像 jsDelivr 一样也是几乎永久都不会改变的，所以使用 CacheFirst 来进行缓存。友情链接这些文件只是偶尔更新，使用 StaleWhileRevalidate ，可以兼顾速度与版本更新。Disqus 评论DisqusJS 判断访客的 Disqus 可用性是通过检查 shortname.disqus.com/favicon.ico 和 disqus.com/favicon.ico ，显然是不能被缓存的。API 可以在无网络时使用 NetworkFirst 来达到无网络时也能查看评论的效果。另外 Disqus 本身也没有缓存的必要，所以对 *.disqus.com 使用 NetworkOnly 即可。但是 *.disquscdn.com 下的头像、JS、CSS 是可以缓存一段时间的，所以使用 CacheFirst 缓存 10 天。后缀匹配针对其余没有被域名匹配到的静态文件，通过文件后缀进行匹配并使用 StaleWhileRevalidate ，可以兼顾速度与版本更新。默认行为使用 Workbox 的 defaultHandler 匹配剩下的请求（包括页面自身），一律使用 NetworkFirst ，借助 Workbox 的 runtimeCache 起到加速和离线效果。参考资料文章头图来自： 策略 一节中的配图来自： - Google DevelopersWorkbox, not sw-toolbox & sw-precache - Sukka’s BlogGoogleChrome/workbox - GitHubThe Offline Cookbook - web.dev"},{"title":"浅谈网页「深色模式」的实现","date":"2021-02-17","url":"/post/darkmode/","tags":["前端","Web"],"categories":["技术向"],"content":"随着越来越多的操作系统、浏览器开始支持 Dark Mode 和相应的 Media Queries Level 5，越来越多的网站开始添加深色模式。我的博客其实早在 2019 年末就支持了深色模式，但一直没有很好地实现这个功能。于是在 2020 年的那个超长寒假，我把博客系统更换到了 Typecho，并与某位大佬一起实现了一个深色模式插件（原文链接已丢失）。正好今年寒假把博客换到了 Hexo 上，趁着主题代码还热乎、能看懂，赶紧来写写我的深色模式是如何实现的。关于深色模式Dark themes reduce the luminance emitted by device screens, while still meeting minimum color contrast ratios. They help improve visual ergonomics by reducing eye strain, adjusting brightness to current lighting conditions, and facilitating screen use in dark environments – all while conserving battery power.翻译深色主题能降低设备屏幕发出的亮度，同时仍然满足最小的颜色对比度。它们有助于改善视觉效果、减少眼睛疲劳，调整亮度以适应当前的照明条件，并有助于在黑暗环境中使用屏幕，同时节省电池电量。界面设计颜色不要使用 100% 的纯黑Google 在 Material Design 的设计指南中对于深色模式列出了一系列设计规范，其中第一条就是 「不要使用 100% 的纯黑」 。Google 推荐将深色表面和 100% 白色文字的对比度至少设置为为 15.8:1 （Dark surfaces and 100% white body text have a contrast level of at least 15.8:1）为什么呢？因为纯白色会反射所有波长的光线，而纯黑色会吸收所有光线，这是对比度最大的两种颜色，白底黑字时，文字过于刺眼，而黑底白字时，文字又可能难以辨认。如果长时间阅读这样的文字，势必会让眼睛感觉到疲劳，与深色模式开发的初衷背道而驰。Google 推荐使用 #121212 来作为深色模式的主背景色。A dark theme uses dark grey, rather than black, as the primary surface color for components. Dark grey surfaces can express a wider range of color, elevation, and depth, because it’s easier to see shadows on grey (instead of black).Dark grey surfaces also reduce eye strain, as light text on a dark grey surface has less contrast than light text on a black surface.翻译深色主题应使用深灰而不是黑色作为组件的主要表面颜色。深灰色表面可以表示更广泛的颜色，高度和深度范围，因为更容易看到灰色阴影（而不是黑色）。深灰色的表面还可以减少眼睛疲劳，因为深灰色表面上的浅色文本的对比度低于黑色表面上的浅色文本。许多常见应用的深色模式背景色的 H 值都在 200~250 范围内（即蓝色范围），在纯灰色的基础上稍微偏冷一些。不过也有一些例外，比如网易云音乐的背景色有点偏暖，可能和其品牌色有关（网易云音乐的品牌色是暖红色）。不要让亮色占据过多面积在深色主题中应该尽可能地使用有限的颜色进行强调，并使大部分空间显示出深色表面。▲ 正确示例▲ 错误示例不要使用过高的色彩饱和度在深色模式下，过高的色彩饱和度可能会使文本像下方这样难以辨识（清晰度降低）：色彩饱和度过高还可能会导致文本在深色背景上产生光学振动，从而引起眼睛疲劳。最佳做法是使用「去饱和色」，这样可以提高清晰度，并减少视觉抖动。层次在浅色模式下，我们通常会使用投影来区分页面内元素的层次，但这种方法在深色模式中如果使用不当，不仅起不到区分页面内元素层次的作用，还会影响整体观感，起到反作用。Google 给出的示例：WWDC 2019 中苹果设计师讲到深色模式的文本：Apple 认为在浅色模式下投影能轻松地区分两个视觉元素，但是在深色模式下作用甚微。所以他们建议在深色背景下，对前置元素的使用稍亮的灰色。在组件表面(1)上放置一个白色半透明的遮罩层(2)，就可以体现出深色模式中的层次。代码实现这个主题使用了向 body 添加 .dark 类来实现深色模式。利用 Media Query 简单实现深色模式可以直接为深色模式编写独立的样式：更进一步地，还可以使用 CSS Variable 来简化代码：还可以利用 <link> 标签的 Media Query 来有条件地加载文件，节省流量：需要注意 CSS 选择器的权重，因此作为可选的 dark.css 一定要放在 main.css 之后加载。使用 Media Query + JavaScript 实现跟随系统/定时切换深色模式这段 CSS 与先前的并没有什么差别，而且与其相对应的 JavaScript 也很好编写。此段代码中开启深色模式的条件有两个：系统开启了深色模式时间在晚 7 点~早 7 点之间只要满足上述任意一个条件，深色模式就会被开启。使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式这段 CSS 与先前的并没有什么差别，下面就是令人头大的 JavaScript 部分了。先定义一些常量：接下来使用 try {} catch (e) {} 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：获取当前 prefers-color-scheme 的方法：再写一个清除 Class 和 LocalStorage 的函数：接下来就是起主要作用的函数了，负责为 <body> 标签增删深色模式的 Class ：还需要一个函数负责获取相反的显示模式，并将其存储到 LocalStorage 中相关的函数都定义完了，是时候添加执行了：使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式CSS 和大部分 JavaScript 代码没有变化，此处仅说明有变化的代码。在函数 toggleCustomDarkMode() 中添加写入一个时间戳的操作：重新编写入口，用来检测是否符合定时条件：深色模式下的页面滚动条只需在页面的 <head> 中添加一个 <meta name=\"color-scheme\"> 的标签即可让页面滚动条的样式跟随深色模式变化。如果你使用类似上一节所示的切换按钮的话，别忘了添加下面的 CSS ：Disqus 相关如果网页上有 Disqus 评论系统，请添加下方的 CSS 以避免 Disqus 的自动深色模式失效。来源：Disqus iframe transparency won’t work on Chrome 87 - StackOverflow参考资料Dark theme - Material DesignWhat’s New in iOS Design - WWDC 2019你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持 - Sukka’s BlogImproved dark mode default styling with the color-scheme CSS property and the corresponding meta tag - web.dev文章头图来自："},{"title":"Linux Systemd 入门","date":"2021-02-11","url":"/post/linux-systemd/","tags":["Linux"],"categories":["技术向"],"content":"Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。常用命令列表列出所有已加载的单元：systemctl list-units查看指定的单元的配置：systemctl cat [serviceName] (e.g. systemctl cat sshd.service)修改指定单元的配置：systemctl edit [serviceName] (e.g. systemctl edit sshd.service)查看指定的单元的运行状态： systemctl status [serviceName|pid] (e.g. systemctl status sshd.service)如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 --all 连用，则同时显示所有已加载的单元（可以用 -t 限定单元类型）的状态信息。启动指定的单元：systemctl start [serviceName] (e.g. systemctl start sshd.service)被指定的单元必须是已经被加载的。重新启动指定的单元：systemctl restart [serviceName] (e.g. systemctl restart sshd.service)如果指定的单元没有启动，则直接启动它们。停止指定的单元：systemctl stop [serviceName] (e.g. systemctl stop sshd.service)启用指定的单元：systemctl enable [serviceName] (e.g. systemctl enable sshd.service)停用指定的单元：systemctl disable [serviceName] (e.g. systemctl disable sshd.service)重新加载指定的单元的配置：systemctl reload [serviceName] (e.g. systemctl reload sshd.service)重新加载所有已修改过的配置文件：systemctl daemon-reload开机启动对于那些支持 Systemd 的软件，安装的时候，会自动在 /usr/lib/systemd/system 目录添加一个配置文件。如果你想让该软件开机启动，就执行下面的命令（以 sshd.service 为例）。上面的命令相当于在 /etc/systemd/system 目录添加一个符号链接，指向 /usr/lib/systemd/system 里面的 sshd.service 文件。这是因为开机时，Systemd 只执行 /etc/systemd/system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。Unit配置文件对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。我曾经为 Sakura Frp 编写过一个脚本：getfrp.sh （存档 于 GitHub Gist） ，里面便是使用了自行编写配置文件的方法。以 sshd.service 这个配置文件为例子，来分析一下 Systemd 的配置文件：可以看出这个文件一共有三个部分：[Unit], [Service] 和 [Install] 。配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 After=），就将该设定归零了。[Unit]: 启动顺序与依赖关系这个部分主要有以下几个配置项：Description: 当前服务的简易说明Documentation: 文档位置（以空格分隔）该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。Before: 在哪些服务之前启动本字段不涉及依赖关系，只是说明了启动顺序After: 在哪些服务之后启动本字段不涉及依赖关系，只是说明了启动顺序以 sshd.service 中的配置为例，该服务需要在 network.target 和 auditd.service 之后启动Wants: 弱依赖的服务若被依赖的服务被停止，这个服务不需要停止Requires: 强依赖的服务若被依赖的服务没有启动，则不能启动这个服务若被依赖的服务被停止，则这个服务也必须停止Conflicts: 冲突的服务如果列出的服务中有一个已经运行，那么就不能启动这个服务[Service]: 启动行为这个部分主要有以下几个配置项：Type: 启动类型。默认值为 simple ，可选值如下：simple: 使 ExecStart 项启动的项成为主进程forking: ExecStart 项将会以 fork() 的形式启动，此时父进程将会退出，子进程将成为主进程oneshot: 类似于 simple ，但只执行一次，Systemd 会等它执行完，才启动其他服务dbus: 类似于 simple ，但会等待 D-Bus 信号后启动notify: 类似于 simple ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务idle: 类似于 simple ，但是要等到其他任务都执行完，才会启动该服务。这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序Environment: 指定环境变量EnvironmentFile: 环境变量配置文件，该文件内部的 key=value 形式的配置可以在当前文件中以 $key 获取ExecStart: 服务启动时执行的命令ExecReload: 服务重启时执行的命令ExecStop: 服务停止时执行的命令ExecStartPre: 服务启动之前执行的命令ExecStartPost: 服务启动之后执行的命令ExecStopPost: 服务停止之后执行的命令Restart: 服务退出后的重启方式，默认值为 nono: 进程退出后不会重启on-success: 当进程正常退出时（退出状态码为 0）重启on-failure: 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启on-abnormal: 当进程被信号终止或程序超时时重启on-abort: 当收到没有捕捉到的信号终止时重启on-watchdog: 当进程超时退出时重启always: 总是重启（不论原因）对于守护进程，推荐设为 on-failure。对于那些允许发生错误退出的服务，可以设为 on-abnormal。RemainAfterExit: 退出后是否重新启动当设定为 RemainAfterExit=1 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 Type=oneshot 的服务很有帮助TimeoutSec: 当这个服务在启动或停止时失败进入\"强制结束\"状态的等待秒数。KillMode: 定义 Systemd 如何停止这个服务，默认值为 control-groupcontrol-group: 服务停止时关闭此控制组中所有的进程process: 服务停止时只终止主进程（ExecStart 接的后面那串指令）mixed: 主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号none: 没有进程会被杀掉，只是执行服务的 stop 命令RestartSec: 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）所有的启动设置之前，都可以加上一个连词号 (-) ，表示 「抑制错误」 ，即发生错误的时候，不影响其他命令的执行。以 sshd.service 为例，文件中的 EnvironmentFile=-/etc/sysconfig/sshd（注意等号后面的那个连词号），表示 /etc/sysconfig/sshd 文件不存在，也不会抛出错误。[Install]: 安装行为这个部分主要有以下几个配置项：WantedBy: 表示该服务所在的 Target一般来说，服务性质的单元都是挂在 multi-user.target 下的Also: 当该服务被启用时需要同时启用的单元Alias: 指定创建软链接时链接至本单元配置文件的别名文件模板实例此处以 getty@.service 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的：运行 systemctl status getty@tty1.service 命令，可以看到如下图所示的输出：不难发现图中标橙色的字符与上方配置文件中的 %I 相对应，并且配置文件的名称也不是 getty@tty1.service ，而是 getty@.service ，这种配置文件叫做 「模板实例」 。启动时只需要在 @ 后面添加需要填入 %I 位置的参数即可，如 getty@tty9.service 。Target一般来说，常用的 Target 有两个：一个是 multi-user.target ，表示多用户命令行状态；另一个是 graphical.target ，表示图形用户状态（它依赖于 multi-user.target），这一点和 SysVinit 的运行级别很是相似。官方提供了一张非常清晰的 Target 依赖关系图：图源： Manager Bootup配置文件以 multi-user.target 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目：Requires: 要求于某个 Target 一起运行Conflicts: 冲突的 TargetAfter: 在哪些 Target 之后启动AllowIsolate: 是否允许使用 systemctl isolate 命令切换到这个 Target参考资料Systemd - Wikipedia （存档 于 互联网档案馆）Systemd - Ubuntu Manpages （存档 于 互联网档案馆）第十七章 认识系统服务(daemons) - 鸟哥的 Linux 私房菜 （存档 于 互联网档案馆）"},{"title":"你好，2021 —— 博客迁移记录","date":"2020-12-31","url":"/post/hello-2021/","tags":["折腾"],"categories":["分享境"],"content":"再见，2020。最近总是觉得博客太慢了，于是乎，我把博客迁移到自己的服务器上面了。服务器端操作安装 nginxapt 一把梭，省时又省力。配置 nginx简简单单配置了一下，没有什么过于复杂的东西。在申请 SSL 证书之前，不要写 HTTPS 的配置。申请 SSL 证书由于笔者懒得每年换证书，所以就用了 Let’s Encrypt + acme.sh 的组合套装来配置 SSL 。 当然，ECC 证书也是少不了的。申请完成后，将 RSA 和 ECC 证书添加到 nginx 配置中，在配置文件中写入以下内容：上方使用的 SSL 配置是 Mozilla 推荐的现代化配置 ，如果需要更好的兼容性，可以使用 Mozilla 提供的中等安全性配置 ：将博客文件同步到服务器上在 .github/workflows 目录下创建一个 server.yml 文件，写入以下内容：之后在 {username}/{repo}/settings/secrets/actions 中添加四个 Secrets 。名称内容REMOTE_HOST服务器 IP 地址REMOTE_USER服务器用户名SSH_PRIVATE_KEY连接到服务器的 SSH 私钥TARGET存放文件的路径将博客文件 push 到仓库中，就能在服务器上查看到文件了。参考资料nginx 1.18.0, modern config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generatornginx 1.18.0, intermediate config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator"},{"title":"NOIP 2020 游记","date":"2020-12-05","url":"/post/noip-2020/","tags":["游记","OI"],"categories":["乐生活"],"content":"我属实没想到初中生也能参加 NOIP ，只不过不给评奖罢了。推荐阅读：NOIP 2020 题解 @ oi.baoshuo.renDay -1强迫自己学了一天竞赛，并且和周围的人讨论了讨论 NOIP 会考点啥。晚上看见机房里的学长们全员 typeracer ，属实被震撼到了。Day 0上午有 rp++ 模拟赛，结果一下子掉了 100 多分 ，出题人我真谢谢你 。在线膜拜两位 AK 神仙。这是为数不多的几次我比 youwike 考得好的模拟赛。然后就该收拾东西准备走了。下午坐火车去秦皇岛，在车上教练把手机收走了 ，过了一会发现没缓存离线题面又把手机要了回来 。到了宾馆发现环境还不错，虽然 AzusaCat 和 AlanSP 的屋子正对着工地，但是比别人的都要大。▲ 选手胸牌开会的时候教练们讲了讲注意事项，顺便替我们把选手胸牌领了回来。晚上吃完饭，写了两个板子，颓废到 12 点才睡，羡慕 AlanSP 的健康作息。▲ youwike 在考前立的 flag可惜 youwike 最后还是没上二百。Day 1比赛前照了一张合影。打开题目发现 T1 可做，写了写调了调，过了样例。拿大样例测了下发现没开 long long ，开了就过了。然后就去看其他题，并没有什么思路，于是水了水能水的暴力，骗了骗能骗的分。出了考场以后就赶忙收拾东西去火车站。在火车上出来了 OI 题库的民间数据，我测了下发现 T1 过了，当时非常兴奋，出分了以后才知道自己被卡了的事实。然后就该退役去学文化课了嘛。（完）"},{"title":"下载自己在 SM.MS 图床上的所有图片","date":"2020-11-28","url":"/post/download-smms-image/","categories":["便签格"],"content":"前提条件：有 SM.MS 图床账号，并且图片存储在该账号下。思路：先请求 API，获取图片列表。遍历列表，判断本地是否存在该图片，若不存在则下载该图片。代码如下。使用方法：python3 smms-image.py \"[your token here]\"下载下来的图片会存到 ./data/ 目录下（请提前新建）。"},{"title":"洛谷爬虫","date":"2020-11-26","url":"/post/luogu-spider/","categories":["技术向"],"content":"截至目前，洛谷已经有了近两万道题目和四十余万名用户。本代码爬取了一些样本，以供后续（可能）的数据分析。本次爬取遵守洛谷的 robots.txt 中的要求，不爬取提交记录页面。为了避免影响洛谷的正常运行，脚本只采用单线程进行爬取。爬取题目信息题目数据获取先使用 curl 获取洛谷的题目页面：可以看出我们需要的数据都在传入给 decodeURIComponent() 函数的字符串中，正则匹配取出即可。下面是代码实现：Update at 2021/02/05:添加参数 _contentOnly=1 可以直接获取 JSON 格式的信息，无需再正则匹配。处理题目数据这里只留下 currentData.problem 字段里面的内容即可。最终代码有关于数据库读写的部分请参考下文的 数据库 部分。爬取用户信息结构与题目爬虫类似，故不再作代码说明。数据库搭建数据库搭建 MongoDB 数据库只需要在 docker 里面跑一个容器，非常简便。连接数据库存储数据读取数据web 管理数据库再跑一个 mongo-express 就行了。访问 ip:8081 就能看到管理界面了。导出数据库直接运行下方命令导出为 JSON 格式即可。或者点击对应数据库管理界面中的 [JSON] 按钮导出。成果断断续续爬了一个多星期，终于爬完了。"},{"title":"批量修改 Git 仓库的提交邮箱","date":"2020-11-25","url":"/post/change-git-submission-email/","tags":["Git"],"categories":["便签格"],"content":"这几天重装了系统，一个不小心提交了好多 author 为 \"root\"<root@localhost> 的 commit ，于是寻找到了一个修改的方法。在仓库根目录下新建一个名为 fix.sh 的 shell 脚本，输入以下内容：完成后运行 ./fix.sh 即可。PS: 跑完记得删脚本，或者直接把脚本内容改好之后拖进终端"},{"title":"USTC Hackergame 2020 Write Up","date":"2020-10-31","url":"/post/ustc-hackergame-2020-write-up/","tags":["CTF","Hackergame"],"categories":["技术向"],"content":"前言对于我这种啥也不会的蒟蒻，拿到第 676 名已经是很不错的了（逃web签到题web 题当然要先看源码了（出题人好恶毒啊）再就是改值、提交so easy~flag 获取成功：flag{hR6Ku81-HappyHacking2020-35a790fff0}2048首先 F12 看下源码，看到了一个有趣的东西这么好的东西当然要拖到 console 里面去啊小彩蛋：JavaScript 中 String 类型转换成数字类型时会得到 NaN，凑成了 banana 。然后就出来了此题的 「flxg」flxg 获取成功：flxg{8G6so5g-FLXG-7b77994fc5}general一闪而过的 Flag直接打开是会闪，但是，你闪归你闪，我直接用 cmd 打开，你总不能 把我 cmd 窗口关掉吧 还继续闪吧flag 获取成功：flag{Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?}猫咪问答++第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？这个很好找，链接奉上： Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？谷歌一下，你就知道 中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？至于剩下的… 懒得找了，直接暴力吧以下编程语言、软件或组织对应标志是哺乳动物的有几个？ Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？附上代码：flag 获取成功：flag{b4a31f2a_G00G1e_1s_y0ur_fr13nd_228b608a32}233 同学的 Docker众所周知，Docker 镜像是分层存储的，所以这道题可以很轻松地解出来。先 pull 下来镜像。然后查看镜像的元信息，下面是简化版的结果（json 格式）查看 diff 文件夹：然后就能看到文件内容了~flag 获取成功：flag{Docker_Layers!=PS_Layers_hhh}"},{"title":"Bilibili 1024 节 CTF Write Up","date":"2020-10-26","url":"/post/bilibili-1024-ctf-write-up/","tags":["CTF","Bilibili"],"categories":["技术向"],"content":"比赛地址： ：页面的背后是什么？F12 解决一切问题T2：真正的秘密只有特殊的设备才能看到改下 UA 就行了，轻松到手T3：密码是啥？看了看源码，没啥思路，最后随便试了试 admin root bilibili 什么的，竟然是对的。用户名 admin密码 bilibili另外，你告诉我什么是 falg ？T4：对不起，权限不足～第一次访问：第二次访问：查看源码可以发现有个 API 请求，查看请求数据得到以下信息。role 里面的东西，贴进谷歌一搜就知道它是 user 的 MD5 。和超级管理员相关的名字相信大家都知道，无非就是 admin Administrator root 之类的东西。挨个试，最后发现 Administrator 是正确的。T5：别人的秘密发现有个 API，还有个 UID。最开始没想到需要从代码里面的\"初始 UID\"开始扫，浪费了我好多时间。T6~T10：结束亦是开始，接下来的旅程，需要少年自己去探索啦～先扫了扫端口，发现有个 redis登上去看看，发现了第八题的 flag 。然后爆破下目录有个 test.php ，访问下发现是个 JSfuck 加密，丢进浏览器里面解密下程序员最多的地方，那就肯定是 Github 了。然后找到了一个仓库 interesting-1024/end有个 end.php然后需要构造出一个 符合 !is_numeric($_GET['id']) and preg_match('/\\d/is', $_GET['id']) !== 1 and intval($_GET['id']) === 1 的请求即可。可以得到一个图片的链接 这个图片的末尾就是第十个 flag 了（图中标蓝的地方）。"},{"title":"使用树莓派+Nginx搭建 Rtmp 直播服务","date":"2020-10-05","url":"/post/raspberry-pi-rtmp-live/","tags":["nginx","树莓派","直播"],"categories":["技术向"],"content":"国庆在家闲着没啥事，把一直在角落里吃灰的树莓派 4B 拿出来捣鼓了几下。使用 nginx 模块：nginx-rtmp-module安装 nginx & nginx-rtmp-moduleapt, yes!访问服务器 IP ，出现如下图所示网页即代表安装成功。修改 nginx 配置打开 /etc/nginx/nginx.conf ，在末尾处插入下面的配置打开默认站点配置文件 /etc/nginx/sites-available/default ，在 server 部分的末尾添加以下内容插入完以后配置文件会变成下面的样子修改完成后使用 nginx -t 测试配置文件是否正确当出现成功提示时，使用 nginx -s reload 平滑重启 nginx。重启成功后使用 netstat -lnp 查看 tcp/1935 端口是否开启。使用 OBS 连接直播服务器打开 OBS ，在 设置 -> 推流 中配置以下内容项目值服务自定义...服务器rtmp://${ip}/live串流密钥${key}其中，${ip} 和 ${key} 设置为你需要的值即可。回到主界面，点击 开始推流 进行推流。使用客户端拉取直播流在 PotPlayer QQ影音 等播放器中选择 打开->打开URL 。输入 http://${ip}/live/${key}/index.m3u8 ，点击确定。此时可以就看到直播画面了。网页端播放页面中只有一个播放器，其他功能请自行实现。后记如果没有在外直播的需求，不要将 rtmp 端口映射至公网，这可能会带来一些不必要的麻烦。参考资料NGINX-based Media Streaming Server"},{"title":"给腾讯云服务器免费增加第二个 IP","date":"2020-08-20","url":"/post/tencent-cloud-cvm-dual-ip/","tags":["腾讯云"],"categories":["分享境"],"content":"前言良心云果然是良心云，增加了一个 IP 四舍五入居然不要钱，不过还是要登进系统配置一下双 IP 的。和客服的对话增加网卡&公网 IP点击按钮新建一个弹性网卡并绑定绑定完以后可以在服务器的弹性网卡管理页面看到详情点击新建的弹性网卡，进入管理页面，并记录下这张网卡的内网 IP，稍后会用到点击绑定按钮，并申请一个弹性公网 IP 此时弹性公网 IP 已经绑定成功，并且可以看到已经变为不收取 IP 资源费的状态了查看主网卡的内网 IP，并记录下这个 IP，稍后会用到配置服务器的网络设置使用 ip addr 查看网卡名称，并记录下来切换到网卡配置文件目录编辑 ifcfg-eth0 文件，将下方内容修改后填入其中 IPADDR 填写主网卡的内网 IP。子网掩码可以使用 V2EX 提供的 IPv4 子网查询工具 查询对应的子网。网关根据创建网卡时选择的子网而定。新建 ifcfg-eth1 文件，将下方内容修改后填入其中 IPADDR 填写新添加网卡的内网 IP。子网掩码可以 V2EX 提供的 IPv4 子网查询工具 查询对应的子网。网关根据创建网卡时选择的子网而定。保存后重启网络服务。配置路由（可选）按照上述步骤配置好后，Linux 还是默认都从主网卡发包。 您可通过策略路由让报文从哪个网卡进，并从该网卡返回。创建路由表添加默认路由上述两个命令中，172.21.0.1 要分别替换成主网卡所属子网的网关，以及辅助网卡所属子网的网关。配置策略路由"},{"title":"配置 Nginx 只允许 Cloudflare 的 IP 回源","date":"2020-08-18","url":"/post/nginx-cloudflare-ip-only/","tags":["Cloudflare","nginx"],"categories":["便签格"],"content":"配置好 Cloudflare 后，建议禁止非 Cloudflare IP 访问源站来防止一些不好的事情发生。配置在站点配置文件中增加以下内容：后记这个配置文件可以自己生成。参考资料Cloudflare IP Ranges (Last updated: February 21, 2019)"},{"title":"在 VMware 上安装 macOS 11 Big Sur Beta","date":"2020-08-03","url":"/post/vmware-macos-bigsur/","tags":["VMware","macOS"],"categories":["技术向"],"content":"工具准备文件：BigSur.cdr文件：unlocker.zip软件：VMware Workstation Pro 15文末会给出上述工具的下载地址。安装 VMware安装步骤这里不再细说。不过这里来说下 VMware 15.5.5 以后 VMware 和 微软的新动作：VMware 和 Hyper-V 可以共存了~[1][2]*注：需 Windows 10 2004 以上版本的系统只需要在安装时勾选下图所示的选项即可：于是，我的 WSL2 和我的 Docker Desktop 可以和 VMware 一起愉快的玩耍辣 😆~解锁 VMware条件：先关闭 VMware 的所有进程。Windows解压 Unlocker.zip 内的所有文件到一个文件夹中，右键 win-install.cmd ，选择\"以管理员身份运行\"，等待运行完毕即可。Linux使用以下命令解锁 VMware ：检验方法：创建虚拟机时是否可以选择 macOS 系统。创建虚拟机▲ 打开 VMware Workstation 15 ，选择 「新建虚拟机」。▲ 初始页面▲ 硬件兼容性▲ 镜像配置我们创建完成后再挂载镜像，选择\"稍后安装操作系统\"。▲ 选择系统版本由于 Unlocker 最高只支持 macOS 10.16 ，所以这里选择最高的版本即 macOS 10.16 。▲ 设置虚拟机名称、选择存储位置▲ 设置 CPU 核心数量▲ 调整内存大小▲ 网络配置▲ IO 配置▲ 磁盘配置▲ 磁盘配置▲ 磁盘配置▲ 磁盘配置▲ 完成！配置虚拟机在 vmx 文件末尾添加以下内容并保存。挂载安装镜像点击\"编辑虚拟机设置\"，选择\"CD/DVD\"选项。如图所示，先勾选\"使用 ISO 映像文件\"选项，再点击浏览，点击\"所有文件\"，选中 bigsur.cdr 并确认。保存以后点击\"开启虚拟机\"安装 macOS▲ 耐心等待加载▲ 选择中文并继续▲ 选中磁盘工具并打开▲ 找到名称为 VMware Virtual SATA Hard Drive Media 的磁盘，选中该磁盘▲ 抹掉名称为 VMware Virtual SATA Hard Drive Media 的磁盘，格式选择 APFS▲ 退出磁盘工具，选择 安装 macOS 并继续▲ 点击继续开始正式安装▲ 同意条款与条件▲ 选择安装位置▲ 开始安装▲ 上面显示的剩余时间通常都是忽悠人的，得等好久配置 macOS▲ 首先选择国家和地区接下来按照自己需求配置即可，到配置迁移助理时选择以后▲ 选择 以后▲ 选择 稍后设置▲ All done!安装 VMware Tools在 VMware 的 虚拟机(M) 菜单栏中选择 安装 VMware Tools(T)... 选项。之后按照步骤操作就行啦~参考资料[1] VMware Blogs: VMware Workstation 15.5 Now Supports Host Hyper-V Mode [2] Microsoft Tech Community: VMware Workstation and Hyper-V文件下载百度网盘链接：提取码：blog"},{"title":"修改 Git 配置加速 Clone GitHub 源码","date":"2020-07-21","url":"/post/clone-github-repo-faster/","tags":["Git"],"categories":["便签格"],"content":"设置代理：之后运行 git config -l 即可查看代理设置情况。清除代理："},{"title":"Handsome 魔改教程：左侧边栏输出优化","date":"2020-04-12","url":"/post/handsome-leftbar-layout/","tags":["Typecho"],"categories":["技术向"],"content":"感觉 handsome 自带的左侧边栏显示方法不太合适，于是自己参照了 UCW 大佬的教程 优化侧栏显示：实现更加美观的分类展示 改了一下。修改方法前置操作建议引入 Font Awesome 图标库，在 主题后台设置 -> 开发者设置 -> 自定义输出 head 头部的 HTML 代码 里面添加下面的代码即可。上面的 Font Awesome 的 css 文件来自 BootCDN 提供，你也可以替换成自己的文件。改代码首先，打开 libs/Content.php ，在蓝线所示的位置：插入下面的代码：在 component/aside.php 中找到以下代码（大约 131 ~ 160 行），删除。然后在下图蓝线所示的位置（ 127 行左右 ）插入以下代码：然后，刷新你的博客，是不是就有效果了呢？图标设置设置方法：在 $icons 的 array 数组中插入 '分类缩略名' => '图标' 即可。Font Awesome如果你引入了 Font Awesome 的图标的话，可以到  选择你喜欢的图标使用。使用方法在  挑一个图标，在图标的名字前加入 fa fa- 即可。使用样例使用 archive 图标时：对应在 $icons 的 array 数组中插入的代码：Fontellohandsome 主题自带部分 fontello 图标，具体列表可在 handsome 主题文档 查看。使用方法在图标的名字前加入 fontello fontello- 即可。使用样例与 Font Awesome 相似，在此不多赘述。Featherhandsome 主题自带 feather 的所有图标，在此处使用需要一些变通措施。使用方法在  选取好你需要的图标。然后在名称前插入 \" data-feather=\" ，再输入名称即可。使用样例以 airplay 为例：输入 'airplay' => '\" data-feather=\"airplay' 即可。其他 SVG 格式的图标使用方法在 svg 的开头加入 \"></i> ，在结尾加入 <i 即可。使用样例下载下来的 svg 文件内容：将其复制，然后在 $icons 的 array 数组中插入的代码：后记报错解决报错 syntax error, unexpected 'xxx' (T_CONSTANT_ENCAPSED_STRING), expecting ')' 咋办？检查你设置图标时的语法是否正确，正确语法如下：注意array 函数的参数中除了最后一行，每一行末尾都有一个 ,"},{"title":"Hello World","date":"2019-08-20","url":"/post/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new postMore info: WritingRun serverMore info: ServerGenerate static filesMore info: GeneratingDeploy to remote sitesMore info: Deployment"}]