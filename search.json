[{"title":"浅谈静态博客的自动部署方案","url":"//post/auto-deploy-static-blog/","content":"笔者最近阅读了 ChrAlpha 大佬的 初探无后端静态博客自动化部署方案 这篇博文，发现其中的一些内容已经过时，所以我决定写下这篇博文来简单说一说现在（2021 年）静态博客的自动部署方案。\n\n笔者 9 月中旬将自己的 OI 博客（oi.baoshuo.ren）迁到了 GitHub 上并使用 GitHub Actions 进行持续部署，在感觉良好以后又在 10 月初将自己的主博客（blog.baoshuo.ren）也迁移到了上面，这期间我尝试了多家 CI/CD 服务，并总结了一些配置要领。\n本文中使用的 NodeJS 包管理器为 yarn 。\nGitHub Actions\nGitHub Actions 是笔者最常用的 CI/CD 服务，没有之一。关于 GitHub Actions 的介绍可以查看 GitHub Actions 官网文档 和阮老师的 GitHub Actions 入门教程 。\n配置 GitHub Actions 是非常方便的，无需绑定任何第三方平台，仅需在仓库中新建一个 .github/workflows/*.yml 即可。\n\nHexo 核心团队成员之一 Sukka 大佬在他的 将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录 一文中强烈建议不要使用任何 Hexo 的 GitHub Action ，把 Hexo 当成一个普通的依赖 NodeJS 的构建程序，遵照这个思路编写配置文件即可。\n\nname: Build\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js 14\n        uses: actions/setup-node@v2\n        with:\n          node-version: 14\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn install\n      - name: Build Site\n        run: yarn build\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;\n          publish_dir: public\n          cname: blog.baoshuo.ren\n该工作流的大体步骤如下：\n\n检出仓库中的源文件到工作目录\n安装 NodeJS 和 yarn 包管理器，如果使用的是 npm 包管理器请自行修改。\n安装依赖。\n构建站点。\n部署到 GitHub Pages 。\n\n在构建完成后会发现文章的更新时间出现了错误，可以在生成前添加下面这步来将文件的修改日期更正为该文件最后一次 commit 时的时间。\n- name: Fix File Modify Date\n  run: |\n    git ls-files | while read filepath; do touch -d &quot;$(git log -1 --format=&#x27;@%ct&#x27; $filepath)&quot; &quot;$filepath&quot; &amp;&amp; echo &quot;Fixed: $filepath&quot;; done\n当然，为了让 git 有日志可寻，还得在检出的时候顺带把所有提交历史一并拉下来，指定 fetch-depth 就能做到：\n- uses: actions/checkout@v2\n  with:\n    fetch-depth: 0\n然后开启 GitHub Pages 功能即可访问到构建好的站点了。\nCloudflare Pages\n如果觉得 GitHub Actions + GitHub Pages 比较麻烦的话，才推出不久的 Cloudflare Pages 或许是一个不错的选择。\n前往 CloudFlare 管理面板 登录账号后即可在右侧找到「网页」或者「Pages」功能的入口。\n点击新建按钮，选择要使用的仓库，点击下一步。\n\nCloudflare Pages 的构建配置模板中并没有给出 Hexo 的模板，所以需要自己填写：\n\n完成之后点击确定就可以开始构建站点了。\n\n构建完成后，访问分配的 pages.dev 子域名即可查看构建好的站点。\n可以在「自定义域」选项卡中添加自定义域名。\nNetlify\nNetlify 是一家为静态网站提供托管服务的平台，有一定的免费额度，对于小型站点来说使用免费套餐就足够了。\n首先登陆账号，点击「New site from Git」按钮新建一个站点。\n\n可以看到 Netlify 自动识别出了博客使用的框架并且填充好了构建命令，接下来只需要点击下一步即可。\n\n新建站点完成以后可以在「Domain Settings」页面中修改默认分配的 netlify.app 子域名，并添加自定义域名。\nVercel\nVercel 是一个类似于 Netlify 的静态网站托管平台（Vercel 也支持托管 Serverless 函数，不过不在本文的讨论范围内）。\n\n绑定好 GitHub 账号后导入一个新的项目即可。\n\nVercel 也和 Netlify 自动填充好了构建命令，如果没有特殊需求可以直接点击下一步。\n可以在项目的域名设置中绑定自定义域名。\n参考资料\n\n初探无后端静态博客自动化部署方案，ChrAlpha，2020 年 2 月 14 日。\nFinding files older than certain dates in Git repository，Scott Weldon (on Stack Overflow)，2017 年 2 月 7 日。\n将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录，Sukka，2020 年 6 月 7 日。\n\n","categories":["笔记本"],"tags":["Hexo","自动化","GitHub Actions","Vercel","Netlify","Cloudflare"]},{"title":"Bilibili 1024 节 CTF Write Up","url":"//post/bilibili-1024-ctf-write-up/","content":"比赛地址： https://security.bilibili.com/sec1024/\nT1：页面的背后是什么？\nF12 解决一切问题\n\nT2：真正的秘密只有特殊的设备才能看到\n改下 UA 就行了，轻松到手\n\n\nT3：密码是啥？\n看了看源码，没啥思路，最后随便试了试 admin root bilibili 什么的，竟然是对的。\n\n用户名 admin\n密码 bilibili\n\n另外，你告诉我什么是 falg ？\n\nT4：对不起，权限不足～\n第一次访问：\n\n第二次访问：\n\n查看源码可以发现有个 API 请求，查看请求数据得到以下信息。\n\nrole 里面的东西，贴进谷歌一搜就知道它是 user 的 MD5 。\n和超级管理员相关的名字相信大家都知道，无非就是 admin Administrator root 之类的东西。\n挨个试，最后发现 Administrator 是正确的。\ncurl &quot;http://45.113.201.36/api/ctf/4&quot; --cookie &quot;role=7b7bc2512ee1fedcd76bdc68926d4f7b; session=***;&quot;\n\nT5：别人的秘密\n\n发现有个 API，还有个 UID。\n最开始没想到需要从代码里面的&quot;初始 UID&quot;开始扫，浪费了我好多时间。\nfor ((i=100336889;$i&lt;9999999999;i=($i+1))); do echo -e &quot;[$i] \\c&quot; &amp;&amp; curl &quot;http://45.113.201.36/api/ctf/5?uid=$&#123;i&#125;&quot; -H &#x27;User-Agent: bilibili Security Browser&#x27; -H &#x27;Cookie: session=*****; role=ee11cbb19052e40b07aac0ca060c23ee&#x27; ; done\n\nT6~T10：结束亦是开始，接下来的旅程，需要少年自己去探索啦～\n先扫了扫端口，发现有个 redis\n\nredis-cli -h 120.92.151.189 -p 6379\n登上去看看，发现了第八题的 flag 。\n\n然后爆破下目录\n\n有个 test.php ，访问下发现是个 JSfuck 加密，丢进浏览器里面解密下\n\n程序员最多的地方，那就肯定是 Github 了。\n然后找到了一个仓库 interesting-1024/end\n有个 end.php\n&lt;?php\n\n//filename end.php\n\n$bilibili = &quot;bilibili1024havefun&quot;;\n\n$str = intval($_GET[&#x27;id&#x27;]);\n$reg = preg_match(&#x27;/\\d/is&#x27;, $_GET[&#x27;id&#x27;]);\n\nif(!is_numeric($_GET[&#x27;id&#x27;]) and $reg !== 1 and $str === 1)&#123;\n    $content = file_get_contents($_GET[&#x27;url&#x27;]);\n\n    //文件路径猜解\n    if (false)&#123;\n        echo &quot;还差一点点啦～&quot;;\n    &#125;else&#123;\n        echo $flag;\n    &#125;\n&#125;else&#123;\n    echo &quot;你想要的不在这儿～&quot;;\n&#125;\n?&gt;\n然后需要构造出一个 符合 !is_numeric($_GET['id']) and preg_match('/\\d/is', $_GET['id']) !== 1 and intval($_GET['id']) === 1 的请求即可。\n\n可以得到一个图片的链接 http://45.113.201.36/blog/imgs/bilibili_224a634752448def6c0ec064e49fe797_havefun.jpg\n\n这个图片的末尾就是第十个 flag 了（图中标蓝的地方）。\n","categories":["技术向"],"tags":["CTF","Bilibili"]},{"title":"搭建 BIRD Looking Glass 速成指北","url":"//post/bird-looking-glass/","content":"BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 蓝天 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。\n\n\n项目地址：https://github.com/xddxdd/bird-lg-go\n成品： https://lg.dn42.as141776.net\n\n安装 Docker 和 Docker Compose\n虽然这个程序可以直接运行，但我还是比较喜欢套个 Docker 防止污染环境。\ncurl -sSL https://get.docker.com | sh\npip install docker-compose\n编排 Docker Compose 服务\n在运行 web 的服务器上找个地方（如 /var/bird-lg/），将下面的内容修改后写入 docker-compose.yml 中：\nversion: &#x27;3&#x27;\n\nservices:\n  bird-lg:\n    image: xddxdd/bird-lg-go\n    container_name: bird-lg\n    restart: always\n    environment:\n      - BIRDLG_SERVERS=cn1,eu1 # 节点列表，以逗号分隔\n      - BIRDLG_DOMAIN=dn42.as141776.net # 节点 endpiont 后缀\n      - BIRDLG_TITLE_BRAND=Looking Glass # 标签栏上显示的名称\n      - BIRDLG_NAVBAR_BRAND=Looking Glass # 页面上显示的名称\n      - BIRDLG_WHOIS=whois.lantian.dn42 # Whois 服务器地址\n      - BIRDLG_DNS_INTERFACE=asn.dn42\n    ports:\n      - &#x27;5000:5000&#x27;\n  bird-lgproxy:\n    image: xddxdd/bird-lgproxy-go\n    container_name: bird-lgproxy\n    restart: always\n    volumes:\n      - &#x27;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&#x27;\n    ports:\n      - &#x27;8000:8000&#x27;\n在各个节点上只需要写入下面内容即可：\nversion: &#x27;3&#x27;\n\nservices:\n  bird-lgproxy:\n    image: xddxdd/bird-lgproxy-go\n    container_name: bird-lgproxy\n    restart: always\n    volumes:\n      - &#x27;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&#x27;\n    ports:\n      - &#x27;8000:8000&#x27;\n之后启动 Docker 容器：\ndocker-compose up -d\n使用 nginx 反代页面\n使用下方的配置启动反向代理即可。\nserver &#123;\n    listen      *:80;\n    listen      [::]:80;\n    server_name lg.dn42.as141776.net;\n\n    # reverse proxy\n    location / &#123;\n        proxy_pass                         http://127.0.0.1:5000;\n        proxy_http_version                 1.1;\n        proxy_cache_bypass                 $http_upgrade;\n\n        # Proxy headers\n        proxy_set_header Upgrade           $http_upgrade;\n        proxy_set_header Host              $host;\n        proxy_set_header X-Real-IP         $remote_addr;\n        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Host  $host;\n        proxy_set_header X-Forwarded-Port  $server_port;\n\n        # Proxy timeouts\n        proxy_connect_timeout              60s;\n        proxy_send_timeout                 60s;\n        proxy_read_timeout                 60s;\n    &#125;\n&#125;\n配置 DNS 解析\nbird-lg-go 的节点 endpiont 生成逻辑是 http://[节点].[endpoint后缀]:8000 ，如 http://eu1.dn42.as141776.net:8000 ，所以只需要去配置对应的解析。\n\n警告\n建议解析到节点的公网 IP 上，以免 DN42 炸掉时 Looking Glass 也一并炸掉。\n\n配置示例：\neu1.dn42.as141776.net.  3600    IN      A       136.243.221.96\ncn1.dn42.as141776.net.  3600    IN      CNAME   home.baoshuo.ren.\n成果\n\n","categories":["技术向"],"tags":["BIRD","BGP","DN42"]},{"title":"批量修改 Git 仓库的提交邮箱","url":"//post/change-git-submission-email/","content":"这几天重装了系统，一个不小心提交了好多 author 为 &quot;root&quot;&lt;root@localhost&gt; 的 commit ，于是寻找到了一个修改的方法。\n在仓库根目录下新建一个名为 fix.sh 的 shell 脚本，输入以下内容：\n#!/bin/bash\n\ngit filter-branch --env-filter &#x27;\nan=&quot;$GIT_AUTHOR_NAME&quot;\nam=&quot;$GIT_AUTHOR_EMAIL&quot;\ncn=&quot;$GIT_COMMITTER_NAME&quot;\ncm=&quot;$GIT_COMMITTER_EMAIL&quot;\n\nif [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;错误邮箱&quot; ]\nthen\n    cn=&quot;正确名称&quot;\n    cm=&quot;正确邮箱&quot;\nfi\nif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;错误邮箱&quot; ]\nthen\n    an=&quot;正确名称&quot;\n    am=&quot;正确邮箱&quot;\nfi\n\nexport GIT_AUTHOR_NAME=&quot;$an&quot;\nexport GIT_AUTHOR_EMAIL=&quot;$am&quot;\nexport GIT_COMMITTER_NAME=&quot;$cn&quot;\nexport GIT_COMMITTER_EMAIL=&quot;$cm&quot;\n&#x27;\n完成后运行 ./fix.sh 即可。\nPS: 跑完记得删脚本，或者直接把脚本内容改好之后拖进终端\n","categories":["笔记本"],"tags":["Git"]},{"title":"修改 Git 配置加速 Clone GitHub 源码","url":"//post/clone-github-repo-faster/","content":"设置代理：\n# socks5协议，1080端口修改成自己的本地代理端口\ngit config --global http.https://github.com.proxy  socks5://127.0.0.1:1080\ngit config --global https.https://github.com.proxy socks5://127.0.0.1:1080\n\n# http协议，7890端口修改成自己的本地代理端口\ngit config --global http.https://github.com.proxy  http://127.0.0.1:7890\ngit config --global https.https://github.com.proxy http://127.0.0.1:7890\n之后运行 git config -l 即可查看代理设置情况。\n清除代理：\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n","categories":["笔记本"],"tags":["Git"]},{"title":"浅谈跨域资源共享（CORS）","url":"//post/cors/","content":"跨域资源共享（CORS）是一种基于 HTTP 头来让网页的受限资源能够被其他域名的页面访问的一种机制。通过该机制，页面能够自由地使用不同源（cross-origin）的图片、样式、脚本、iframes 以及视频。\n在通常情况下，一些跨域的请求（特别是 ajax）会被同源策略（same-origin policy）禁止。而 CORS 定义了一种方式，可以允许 Web 应用服务器进行跨源访问控制，从而使得跨源数据传输得以安全进行。\n\n目前几乎所有现代浏览器都支持 CORS ，可以在 MDN 上找到有关浏览器兼容性的信息。\n浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。这两个术语并不属于 Fetch 规范。\n简单请求\n某些请求不会触发 CORS 预检请求。本文中称这样的请求为「简单请求」。\n定义\n若请求满足所有下述条件则该请求可被视为「简单请求」：\n\n请求方法为 HEAD，GET 或 POST 。\n除了被用户代理自动设置的字段以及在 Fetch 规范中被定义为 禁用头名称 的字段之外，HTTP 头信息只允许包含 Fetch 规范定义的 对 CORS 安全的首部字段集合 ：\n\nAccept\nAccept-Language\nContent-Language\nLast-Event-ID\nContent-Type 仅限于三个值：application/x-www-form-urlencoded、multipart/form-data 或 text/plain\n\n\n请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。\n请求中没有使用 ReadableStream 对象。\n\n简单请求的设计是为了兼容表单（form），因为历史上表单就一直可以发出跨域请求。\n基本流程\n对于简单请求，浏览器会直接发出 CORS 请求。具体来说，就是增加一个名为 Origin 的字段到 HTTP 头中。\nGET /cors HTTP/1.1\nOrigin: http://foo.example\nHost: foo.example\nAccept-Language: zh-CN\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n上面的头信息中，Origin 字段用来说明本次请求来自哪个源，服务器端根据这个值决定是否同意这个请求。\n如果 Origin 指定的源在许可范围内，服务器返回的响应头会添加以下几个字段：\n\nAccess-Control-Allow-Origin 字段表明服务器允许的请求源，其值要么为请求时 Origin 字段的值，要么为 * 。\nAccess-Control-Allow-Credentials 字段表明服务器是否允许发送凭据信息，该字段是可选的，默认情况下不允许发送凭据信息。\nAccess-Control-Expose-Headers 字段表明服务器指定的允许获取的 HTTP 头字段，该字段是可选的。\n\n如果 Origin 指定的源不在许可范围内，服务器会返回一个不带 Access-Control-Allow-Origin 字段的正常的 HTTP 回应。当浏览器发现没有包含这个字段就知道请求出错了，会抛出一个异常。需要注意的是，这种错误的 HTTP 响应码有可能是 200 或 204 ，因此无法通过状态码识别。\n代码示例\nfetch(&#x27;https://baoshuo.ren&#x27;, &#123;\n  mode: &#x27;no-cors&#x27;,\n&#125;);\n非简单请求 —— 预检请求\n上面提到，CORS 请求除了简单请求外还有非简单请求。简单来说，非简单请求时对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE ，或者 HTTP 头中 Content-Type 字段的值不是上文所述的那三个「对 CORS 安全的 Content-type 字段值」。\n基本流程\n非简单请求的 CORS 请求，会在正式通信之前增加一次称为「预检」（preflight）的 HTTP 查询请求。\n\n从上面的报文中可以看到，浏览器先发送了一个使用 OPTIONS 方法的「预检请求」。OPTIONS 是 HTTP/1.1 协议中定义的方法，用以从服务器获取更多信息。该方法不会对服务器资源产生影响。预检请求中同时携带了下面两个首部字段：\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type\n\nAccess-Control-Request-Method 字段将告知服务器实际请求将要使用的方法。\nAccess-Control-Request-Headers 字段将告知服务器实际请求将要携带的自定义请求首部字段。\n\n服务器将据此决定是否允许实际请求，并返回相应的响应。\nAccess-Control-Allow-Origin: http://foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 86400\n\nAccess-Control-Allow-Origin 字段与简单请求时并无差异。\nAccess-Control-Allow-Methods 字段表明服务器允许哪些方法发起请求。\nAccess-Control-Allow-Headers 字段表明服务器允许请求头中携带的额外字段。\nAccess-Control-Allow-Credentials 字段与简单请求时并无差异。\nAccess-Control-Max-Age 字段表明该响应的有效时间，在有效时间内浏览器无须为同一请求再次发起预检请求。需要注意的是浏览器自身维护了一个最大有效时间，如果该字段的值超出了浏览器维护的最大有效时间则不会生效。\n\n如果服务器「否定」了一个预检请求，也会返回一个正常的 HTTP 回应，但不包含任何与 CORS 相关的 HTTP 头信息字段。此时浏览器就会认定服务器不同意预检请求，并抛出一个错误。\n一旦通过了预检请求，接下来的步骤就都和简单请求一样了，此处不过多赘述。\n代码示例\nfetch(&#x27;https://baoshuo.ren&#x27;, &#123;\n  mode: &#x27;cors&#x27;,\n&#125;);\n附带身份凭证的 CORS 请求\n上文中提到，CORS 请求默认不发送凭据信息（Cookie 和 HTTP 认证信息），如果要向服务器发送凭据，不仅需要服务器指定 HTTP 头的 Access-Control-Allow-Credentials 字段，还需要在请求时指明是否发送凭据信息。\n代码示例\n使用 XmlHttpRequest 向服务器发起 CORS 请求时，需要将 withCredentials 标志设置为 true 。\nvar xhr = new XMLHttpRequest();\nxhr.open(&#x27;GET&#x27;, &#x27;https://baoshuo.ren&#x27;, true);\nxhr.withCredentials = true;\nxhr.onreadystatechange = handler; // 此处的 Handler 需要自行定义\nxhr.send();\n使用 fetch 进行请求时则需要设置 credentials 为 include 才能使浏览器向跨域源发送包含凭据的请求。\nfetch(&#x27;https://baoshuo.ren&#x27;, &#123;\n  credentials: &#x27;include&#x27;,\n&#125;);\n与 JSONP 的比较\nCORS 与 JSONP 的使用目的是相同的，但是 CORS 比 JSONP 更强大。\nJSONP 的缺点是只支持 GET 请求，而 CORS 则支持所有类型的 HTTP 请求。如果网站需要兼容老式浏览器或者需要向不支持 CORS 的网站请求数据仍然需要使用 JSONP 。\n参考资料\n\n跨源资源共享（CORS），MDN Web Docs，2021 年 8 月 8 日。\n跨域资源共享 CORS 详解，阮一峰的网络日志，2016 年 4 月 12 日。\n跨域资源共享，维基百科，2021 年 5 月 3 日。\n3.2. CORS protocol，Fetch Standard，2021 年 9 月 30 日。\n参数，WorkerOrGlobalScope.fetch()，MDN Web Docs，2021 年 9 月 1 日。\n\n","categories":["技术向"],"tags":["Web","HTTP","JavaScript"]},{"title":"浅谈网页「深色模式」的实现","url":"//post/darkmode/","content":"随着越来越多的操作系统、浏览器开始支持 Dark Mode 和相应的 Media Queries Level 5，越来越多的网站开始添加深色模式。\n我的博客其实早在 2019 年末就支持了深色模式，但一直没有很好地实现这个功能。于是在 2020 年的那个超长寒假，我把博客系统更换到了 Typecho，并与某位大佬一起实现了一个深色模式插件（原文链接已丢失）。正好今年寒假把博客换到了 Hexo 上，趁着主题代码还热乎、能看懂，赶紧来写写我的深色模式是如何实现的。\n\n\n关于深色模式\n\nDark themes reduce the luminance emitted by device screens, while still meeting minimum color contrast ratios. They help improve visual ergonomics by reducing eye strain, adjusting brightness to current lighting conditions, and facilitating screen use in dark environments – all while conserving battery power.\n\n翻译\n深色主题能降低设备屏幕发出的亮度，同时仍然满足最小的颜色对比度。它们有助于改善视觉效果、减少眼睛疲劳，调整亮度以适应当前的照明条件，并有助于在黑暗环境中使用屏幕，同时节省电池电量。\n\n界面设计\n颜色\n不要使用 100% 的纯黑\nGoogle 在 Material Design 的设计指南中对于深色模式列出了一系列设计规范，其中第一条就是 「不要使用 100% 的纯黑」 。\nGoogle 推荐将深色表面和 100% 白色文字的对比度至少设置为为 15.8:1 （Dark surfaces and 100% white body text have a contrast level of at least 15.8:1）\n为什么呢？因为纯白色会反射所有波长的光线，而纯黑色会吸收所有光线，这是对比度最大的两种颜色，白底黑字时，文字过于刺眼，而黑底白字时，文字又可能难以辨认。如果长时间阅读这样的文字，势必会让眼睛感觉到疲劳，与深色模式开发的初衷背道而驰。\nGoogle 推荐使用 #121212 来作为深色模式的主背景色。\n\nA dark theme uses dark grey, rather than black, as the primary surface color for components. Dark grey surfaces can express a wider range of color, elevation, and depth, because it’s easier to see shadows on grey (instead of black).\nDark grey surfaces also reduce eye strain, as light text on a dark grey surface has less contrast than light text on a black surface.\n\n翻译\n深色主题应使用深灰而不是黑色作为组件的主要表面颜色。深灰色表面可以表示更广泛的颜色，高度和深度范围，因为更容易看到灰色阴影（而不是黑色）。\n深灰色的表面还可以减少眼睛疲劳，因为深灰色表面上的浅色文本的对比度低于黑色表面上的浅色文本。\n\n许多常见应用的深色模式背景色的 H 值都在 200~250 范围内（即蓝色范围），在纯灰色的基础上稍微偏冷一些。不过也有一些例外，比如网易云音乐的背景色有点偏暖，可能和其品牌色有关（网易云音乐的品牌色是暖红色）。\n\n不要让亮色占据过多面积\n在深色主题中应该尽可能地使用有限的颜色进行强调，并使大部分空间显示出深色表面。\n\n\n\n不要使用过高的色彩饱和度\n在深色模式下，过高的色彩饱和度可能会使文本像下方这样难以辨识（清晰度降低）：\n\n色彩饱和度过高还可能会导致文本在深色背景上产生光学振动，从而引起眼睛疲劳。\n最佳做法是使用「去饱和色」，这样可以提高清晰度，并减少视觉抖动。\n\n层次\n在浅色模式下，我们通常会使用投影来区分页面内元素的层次，但这种方法在深色模式中如果使用不当，不仅起不到区分页面内元素层次的作用，还会影响整体观感，起到反作用。\nGoogle 给出的示例：\n\n\nWWDC 2019 中苹果设计师讲到深色模式的文本：\n\nApple 认为在浅色模式下投影能轻松地区分两个视觉元素，但是在深色模式下作用甚微。所以他们建议在深色背景下，对前置元素的使用稍亮的灰色。\n\n\n在组件表面(1)上放置一个白色半透明的遮罩层(2)，就可以体现出深色模式中的层次。\n代码实现\n这个主题使用了向 body 添加 .dark 类来实现深色模式。\n利用 Media Query 简单实现深色模式\n可以直接为深色模式编写独立的样式：\nbody &#123;\n  color: #111;\n&#125;\n\n@media (prefers-color-scheme: dark) &#123;\n  body.dark &#123;\n    color: #eee;\n  &#125;\n&#125;\n更进一步地，还可以使用 CSS Variable 来简化代码：\n:root &#123;\n  --text: #111;\n&#125;\n\n@media (prefers-color-scheme: dark) &#123;\n  :root &#123;\n    --text: #eee;\n  &#125;\n&#125;\n\nbody &#123;\n  color: var(--text);\n&#125;\n还可以利用 &lt;link&gt; 标签的 Media Query 来有条件地加载文件，节省流量：\n/* main.css */\nbody &#123;\n  color: #111;\n&#125;\n\n/* dark.css */\nbody &#123;\n  color: #eee;\n&#125;\n需要注意 CSS 选择器的权重，因此作为可选的 dark.css 一定要放在 main.css 之后加载。\n&lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot; /&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;dark.css&quot; media=&quot;(prefers-color-scheme: dark)&quot; /&gt;\n使用 Media Query + JavaScript 实现跟随系统/定时切换深色模式\n:root &#123;\n  --text: #111;\n&#125;\n\n.dark &#123;\n  --text: #eee;\n&#125;\n\nbody &#123;\n  color: var(--text);\n&#125;\n这段 CSS 与先前的并没有什么差别，而且与其相对应的 JavaScript 也很好编写。\ndocument.addEventListener(&#x27;DOMContentLoaded&#x27;, (event) =&gt; &#123;\n  if (\n    (window.matchMedia &amp;&amp;\n      window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;).matches) ||\n    new Date().getHours() &gt;= 19 ||\n    new Date().getHours() &lt; 7\n  ) &#123;\n    document.body.classList.add(&#x27;dark&#x27;);\n  &#125;\n&#125;);\n此段代码中开启深色模式的条件有两个：\n\n系统开启了深色模式\n时间在晚 7 点~早 7 点之间\n\n只要满足上述任意一个条件，深色模式就会被开启。\n使用 Media Query + Toggle Button 实现跟随系统/手动切换深色模式\n:root &#123;\n  --text: #111;\n&#125;\n\n.dark &#123;\n  --text: #eee;\n&#125;\n\nbody &#123;\n  color: var(--text);\n&#125;\n这段 CSS 与先前的并没有什么差别，下面就是令人头大的 JavaScript 部分了。\n先定义一些常量：\nconst rootElement = document.documentElement;\nconst darkModeClassName = &#x27;dark&#x27;;\nconst darkModeStorageKey = &#x27;user-color-scheme&#x27;;\nconst darkModeTogglebuttonElement = document.getElementById(\n  &#x27;dark-mode-toggle-button&#x27;\n);\nconst validColorModeKeys = &#123; dark: true, light: true &#125;;\nconst invertDarkModeObj = &#123; dark: &#x27;light&#x27;, light: &#x27;dark&#x27; &#125;;\n接下来使用 try &#123;&#125; catch (e) &#123;&#125; 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：\nconst setLocalStorage = (key, value) =&gt; &#123;\n  try &#123;\n    localStorage.setItem(key, value);\n  &#125; catch (e) &#123;&#125;\n&#125;;\n\nconst removeLocalStorage = (key) =&gt; &#123;\n  try &#123;\n    localStorage.removeItem(key);\n  &#125; catch (e) &#123;&#125;\n&#125;;\n\nconst getLocalStorage = (key) =&gt; &#123;\n  try &#123;\n    return localStorage.getItem(key);\n  &#125; catch (e) &#123;\n    return null; // 与 localStorage 中没有找到对应 key 的行为一致\n  &#125;\n&#125;;\n获取当前 prefers-color-scheme 的方法：\nconst getModeFromCSSMediaQuery = () =&gt; &#123;\n  return window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;).matches\n    ? &#x27;dark&#x27;\n    : &#x27;light&#x27;;\n&#125;;\n再写一个清除 Class 和 LocalStorage 的函数：\nconst resetRootDarkModeClassAndLocalStorage = () =&gt; &#123;\n  rootElement.classList.remove(darkModeClassName);\n  rootElement.classList.remove(invertDarkModeObj[darkModeClassName]);\n  removeLocalStorage(darkModeStorageKey);\n&#125;;\n接下来就是起主要作用的函数了，负责为 &lt;body&gt; 标签增删深色模式的 Class ：\nconst applyCustomDarkModeSettings = (mode) =&gt; &#123;\n  // 接受从「开关」处传来的模式，或者从 localStorage 读取\n  const currentSetting = mode || getLocalStorage(darkModeStorageKey);\n\n  if (currentSetting === getModeFromCSSMediaQuery()) &#123;\n    // 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式\n    resetRootDarkModeClassAndLocalStorage();\n  &#125; else if (validColorModeKeys[currentSetting]) &#123;\n    rootElement.classList.add(currentSetting);\n    rootElement.classList.remove(invertDarkModeObj[currentSetting]);\n  &#125; else &#123;\n    // 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null\n    // 或者 localStorage 被篡改，currentSetting 不是合法值\n    resetRootDarkModeClassAndLocalStorage();\n  &#125;\n&#125;;\n还需要一个函数负责获取相反的显示模式，并将其存储到 LocalStorage 中\nconst toggleCustomDarkMode = () =&gt; &#123;\n  let currentSetting = getLocalStorage(darkModeStorageKey);\n\n  if (validColorModeKeys[currentSetting]) &#123;\n    // 从 localStorage 中读取模式，并取相反的模式\n    currentSetting = invertDarkModeObj[currentSetting];\n  &#125; else if (currentSetting === null) &#123;\n    // localStorage 中没有相关值，或者 localStorage 抛了 Error\n    // 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式\n    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\n  &#125; else &#123;\n    // 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值\n    return; // 直接 return;\n  &#125;\n  // 将相反的模式写入 localStorage\n  setLocalStorage(darkModeStorageKey, currentSetting);\n\n  return currentSetting;\n&#125;;\n相关的函数都定义完了，是时候添加执行了：\n// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）\napplyCustomDarkModeSettings();\n// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效\ndarkModeTogglebuttonElement.addEventListener(&#x27;click&#x27;, () =&gt; &#123;\n  applyCustomDarkModeSettings(toggleCustomDarkMode());\n&#125;);\n\n使用 Media Query + Toggle Button + JavaScript 实现跟随系统/定时/手动切换深色模式\nCSS 和大部分 JavaScript 代码没有变化，此处仅说明有变化的代码。\n在函数 toggleCustomDarkMode() 中添加写入一个时间戳的操作：\n@@ -85,19 +114,20 @@\n const toggleCustomDarkMode = () =&gt; &#123;\n     let currentSetting = getLocalStorage(darkModeStorageKey);\n\n     if (validColorModeKeys[currentSetting]) &#123;\n         // 从 localStorage 中读取模式，并取相反的模式\n         currentSetting = invertDarkModeObj[currentSetting];\n     &#125; else if (currentSetting === null) &#123;\n         // localStorage 中没有相关值，或者 localStorage 抛了 Error\n         // 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式\n         currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];\n     &#125; else &#123;\n         // 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值\n         return; // 直接 return;\n     &#125;\n     // 将相反的模式写入 localStorage\n     setLocalStorage(darkModeStorageKey, currentSetting);\n+    setLocalStorage(darkModeTimeKey, +new Date());\n\n     return currentSetting;\n&#125;;\n重新编写入口，用来检测是否符合定时条件：\nconst initDarkMode = (nowTime) =&gt; &#123;\n  const lastSunrise = (\n    nowTime.getHours() &lt; 7\n      ? new Date(\n          nowTime.getFullYear(),\n          nowTime.getMonth(),\n          nowTime.getDate() - 1,\n          7\n        )\n      : new Date(\n          nowTime.getFullYear(),\n          nowTime.getMonth(),\n          nowTime.getDate(),\n          7\n        )\n  ).getTime(); // 日出\n  const lastSunset = (\n    nowTime.getHours() &lt; 19\n      ? new Date(\n          nowTime.getFullYear(),\n          nowTime.getMonth(),\n          nowTime.getDate() - 1,\n          19\n        )\n      : new Date(\n          nowTime.getFullYear(),\n          nowTime.getMonth(),\n          nowTime.getDate(),\n          19\n        )\n  ).getTime(); // 日落\n  const darkModeTime = new Date(\n    parseInt(getLocalStorage(darkModeTimeKey) || &#x27;0&#x27;, 10)\n  ).getTime();\n  nowTime = nowTime.getTime();\n  if (lastSunrise &lt; lastSunset) &#123;\n    // 日出比日落早表示晚上\n    if (lastSunset &lt; darkModeTime) &#123;\n      // 当晚自行调整过日间/夜间模式\n      applyCustomDarkModeSettings();\n    &#125; else &#123;\n      applyCustomDarkModeSettings(darkModeClassName);\n    &#125;\n  &#125; else &#123;\n    // 日出比日落晚表示白天\n    if (lastSunrise &lt; darkModeTime) &#123;\n      applyCustomDarkModeSettings();\n    &#125; else &#123;\n      applyCustomDarkModeSettings(invertDarkModeObj[darkModeClassName]);\n    &#125;\n  &#125;\n&#125;;\n\ninitDarkMode(new Date());\n\n深色模式下的页面滚动条\n只需在页面的 &lt;head&gt; 中添加一个 &lt;meta name=&quot;color-scheme&quot;&gt; 的标签即可让页面滚动条的样式跟随深色模式变化。\n&lt;!--\n  The page supports both light and dark color schemes,\n  and the page author prefers light.\n--&gt;\n&lt;meta name=&quot;color-scheme&quot; content=&quot;light dark&quot; /&gt;\n如果你使用类似上一节所示的切换按钮的话，别忘了添加下面的 CSS ：\n/*\n  The page supports both light and dark color schemes,\n  and the page author prefers light.\n*/\n:root &#123;\n  color-scheme: light;\n&#125;\n.dark &#123;\n  color-scheme: dark;\n&#125;\nDisqus 相关\n如果网页上有 Disqus 评论系统，请添加下方的 CSS 以避免 Disqus 的自动深色模式失效。\niframe &#123;\n  color-scheme: light;\n&#125;\n来源：Disqus iframe transparency won’t work on Chrome 87 - StackOverflow\n参考资料\n\nDark theme - Material Design\nWhat’s New in iOS Design - WWDC 2019\n你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持 - Sukka’s Blog\nImproved dark mode default styling with the color-scheme CSS property and the corresponding meta tag - web.dev\n\n文章头图来自：https://material.io/design/color/dark-theme.html\n","categories":["技术向"],"tags":["Web","前端"]},{"title":"初探 DN42 网络","url":"//post/dn42-network/","content":"DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。\n\nDN42 适合以下类别的用户：\n\n想要研究网络技术，练习服务器、路由器等网络设备配置，甚至后续在真实互联网建立 AS 的用户。\n已经拥有真实 AS ，但担心自己配置错误广播出错误路由、干掉半个互联网，希望有个地方测试的用户。\n\nDN42 不适合以下类别的用户：\n\n单纯想要保护隐私、规避网络审查的用户\n在网内消耗大量流量，例如用于解锁流媒体服务的用户\n\n所以，DN42 的使用门槛还是比较高的。这与在真实互联网中一样，你要扮演一个 ISP （互联网服务提供商），注册自己的个人信息， ASN 号码，IPv4 和 IPv6 的地址池，并且使用 BGP 在自己的服务器上广播它们。你还要和其它的用户联系，和他们进行 Peering（对等互联），一步步进入完整的 DN42 网络。\n\nDN42 在 172.20.0.0/14 和 fd00::/8 上运行，而这两个 IP 段都是分配给内网使用的。换句话说，你在 DN42 上怎么折腾，都不会影响到服务器其它的互联网连接。\n你可以通过加入 Telegram 群组 或者 IRC 频道 来寻求帮助。\n请注意，DN42 是一个测试网络，所有人都在帮助所有人。即使你不小心搞砸了，也没有人会指责你。\n欢迎在搭建完成自己的内网以后与我进行对等互联，可以访问 dn42.baoshuo.ren 获取更多信息。\n若无特别说明，本文中所使用的系统环境均为 Ubuntu 20.04.2 LTS ，本文中所有使用 &lt;&gt; 包裹的内容均需要自行替换。\n注册 DN42\n在注册过程中会大量使用到一些 UNIX 工具（如 Git 、 GPG 等），所以最好使用 Linux 或者 macOS 系统完成整个流程，如果你正在使用 Windows 系统，那么可以使用 WSL 。\n注册前的准备\n\n了解如何编写 RPSL （RFC2622） 格式的配置文件。\n了解如何使用 CIDR （RFC1518，RFC1519） 格式表示 IP 地址块。\n熟悉 DN42 Wiki 中的 Getting-Started 、 Address Space 页面中的内容。\n在 DN42 Git 中有一个注册好的账户。\n会使用英文与他人交流。\n\n克隆 DN42 注册表 Git 仓库\n将 dn42/registry 这个仓库 clone 到本地。\n新建一个名为 &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/&lt;自定义名称&gt; 的分支。\ngit checkout -b &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/register\n注册维护者\n在仓库的 data/mntner 目录下新建一个文件，命名为 &lt;昵称&gt;-MNT 。\n文件内填入以下内容：\nmntner:             &lt;昵称&gt;-MNT\nadmin-c:            &lt;昵称&gt;-DN42\ntech-c:             &lt;昵称&gt;-DN42\nauth:               &lt;身份验证信息&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42\n示例：data/mntner/BAOSHUO-MNT at dn42/registry@master\n\nmntner ：维护者（全称为 Maintainer），这个维护者的名称，与文件名相同。\nadmin-c ：管理员联系信息（Admin Contact），需要指向 注册联系人 一节中的 person 文件，一般为 &lt;昵称&gt;-DN42 。\ntech-c ：技术人员联系信息（Tech Contact），需要指向 注册联系人 一节中的 person 文件，一般为 &lt;昵称&gt;-DN42 。\nauth ：身份验证信息，接受 GPG 公钥 和 SSH 公钥 ，可以查看 Registry Authentication 页面获取详细信息。\nmnt-by ：由谁维护（全称为 Maintain by），此处需要指向这个维护者本身，即 &lt;昵称&gt;-MNT 。\nsource ：信息来源，默认为 DN42 。\n\n注册联系人\n在仓库的 data/person 目录下新建一个文件，命名为 &lt;昵称&gt;-DN42 。\nperson:             &lt;姓名&gt;\ncontact:            &lt;邮箱&gt;\nnic-hdl:            &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42\n示例：data/person/BAOSHUO-DN42 at dn42/registry@master\n\nperson ：姓名。\ncontact ：联系方式，一般为邮箱。\nnic-hdl ：NIC 句柄（即 NIC handle），指向文件本身，与文件名相同。\nmnt-by ：由谁维护（全称为 Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。\nsource ：固定为 DN42。\n\n注册 ASN\n在国际互联网上，ASN 范围 4200000000 - 4294967294 是被保留以供私人使用的，而 DN42 占用的就是其中的一块： 4242420000 - 4242429999 。目前 DN42 开放注册的 ASN 范围是 4242420000 - 4242423999 ，只需要在这个区间里面挑一个没有被他人占用的号码即可。\nDN42 Registry 的管理员 burble 提供了一个在线查看可用 ASN 的工具: DN42 Free ASN Explorer 。访问该页面就会随机生成 10 个当前还未注册的 ASN 以便使用。\n在仓库的 data/aut-num 目录下新建一个文件，命名为刚才选中的 AS 号码。\naut-num:            &lt;AS 号码, 带 AS 前缀&gt;\nas-name:            &lt;AS 名称&gt;\ndescr:              &lt;AS 简介&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42\n示例：data/aut-num/AS4242420247 at dn42/registry@master\n\naut-num ：AS 号，此处可以使用私有 AS 号码，也可以使用公网 AS 号码（不推荐）。\nas-name ：AS 的名称，可以设置为 &lt;昵称&gt;-AS 。\ndescr ：（选填）AS 简介，随意填写。\nadmin-c ：管理员联系信息（Admin Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。\ntech-c ：技术员联系信息（Tech Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。\nmnt-by ：由谁维护（Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。\nsource ：如果使用私有 AS 号码则此处填写 DN42 ，否则填写 ASN 所对应的 RIR 名称。\n\n注册 IPv4 地址块\n如果您想在 DN42 上创建一个 IPv6 Only 网络，请不要注册 IPv4 地址块，并忽略 添加路由记录 一节中的 IPv4 部分。\n在国际互联网上， 172.16.0.0/12 是由 RFC1918 规定的由专用网络使用的 IP 地址块，而 DN42 占用的就是其中的一块： 172.20.0.0/14 。目前 DN42 开放注册的地址块范围可以在 Address Space 页面上查看。\nDN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv4 地址块的网站，点击 DN42 Free IPv4 Explorer 即可随机生成 10 个当前还未注册的 IPv4 地址块。\n和在真实互联网上一样，DN42 的 IPv4 地址资源也是十分紧缺的，因此 IPv4 的申请原则是「够用就好」。如果节点数量足够少，只申请 /28 或 /29 大小的地址块就够用了。\n在仓库的 data/inetnum 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 _ 代替 /。\ninetnum:            &lt;起始 IP 地址&gt; - &lt;结束 IP 地址&gt;\ncidr:               &lt;IP 地址块的 CIDR 格式&gt;\nnetname:            &lt;IP 地址块名称&gt;\ndescr:              &lt;IP 地址块简介&gt;\ncountry:            &lt;IP 地址块所属国家&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nstatus:             ASSIGNED\nsource:             DN42\n示例：data/inetnum/172.23.250.64_26 at dn42/registry@master\n\ninetnum ：这个地址块的范围。\ncidr ：以 CIDR 格式表示的这个地址块的范围，含义与 inetnum 相同。\nnetname ：这个地址块的名称。可以设置为 &lt;昵称&gt;-IPV4 。\ndescr ：（选填）这个地址块的简介。\nnserver ：（选填）IP 地址反向解析的 DNS 服务器。\ncountry ：你的 ISO 3166 国家代码，填 CN 代表中国大陆地区。\nadmin-c ：管理员联系信息（Admin Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。\ntech-c ：技术员联系信息（Tech Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。\nmnt-by ：由谁维护（Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。\nstatus ：固定为 ASSIGNED。\nsource ：固定为 DN42。\n\n注册 IPv6 地址块\n在国际互联网上， fc00::/7 是由 RFC4193 定义的 唯一本地地址，而 DN42 占用的就是其中的一块： fd00::/8 。目前 DN42 开放注册的地址块范围可以在 Address Space 页面上查看。\nDN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv6 地址块的网站，点击 DN42 Free IPv6 Explorer 即可随机生成 10 个当前还未注册的 IPv6 地址块。\n在仓库的 data/inet6num 目录下新建一个文件，命名为 IPv6 地址块的 CIDR 格式，并使用 _ 代替 /。\ninet6num:           &lt;起始 IPv6 地址&gt; - &lt;结束 IPv6 地址&gt;\ncidr:               &lt;IPv6 地址块的 CIDR 格式&gt;\nnetname:            &lt;IPv6 地址块名称&gt;\ndescr:              &lt;IPv6 地址块简介&gt;\ncountry:            &lt;IPv6 地址块所属国家&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nstatus:             ASSIGNED\nsource:             DN42\n示例：data/inet6num/fd42:4242:247::_48 at dn42/registry@master\n\ninet6num ：这个地址块的范围。\ncidr ：使用 CIDR 格式表示的这个地址块的范围，含义与 inet6num 相同。\nnetname ：这个地址块的名称。可以设置为 &lt;昵称&gt;-IPV6 。\ndescr ：（选填）这个地址块的简介。\nnserver ：（选填）IP 地址反向解析的 DNS 服务器。\ncountry ：你的 ISO 3166 国家代码，填 CN 代表中国大陆地区。\nadmin-c ：管理员联系信息（Admin Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。\ntech-c ：技术员联系信息（Tech Contact），指向你在 注册联系人 一节中注册的 NIC 句柄。\nmnt-by ：由谁维护（Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。\nstatus ：固定为 ASSIGNED。\nsource ：固定为 DN42。\n\n添加路由记录\n在仓库的 data/route 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 _ 代替 /。\nroute:              &lt;IP 地址块的 CIDR 格式&gt;\ndescr:              &lt;简介&gt;\norigin:             &lt;AS 号码, 带 AS 前缀&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42\n\nroute ：这个 IPv4 地址块的范围，CIDR 格式。\ndescr ：（选填）路由简介。\norigin ：填写你的 AS 号码。\nmnt-by ：由谁维护（Maintain by），指向你在 注册维护者 一节中注册的的维护者信息。\nsource ：固定为 DN42。\n\n如需添加 IPv6 路由，将本节所述的 route 改为 route6 即可，此处不再赘述。\n上传更改到 DN42 注册表\n完成以上步骤之后，使用 git diff 查看文件变动，检查无误后，使用 git add . 暂存。\n\n运行仓库根目录下的 ./check-my-stuff &lt;维护者&gt; 检查文件内容是否有误，确定无误后，提交。\n在提交时，如果需要使用 GPG 签名，需要在添加 -S 参数，如 git commit -S ；如果使用 SSH 签名，请直接使用 git commit 进行提交，待提交后再进行签名工作。\n使用下面的命令进行签名：\n./sign-my-commit --ssh --key &lt;SSH 私钥文件&gt; &lt;维护者&gt;\n之后使用下面的命令上传即可：\ngit push --set-upstream origin &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/register\n\n上传后在 DN42 Git 中切换到自己的分支，并创建一个合并请求，等待管理员审核。\n注意事项\n\n各个项目的键和值之间有一长串空格，键、冒号与空格的总长度必须是 20 个字符，且不能随意修改。为了编辑时的方便，注册表中提供了一个脚本 fmt-my-stuff ，只需要使用 ./fmt-my-stuff &lt;维护者&gt; 即可自动完成此步骤。\nDN42 Registry 的工作语言是英语。请使用英语完成全部流程，以免出现不必要的麻烦。\n请认真对待管理员提出的更改请求，按照要求完成全部修改后直接上传到原分支下即可，无需再新开合并请求。\n推荐使用随机的 IPv4 与 IPv6 地址块，避免与其他网络重复。请明白，DN42 并不是这些网络资源的权威注册机构。\n\nDN42 BIRD2 使用入门\n如无特别说明，本部分中所使用的 BIRD 版本为 2.0.7 。\n安装 BIRD2\napt update\napt install bird2 -y\n一般情况下，执行此命令即可自动安装 BIRD2 并启动系统服务。\n编写 BIRD 配置文件\n对于刚刚加入 DN42 网络的新人来说，推荐使用 howto/Bird2 - DN42 Wiki 中的示例配置以节省配置时间。\n这套配置默认使用了 Multi Protocol BGP ，如果不想使用此功能请自行编写配置文件，如果没有 DN42 IPv4 地址需要去掉文件中的 IPv4 部分。\n将以下配置写入到 /etc/bird/bird.conf 中：\ndefine OWNAS       = &lt;AS 号&gt;;\ndefine OWNIP       = &lt;DN42 IPv4 地址&gt;;\ndefine OWNIPv6     = &lt;DN42 IPv6 地址&gt;;\ndefine OWNNET      = &lt;DN42 IPv4 地址块, CIDR 格式&gt;;\ndefine OWNNETv6    = &lt;DN42 IPv6 地址块, CIDR 格式&gt;;\ndefine OWNNETSET   = [ &lt;DN42 IPv4 地址块, CIDR 格式&gt;+ ];\ndefine OWNNETSETv6 = [ &lt;DN42 IPv6 地址块, CIDR 格式&gt;+ ];\n\nrouter id OWNIP;\n\nprotocol device &#123;\n    scan time 10;\n&#125;\n\nfunction is_self_net() &#123;\n    return net ~ OWNNETSET;\n&#125;\n\nfunction is_self_net_v6() &#123;\n    return net ~ OWNNETSETv6;\n&#125;\n\nfunction is_valid_network() &#123;\n    return net ~ [\n        172.20.0.0/14&#123;21,29&#125;, # dn42\n        172.20.0.0/24&#123;28,32&#125;, # dn42 Anycast\n        172.21.0.0/24&#123;28,32&#125;, # dn42 Anycast\n        172.22.0.0/24&#123;28,32&#125;, # dn42 Anycast\n        172.23.0.0/24&#123;28,32&#125;, # dn42 Anycast\n        172.31.0.0/16+,       # ChaosVPN\n        10.100.0.0/14+,       # ChaosVPN\n        10.127.0.0/16&#123;16,32&#125;, # neonetwork\n        10.0.0.0/8&#123;15,24&#125;     # Freifunk.net\n    ];\n&#125;\n\nroa4 table dn42_roa;\nroa6 table dn42_roa_v6;\n\nprotocol static &#123;\n    roa4 &#123; table dn42_roa; &#125;;\n    include &quot;/etc/bird/roa_dn42.conf&quot;;\n&#125;;\n\nprotocol static &#123;\n    roa6 &#123; table dn42_roa_v6; &#125;;\n    include &quot;/etc/bird/roa_dn42_v6.conf&quot;;\n&#125;;\n\nfunction is_valid_network_v6() &#123;\n  return net ~ [\n    fd00::/8&#123;44,64&#125; # ULA address space as per RFC 4193\n  ];\n&#125;\n\nprotocol kernel &#123;\n    scan time 20;\n\n    ipv6 &#123;\n        import none;\n        export filter &#123;\n            if source = RTS_STATIC then reject;\n            krt_prefsrc = OWNIPv6;\n            accept;\n        &#125;;\n    &#125;;\n&#125;;\n\nprotocol kernel &#123;\n    scan time 20;\n\n    ipv4 &#123;\n        import none;\n        export filter &#123;\n            if source = RTS_STATIC then reject;\n            krt_prefsrc = OWNIP;\n            accept;\n        &#125;;\n    &#125;;\n&#125;\n\nprotocol static &#123;\n    route OWNNET reject;\n\n    ipv4 &#123;\n        import all;\n        export none;\n    &#125;;\n&#125;\n\nprotocol static &#123;\n    route OWNNETv6 reject;\n\n    ipv6 &#123;\n        import all;\n        export none;\n    &#125;;\n&#125;\n\ntemplate bgp dnpeers &#123;\n    local as OWNAS;\n    path metric 1;\n\n    ipv4 &#123;\n        import filter &#123;\n            if is_valid_network() &amp;&amp; !is_self_net() then &#123;\n                if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then &#123;\n                    print &quot;[dn42] ROA check failed for &quot;, net, &quot; ASN &quot;, bgp_path.last;\n                    reject;\n                &#125;\n                accept;\n            &#125;\n            reject;\n        &#125;;\n\n        export filter &#123;\n            if is_valid_network() &amp;&amp; source ~ [RTS_STATIC, RTS_BGP] then accept;\n            reject;\n        &#125;;\n        import limit 1000 action block;\n    &#125;;\n\n    ipv6 &#123;\n        import filter &#123;\n            if is_valid_network_v6() &amp;&amp; !is_self_net_v6() then &#123;\n                if (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then &#123;\n                    print &quot;[dn42] ROA check failed for &quot;, net, &quot; ASN &quot;, bgp_path.last;\n                    reject;\n                &#125;\n                accept;\n            &#125;\n            reject;\n        &#125;;\n        export filter &#123;\n            if is_valid_network_v6() &amp;&amp; source ~ [RTS_STATIC, RTS_BGP] then accept;\n            reject;\n        &#125;;\n        import limit 1000 action block;\n    &#125;;\n&#125;\n\n\ninclude &quot;/etc/bird/peers/*&quot;;\n然后在 /etc/bird 目录下创建一个文件夹，命名为 peers ，以便后续存储配置文件使用。\n如果想更深入的学习如何编写 BIRD 配置文件，推荐查看 BIRD 与 BGP 的新手开场 和 BIRD 官方文档 。\n下载 ROA 配置文件\nwget -4 -O /tmp/dn42_roa.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf &amp;&amp; mv -f /tmp/dn42_roa.conf /etc/bird/dn42_roa.conf\nwget -4 -O /tmp/dn42_roa_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf &amp;&amp; mv -f /tmp/dn42_roa_v6.conf /etc/bird/dn42_roa_v6.conf\n使用此命令即可将 ROA 文件下载到本机以供使用。\n还需要将此命令添加为定时任务，推荐设置为每小时运行一次，否则不会更新到最新的 ROA ，每次更新后都需要使用 birdc configure 命令重载 BIRD 配置。\n重新加载 BIRD 配置\nbirdc configure\n使用该命令重新加载 BIRD 配置，并使用 birdc show protocol 查看状态。\n\nDN42 WireGuard 使用入门\nWireGuard 是一种简单易用、速度快、现代化的 VPN ，它利用了最先进的加密技术，并使用 UDP 协议传输数据。WireGuard 设计为通用 VPN ，可在嵌入式设备和超级计算机上运行，​​ 适用于许多不同的环境。WireGuard 起初是专为 Linux 编写并发布的，后来被移植到各个平台上。在 WireGuard.com 上可以找到它的 技术白皮书 。\n安装 WireGuard\napt update\napt install wireguard -y\n一般情况下，执行此命令即可直接安装 WireGuard 和 WireGuard Tools ，无需额外操作。\n生成公钥与私钥\nwg genkey | tee privatekey | wg pubkey &gt; publickey\n使用此命令即可在当前目录下生成两个名叫 privatekey 和 publickey 的文件，分别代表私钥和公钥。\n搭建 WireGuard 隧道\n搭建 WireGuard 隧道非常简便，只需要生成一对公钥与私钥并与对等端交换公钥即可。\n如果需要通过 WireGuard 隧道建立 BGP 会话，不能使用 WireGuard 内建的多 Peer 功能，必须为每个对等端创建一条隧道。\n在 /etc/wireguard 目录下新建一个名为 &lt;隧道名&gt;.conf 的文件：\n[Interface]\nPrivateKey = &lt;私钥&gt;\nListenPort = &lt;监听端口&gt;\nPostUp     = ip address add &lt;链路本地地址&gt;/64 dev %i\nPostUp     = ip addr add &lt;本地 IPv6 地址&gt;/128 peer &lt;对端 IPv6 地址&gt;/128 dev %i\nPostUp     = ip addr add &lt;本地 IPv4 地址&gt;/32 peer &lt;对端 IPv4 地址&gt;/32 dev %i\nTable      = off\n\nPrivateKey ：私钥。\nListenPort ：监听端口。\n第一个 PostUp ：（可选，推荐）添加链路本地地址。\n第二个 PostUp ：（可选）添加本地和对等端的 DN42 IPv6 地址。\n第三个 PostUp ：（可选）添加本地和对等端的 DN42 IPv4 地址。\nTable ：必须设定为 off （不导入系统路由表），否则会导致系统断网。\n\n当使用链路本地地址建立 BGP 会话时，可以不设置 DN42 IPv4 和 DN42 IPv6 地址，但是机器上必须有一张网卡上绑定了本机的 DN42 IPv4 和 DN42 IPv6 地址。同理，如果不使用链路本地地址建立 BGP 会话则无需添加链路本地地址。\n[Peer]\nPublicKey           = &lt;对端公钥&gt;\nPresharedKey        = &lt;对端预共享密钥&gt;\nEndpoint            = &lt;对端 IP/域名 和 端口号&gt;\nPersistentKeepalive = 30\nAllowedIPs          = 10.0.0.0/8, 172.20.0.0/14, 172.31.0.0/16, fd00::/8, fe80::/64\n\nPublicKey ：对端公钥。\nPresharedKey ：（可选）对端预共享密钥。\nEndpoint ：（可选）对端的连接域名/IP 及端口号。\n如果对端没有公网 IP 地址，需要本地设置为被动模式则无需填写此项。\nPersistentKeepalive ：（可选）每隔多少秒发送一次握手信息防止连接被中断并更新对端 IP 。\n如果本地没有公网 IP 地址，必须配置此项。\nAllowedIPs ：允许使用 WireGuard 转发流量的 IP 地址段。\n\n之后使用 wg-quick up &lt;隧道名&gt; 来启动隧道即可。\n如需开机自启，可以在测试无误后执行 systemctl enable wg-quick@&lt;隧道名&gt; 。\n检测隧道状态\nwg show &lt;隧道名&gt;\n使用该命令即可查看隧道状态。\n\n如上图所示，当 latest handshake 时间较近且 transfer 有收有发时可以认为隧道正常。\n如需查看所有隧道的状态，直接使用 wg 命令即可。\n与其他网络进行对等互联\n系统配置\n在 DN42 网络中，没有绝对意义上的客户端，每个人都可能是他人的路由器，经常会出现数据包的来源网卡与回复使用的网卡不一致的情况，因此需要打开 Linux 内核的数据包转发功能，具体操作如下：\necho &quot;net.ipv4.ip_forward=1&quot; &gt;&gt; /etc/sysctl.conf\necho &quot;net.ipv6.conf.default.forwarding=1&quot; &gt;&gt; /etc/sysctl.conf\necho &quot;net.ipv6.conf.all.forwarding=1&quot; &gt;&gt; /etc/sysctl.conf\nsysctl -p\n同时，也需要关闭 Linux 内核的 rp_filter 的严格模式，具体操作如下：\necho &quot;net.ipv4.conf.default.rp_filter=0&quot; &gt;&gt; /etc/sysctl.conf\necho &quot;net.ipv4.conf.all.rp_filter=0&quot; &gt;&gt; /etc/sysctl.conf\nsysctl -p\n除此之外，还需要关闭一些自动化的配置 iptables 防火墙的工具，如 UFW 。\n搭建 WireGuard 隧道\n请参考 DN42 WireGuard 使用入门 一节。\n配置 BGP 会话\n在 /etc/bird/peers 目录下新建一个文件，命名为 &lt;名字&gt;.conf 。\n如果使用链路本地地址进行 Peer 的话，需要按照下面的配置示例进行配置：\nprotocol bgp &lt;名字&gt; from dnpeers &#123;\n    neighbor &lt;对端链路本地地址&gt; % &#x27;&lt;对端 WireGuard 隧道名&gt;&#x27; as &lt;对端 ASN&gt;;\n    source address &lt;本地的链路本地地址&gt;;\n&#125;\n否则按照下面的配置示例进行配置：\nprotocol bgp &lt;名字&gt; from dnpeers &#123;\n    neighbor &lt;对端 IPv6 地址&gt; as &lt;对端 ASN&gt;;\n&#125;\n然后使用 birdc configure 重载配置即可。\n更新日志\n\n2021-04-04 第一版 （2021 年 8 月 10 日存档于 互联网档案馆）\n2021-08-14 第二版\n\n参考资料\n\nGetting Started - DN42 Wiki\nGuide for creating a Pull Request - dn42/registry - DN42 Git\nDN42 实验网络介绍及注册教程（2020-10-01 更新） - Lan Tian @ Blog\nIETF Datatracker\nUnique local address - Wikipedia\nBIRD 与 BGP 的新手开场 - Soha Jin - GitHub\n\n","categories":["技术向"],"tags":["BGP","DN42"]},{"title":"【随笔】下载自己在 SM.MS 图床上的所有图片","url":"//post/download-smms-image/","content":"前提条件：有 SM.MS 图床账号，并且图片存储在该账号下。\n思路：先请求 API，获取图片列表。遍历列表，判断本地是否存在该图片，若不存在则下载该图片。\n代码如下。\nimport requests\nimport os\nimport json\nimport pathlib\nimport sys\n\ndef getUploadedImages(token) -&gt; str:\n    url = &quot;https://sm.ms/api/v2/upload_history&quot;\n    headers = &#123;&quot;Authorization&quot;: token&#125;\n    return requests.get(url, headers=headers).text\n\ndata = json.loads(getUploadedImages(sys.argv[1]))\n\nfor img in data[&quot;data&quot;]:\n    path = &quot;./data/&quot; + img[&quot;storename&quot;]\n    if not pathlib.Path(path).is_file():\n        pic = requests.get(img[&quot;url&quot;]).content\n        f = open(path, &quot;wb&quot;)\n        f.write(pic)\n        f.close()\n        del pic\n        print(&quot;Successfully get &quot;+img[&quot;storename&quot;]+&quot; .&quot;)\n    else:\n        print(&quot;&quot;+img[&quot;storename&quot;]+&quot; is already exists.&quot;)\n使用方法：python3 smms-image.py &quot;[your token here]&quot;\n下载下来的图片会存到 ./data/ 目录下（请提前新建）。\n","categories":["笔记本"]},{"title":"【补档】Handsome 魔改教程：左侧边栏输出优化","url":"//post/handsome-leftbar-layout/","content":"感觉 handsome 自带的左侧边栏显示方法不太合适，于是自己参照了 UCW 大佬的教程 优化侧栏显示：实现更加美观的分类展示 改了一下。\n\n修改方法\n前置操作\n建议引入 Font Awesome 图标库，在 主题后台设置 -&gt; 开发者设置 -&gt; 自定义输出 head 头部的 HTML 代码 里面添加下面的代码即可。\n&lt;link\n  href=&quot;https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css&quot;\n  rel=&quot;stylesheet&quot;\n/&gt;\n上面的 Font Awesome 的 css 文件来自 BootCDN 提供，你也可以替换成自己的文件。\n改代码\n首先，打开 libs/Content.php ，在蓝线所示的位置：\n\n插入下面的代码：\n/**\n *\n * @param $categories\n * @return string\n */\npublic static function returnAsideCategories($categories)&#123;\n    $html    = &quot;&quot;;\n    $options = mget();\n    $icons   = array(\n        &#x27;default&#x27; =&gt; &#x27;glyphicon glyphicon-tasks&#x27;,\n        &#x27;github&#x27;  =&gt; &#x27;fa fa-github&#x27;\n        /**\n         *  格式：  &#x27;分类缩略名&#x27; =&gt; &#x27;图标名称&#x27;,\n         */\n    );\n    while($categories-&gt;next()) &#123;\n        if ($categories-&gt;levels === 0) &#123;\n            $children = $categories-&gt;getAllChildren($categories-&gt;mid);\n            if (!empty($children)) &#123;\n                $html .= &#x27;&lt;li&gt;&lt;a class=&quot;auto&quot;&gt;&lt;span class=&quot;pull-right text-muted&quot;&gt;&lt;i class=&quot;fontello icon-fw fontello-angle-right text&quot;&gt;&lt;/i&gt;&lt;i class=&quot;fontello icon-fw fontello-angle-down text-active&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span class=&quot;nav-icon&quot;&gt;&lt;i class=&quot;&#x27; . $icons[$categories-&gt;slug] . &#x27;&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;&#x27; . $categories-&gt;name . &#x27;&lt;/span&gt;&lt;/a&gt;&#x27;;\n                $childCategoryHtml =  &#x27;&lt;ul class=&quot;nav nav-sub dk&quot;&gt;&lt;li class=&quot;nav-sub-header&quot;&gt;&lt;a&gt;&lt;span&gt;&#x27; . $categories-&gt;name . &#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;;\n                foreach($children as $mid)&#123;\n                    $child = $categories-&gt;getCategory($mid);\n                    $childCategoryHtml .= &#x27;&lt;li&gt;&lt;a href=&quot;&#x27; . $child[&#x27;permalink&#x27;] . &#x27;&quot;&gt;&lt;b class=&quot;badge pull-right&quot;&gt;&#x27; . $child[&#x27;count&#x27;] . &#x27;&lt;/b&gt;&lt;i class=&quot;&#x27; . $icons[$child[&#x27;slug&#x27;]] . &#x27;&quot;&gt;&lt;/i&gt;&lt;span&gt;&#x27; . $child[&#x27;name&#x27;] . &#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;;\n                &#125;\n                $childCategoryHtml .= &#x27;&lt;/ul&gt;&#x27;;\n                $html .= $childCategoryHtml;\n                $html .= &quot;&lt;/li&gt;&quot;;\n            &#125; else &#123;\n                $html .= &#x27;&lt;li&gt;&lt;a href=&quot;&#x27; . $categories-&gt;permalink . &#x27;&quot; class=&quot;auto&quot;&gt;&lt;b class=&quot;badge pull-right&quot;&gt;&#x27; . $categories-&gt;count . &#x27;&lt;/b&gt;&lt;span class=&quot;nav-icon&quot;&gt;&lt;i class=&quot;&#x27;.$icons[$categories-&gt;slug].&#x27;&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;&#x27; . $categories-&gt;name . &#x27;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&#x27;;\n            &#125;\n        &#125;\n    &#125;\n    return $html;\n&#125;\n在 component/aside.php 中找到以下代码（大约 131 ~ 160 行），删除。\n              &lt;!--分类category--&gt;\n                &lt;?php\n                $class = &quot;&quot;;\n                    if (in_array(&quot;openCategory&quot;,$this-&gt;options-&gt;featuresetup))&#123;\n                        $class = &quot;class=\\\\&quot;active\\\\&quot;&quot;;\n                    &#125;\n                    ?&gt;\n              &lt;li &lt;?php echo $class; ?&gt;&gt;\n                &lt;a class=&quot;auto&quot;&gt;\n                  &lt;span class=&quot;pull-right text-muted&quot;&gt;\n                    &lt;i class=&quot;fontello icon-fw fontello-angle-right text&quot;&gt;&lt;/i&gt;\n                    &lt;i class=&quot;fontello icon-fw fontello-angle-down text-active&quot;&gt;&lt;/i&gt;\n                  &lt;/span&gt;\n&lt;!--                  &lt;i class=&quot;glyphicon glyphicon-th&quot;&gt;&lt;/i&gt;--&gt;\n                    &lt;span class=&quot;nav-icon&quot;&gt;&lt;i data-feather=&quot;grid&quot;&gt;&lt;/i&gt;&lt;/span&gt;\n\n                    &lt;span&gt;&lt;?php _me(&quot;分类&quot;) ?&gt;&lt;/span&gt;\n                &lt;/a&gt;\n                &lt;ul class=&quot;nav nav-sub dk&quot;&gt;\n                  &lt;li class=&quot;nav-sub-header&quot;&gt;\n                    &lt;a&gt;\n                      &lt;span&gt;&lt;?php _me(&quot;分类&quot;) ?&gt;&lt;/span&gt;\n                    &lt;/a&gt;\n                  &lt;/li&gt;\n                  &lt;!--循环输出分类--&gt;\n                    &lt;?php\n                    $this-&gt;widget(&#x27;Widget_Metas_Category_List&#x27;)-&gt;to($categorys);\n                    echo Content::returnCategories($categorys) ?&gt;\n                &lt;/ul&gt;\n              &lt;/li&gt;\n然后在下图蓝线所示的位置（ 127 行左右 ）\n\n插入以下代码：\n     &lt;!--start--&gt;\n  &lt;li class=&quot;line dk&quot;&gt;&lt;/li&gt;\n\n&lt;!--Components--&gt;\n  &lt;li class=&quot;hidden-folded padder m-t m-b-sm text-muted text-xs&quot;&gt;\n    &lt;span&gt;&lt;?php _me(&quot;分类&quot;) ?&gt;&lt;/span&gt;\n  &lt;/li&gt;\n  &lt;!--分类category--&gt;\n  &lt;!--循环输出分类--&gt;\n  &lt;?php\n  $this-&gt;widget(&#x27;Widget_Metas_Category_List&#x27;)-&gt;to($categorys);\n  echo Content::returnAsideCategories($categorys) ?&gt;\n  &lt;!--end--&gt;\n然后，刷新你的博客，是不是就有效果了呢？\n图标设置\n设置方法：在 $icons 的 array 数组中插入 '分类缩略名' =&gt; '图标' 即可。\nFont Awesome\n如果你引入了 Font Awesome 的图标的话，可以到 https://fontawesome.dashgame.com/ 选择你喜欢的图标使用。\n使用方法\n在 https://fontawesome.dashgame.com/ 挑一个图标，在图标的名字前加入 fa fa- 即可。\n使用样例\n使用 archive 图标时：\n\n对应在 $icons 的 array 数组中插入的代码：\n&#x27;archives&#x27; =&gt; &#x27;fa fa-archive&#x27;\nFontello\nhandsome 主题自带部分 fontello 图标，具体列表可在 handsome 主题文档 查看。\n使用方法\n在图标的名字前加入 fontello fontello- 即可。\n使用样例\n与 Font Awesome 相似，在此不多赘述。\nFeather\nhandsome 主题自带 feather 的所有图标，在此处使用需要一些变通措施。\n使用方法\n在 https://feathericons.com/ 选取好你需要的图标。\n然后在名称前插入 &quot; data-feather=&quot; ，再输入名称即可。\n使用样例\n以 airplay 为例：\n\n输入 'airplay' =&gt; '&quot; data-feather=&quot;airplay' 即可。\n其他 SVG 格式的图标\n使用方法\n在 svg 的开头加入 &quot;&gt;&lt;/i&gt; ，在结尾加入 &lt;i 即可。\n使用样例\n下载下来的 svg 文件内容：\n\n将其复制，然后在 $icons 的 array 数组中插入的代码：\n&#x27;airplay&#x27; =&gt; &#x27;&quot;&gt;&lt;/i&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;16&quot; height=&quot;16&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-airplay&quot;&gt;&lt;path d=&quot;M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1&quot;/&gt;&lt;polygon points=&quot;12 15 17 21 7 21 12 15&quot;/&gt;&lt;/svg&gt;&lt;i &#x27;\n后记\n报错解决\n报错 syntax error, unexpected 'xxx' (T_CONSTANT_ENCAPSED_STRING), expecting ')' 咋办？\n检查你设置图标时的语法是否正确，正确语法如下：\n$icons = array(\n    &#x27;aaaaaaa&#x27;  =&gt; &#x27;glyphicon glyphicon-xx&#x27;,\n    &#x27;bbbb&#x27;     =&gt; &#x27;glyphicon glyphicon-xxxxxx&#x27;,\n    &#x27;cccccc&#x27;   =&gt; &#x27;fa fa-xxxxx&#x27;,\n    &#x27;dddddddd&#x27; =&gt; &#x27;fa fa-xxxx&#x27;,\n    &#x27;eeeee&#x27;    =&gt; &#x27;glyphicon glyphicon-xxxx&#x27;,\n    &#x27;fff&#x27;      =&gt; &#x27;fa fa-xxxxx&#x27;\n)\n\n注意\narray 函数的参数中除了最后一行，每一行末尾都有一个 ,\n\n","categories":["笔记本"],"tags":["Typecho"]},{"title":"你好，2021 —— 博客迁移记录","url":"//post/hello-2021/","content":"再见，2020。\n\n最近总是觉得博客太慢了，于是乎，我把博客迁移到自己的服务器上面了。\n服务器端操作\n安装 nginx\napt 一把梭，省时又省力。\napt install nginx -y\n配置 nginx\n简简单单配置了一下，没有什么过于复杂的东西。\n在申请 SSL 证书之前，不要写 HTTPS 的配置。\nserver &#123;\n    listen      80;\n    listen      [::]:80;\n    server_name blog.baoshuo.ren;\n\n    # ACME-challenge\n    location ^~ /.well-known/acme-challenge/ &#123;\n        allow all;\n        root /var/www/_letsencrypt;\n    &#125;\n\n    location / &#123;\n        return 301 https://blog.baoshuo.ren$request_uri;\n    &#125;\n&#125;\n申请 SSL 证书\n由于笔者懒得每年换证书，所以就用了 Let’s Encrypt + acme.sh 的组合套装来配置 SSL 。\n当然，ECC 证书也是少不了的。\nacme.sh --issue -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \\\n    -w /var/www/_letsencrypt/ \\\n    --renew-hook &quot;acme.sh --install-cert -d baoshuo.ren \\\n    --key-file /***/baoshuo.ren.key \\\n    --fullchain-file /***/baoshuo.ren.cer \\\n    --reloadcmd \\&quot;service nginx force-reload\\&quot;&quot;\nacme.sh --issue --keylength ec-256 \\\n    -d baoshuo.ren -d www.baoshuo.ren -d blog.baoshuo.ren \\\n    -w /var/www/_letsencrypt/ \\\n    --renew-hook &quot;acme.sh --install-cert -d baoshuo.ren --ecc \\\n    --key-file /***/baoshuo.ren.ecc.key \\\n    --fullchain-file /***/baoshuo.ren.ecc.cer \\\n    --reloadcmd \\&quot;service nginx force-reload\\&quot;&quot;\n申请完成后，将 RSA 和 ECC 证书添加到 nginx 配置中，在配置文件中写入以下内容：\nserver &#123;\n    listen                               443 ssl http2;\n    listen                               [::]:443 ssl http2;\n    server_name                          blog.baoshuo.ren;\n    root                                 /var/www/blog/;\n\n    # SSL\n    ssl_certificate                      /***/baoshuo.ren.cer;\n    ssl_certificate_key                  /***/baoshuo.ren.key;\n    ssl_certificate                      /***/baoshuo.ren.ecc.cer;\n    ssl_certificate_key                  /***/baoshuo.ren.ecc.key;\n    ssl_protocols                        TLSv1.2 TLSv1.3;\n    ssl_ciphers                          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS\n    add_header Strict-Transport-Security &#x27;max-age=31536000&#x27;;\n\n    # logging\n    error_log                            /var/log/nginx/blog.baoshuo.ren.error.log warn;\n\n    # 404 page\n    error_page                           404 /404.html;\n&#125;\n上方使用的 SSL 配置是 Mozilla 推荐的现代化配置 ，如果需要更好的兼容性，可以使用 Mozilla 提供的中等安全性配置 ：\nssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA;\nssl_prefer_server_ciphers on;\n将博客文件同步到服务器上\n在 .github/workflows 目录下创建一个 server.yml 文件，写入以下内容：\nname: Deploy blog to Server\n\non:\n  push:\n    branches: [ master ]\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Deploy\n        uses: easingthemes/ssh-deploy@v2.1.5\n        env:\n          SSH_PRIVATE_KEY: $&#123;&#123; secrets.SSH_PRIVATE_KEY &#125;&#125;\n          ARGS: &quot;-avz --delete  --exclude &#x27;.git/*&#x27; --exclude &#x27;.github/*&#x27; --exclude &#x27;.gitlab-ci.yml&#x27; --exclude &#x27;.nojekyll&#x27;&quot;\n          REMOTE_HOST: $&#123;&#123; secrets.REMOTE_HOST &#125;&#125;\n          REMOTE_USER: $&#123;&#123; secrets.REMOTE_USER &#125;&#125;\n          TARGET: $&#123;&#123; secrets.TARGET &#125;&#125;\n之后在 https://github.com/&#123;username&#125;/&#123;repo&#125;/settings/secrets/actions 中添加四个 Secrets 。\n\n\n\n名称\n内容\n\n\n\n\nREMOTE_HOST\n服务器 IP 地址\n\n\nREMOTE_USER\n服务器用户名\n\n\nSSH_PRIVATE_KEY\n连接到服务器的 SSH 私钥\n\n\nTARGET\n存放文件的路径\n\n\n\n将博客文件 push 到仓库中，就能在服务器上查看到文件了。\n参考资料\n\nnginx 1.18.0, modern config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator\nnginx 1.18.0, intermediate config, OpenSSL 1.1.1f - Mozilla SSL Configuration Generator\n\n","categories":["技术向"],"tags":["折腾"]},{"title":"Hello World","url":"//post/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start\nCreate a new post\n$ hexo new &quot;My New Post&quot;\nMore info: Writing\nRun server\n$ hexo server\nMore info: Server\nGenerate static files\n$ hexo generate\nMore info: Generating\nDeploy to remote sites\n$ hexo deploy\nMore info: Deployment\n"},{"title":"洛谷爬虫","url":"//post/luogu-spider/","content":"截至目前，洛谷已经有了近两万道题目和四十余万名用户。本代码爬取了一些样本，以供后续（可能）的数据分析。\n\n本次爬取遵守洛谷的 robots.txt 中的要求，不爬取提交记录页面。为了避免影响洛谷的正常运行，脚本只采用单线程进行爬取。\nUser-Agent: *\nDisallow: /record\nDisallow: /recordnew\n爬取题目信息\n题目数据获取\n先使用 curl 获取洛谷的题目页面：\n\n可以看出我们需要的数据都在传入给 decodeURIComponent() 函数的字符串中，正则匹配取出即可。\n下面是代码实现：\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport re\nimport json\nfrom urllib.parse import unquote\n\n# 设置请求头\nheaders = &#123;\n    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 Spider/0.1&quot;\n&#125;\n\ndef getProblemJSON(pid):\n    return json.loads(unquote(str(re.findall(r&#x27;decodeURIComponent\\(&quot;(.*)&quot;\\)&#x27;, requests.get(url=&quot;https://www.luogu.com.cn/problem/P1000&quot;, headers=headers).text)[0])))\n\ndata = getProblemJSON(&quot;P1000&quot;)\nprint(json.dumps(data[&#x27;currentData&#x27;], sort_keys=True, indent=4))\nUpdate at 2021/02/05:\n添加参数 _contentOnly=1 可以直接获取 JSON 格式的信息，无需再正则匹配。\n--- a/tools/spider.py\n+++ b/tools/spider.py\n@@ -19,8 +19,7 @@\n def getProblem(pid):\n-    url = f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;&quot;\n-    redata = re.findall(r&#x27;decodeURIComponent\\(&quot;(.*)&quot;\\)&#x27;,\n-                        requests.get(url, headers=headers).text)\n+    url = f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;?_contentOnly=1&quot;\n+    redata = requests.get(url, headers=headers).text\n     if len(redata) == 0:\n         return &#123; &quot;code&quot;: 403 &#125;\n     else:\n-        return json.loads(unquote(redata[0]))\n+        return json.loads(redata)\n处理题目数据\n这里只留下 currentData.problem 字段里面的内容即可。\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport re\nimport json\nfrom urllib.parse import unquote\n\nf = open(&#x27;problems.json&#x27;, &#x27;w&#x27;)\nres = []\n\nheaders = &#123;\n    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36 spider/0.1&quot;,\n&#125;\n\n\ndef getProblem(pid):\n    return json.loads(requests.get(f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;?_contentOnly=1&quot;, headers=headers).text)[&#x27;currentData&#x27;]\n\n\nfor i in range(1000, 1010):\n    tmpdict = &#123;&#125;\n    tmpdict[&quot;pid&quot;] = f&quot;P&#123;i&#125;&quot;\n    tmpdict[&quot;data&quot;] = getProblem(f&quot;P&#123;i&#125;&quot;)[&quot;problem&quot;]\n    res.append(tmpdict)\n\n# print(res)\nf.write(json.dumps(res, indent=4).replace(&quot;\\\\t&quot;, &quot;    &quot;))\n最终代码\n#!/usr/bin/python3\n# coding: utf-8\n\nimport requests\nimport json\nimport time\nimport pymongo\n\ndbclient = pymongo.MongoClient(&quot;mongodb://127.0.0.1:27017/&quot;)\nluogudb = dbclient[&quot;luogu&quot;]\ndbcol = luogudb[&quot;problem&quot;]\n\nheaders = &#123;\n    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36 spider/0.1&quot;,\n&#125;\n\n\ndef getProblem(pid):\n    url = f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;?_contentOnly=1&quot;\n    redata = requests.get(url, headers=headers).text\n    return json.loads(redata)\n\nfor i in range(1000, 7103):\n    pid = f&quot;P&#123;i&#125;&quot;\n    if list(dbcol.find(&#123;&#x27;pid&#x27;: pid&#125;)) == []:\n        tmpdict = &#123;&#125;\n        tmpdict[&quot;pid&quot;] = pid\n        tmpdata = getProblem(pid)\n        if tmpdata[&quot;code&quot;] == 200:\n            tmpdict[&quot;data&quot;] = getProblem(pid)[&quot;currentData&quot;][&quot;problem&quot;]\n            dbcol.insert_one(tmpdict)\n            print(f&quot;Successfully get problem &#123;pid&#125;.&quot;)\n            time.sleep(1)\n        else:\n            print(f&quot;Fail to get problem &#123;pid&#125;.&quot;)\n    else:\n        print(f&quot;Problem &#123;pid&#125; is already exists.&quot;)\n有关于数据库读写的部分请参考下文的 数据库 部分。\n爬取用户信息\n结构与题目爬虫类似，故不再作代码说明。\nimport json\nimport time\nimport pymongo\nimport requests\n\ndbclient = pymongo.MongoClient(&quot;mongodb://127.0.0.1:27017/&quot;)\nluogudb = dbclient[&quot;luogu&quot;]\ndbcol = luogudb[&quot;user&quot;]\n\nheaders = &#123; &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36&quot;, &#125;\n\ndef getUser(uid):\n    url = f&quot;https://www.luogu.com.cn/user/&#123;uid&#125;?_contentOnly=1&quot;\n    redata = requests.get(url, headers=headers).text\n    return json.loads(redata)\n\nfor uid in range(1, 2):\n    if list(dbcol.find(&#123;&#x27;uid&#x27;: uid&#125;)) == []:\n        tmpdict = &#123;&#125;\n        tmpdict[&quot;_id&quot;] = uid\n        tmpdict[&quot;uid&quot;] = uid\n        tmpdata = getUser(uid)\n        if tmpdata[&quot;code&quot;] == 200:\n            tmpdict[&quot;data&quot;] = tmpdata[&quot;currentData&quot;][&quot;user&quot;]\n            dbcol.insert_one(tmpdict)\n            print(f&quot;Successfully get user &#123;uid&#125;.&quot;)\n            time.sleep(0.5)\n        else:\n            print(f&quot;Fail to get user &#123;uid&#125;.&quot;)\n            time.sleep(0.5)\n    else:\n        print(f&quot;User &#123;uid&#125; is already exists.&quot;)\n数据库\n搭建数据库\n搭建 MongoDB 数据库只需要在 docker 里面跑一个容器，非常简便。\ndocker run -v /root/data/mongo:/data/db -itd --name mongo -p 27017:27017 mongo\n连接数据库\nclient = pymongo.MongoClient(&quot;mongodb://127.0.0.1:27017/&quot;)\nluogudb = dbclient[&quot;luogu&quot;]\ncol = luogudb[&quot;problem&quot;]\n存储数据\nif list(col.find(&#123;&#x27;pid&#x27; : pid&#125;)) == []:\n    col.insert_one(data)\n    print(&quot;Success.&quot;)\nelse:\n    print(&quot;Already exists.&quot;)\n读取数据\nprint(list(col.find()))\nweb 管理数据库\n再跑一个 mongo-express 就行了。\ndocker run -d --name mongo-express -e ME_CONFIG_MONGODB_SERVER=host.docker.internal -p 8081:8081 mongo-express\n访问 ip:8081 就能看到管理界面了。\n导出数据库\n直接运行下方命令导出为 JSON 格式即可。\nmongoexport -d luogu -c problem -o /data/db/problem.json\n或者点击对应数据库管理界面中的 [JSON] 按钮导出。\n\n成果\n断断续续爬了一个多星期，终于爬完了。\n\n","categories":["技术向"]},{"title":"年轻人的第一个 ASN","url":"//post/my-own-asn/","content":"很久之前就有了这样的一个想法：拥有一个自己的 ASN 。2021 年的寒假末尾，我终于找到了一个肯给我这个未成年人申请 ASN 的 LIR 。\n\n于是这个世界上又多了一个祸害公网的人。\n2021-12-09 更新：将 IP 广播部分直接链接到《初探 DN42 网络》中的「DN42 BIRD2 使用入门」一节，以及一些不大不小的修改。\n注册 ASN\n我找了某个 LIR 注册的 APNIC 的 ASN ，下号用时 3 个工作日。\n需要提供的信息有这些（带有 [保密] 标签的是非公开信息，只有你的 LIR 和 APINC 会知道）：\n\n[保密] 身份证明材料\n主标识\n联系人邮箱\nnoc 邮箱\nabuse 邮箱\n国家\n联系人地址\n联系人姓名\n联系人电话\nASN 的标识\nASN 的全名\nASN 所属国家\n[保密] 两个上游 ASN\n[保密] ASN 将要部署在的物理位置\n\n然后等了 3 个工作日，我的 ASN 申请终于通过审核并下号了。\n需要注意的是 APNIC 每半年会向联系人邮箱发送一封验证邮件，所以邮箱需要保持畅通，并且及时查看新邮件。\n申请 Vultr 的 BGP 广播功能\nVultr 的 BGP 广播功能可以称得上是「新手友好」的了。Vultr 良好的过滤系统保证了一般情况下即使发送了错误的路由表也不会漏到公网去，不怕搞炸，方便学习时使用。\n点击 https://my.vultr.com/bgp/ 进入 Vultr BGP 广播功能的开通页面。\n\n点击页面中的 Get Started 进入 BGP 开通申请页面。\n\n\n将 I have my own IP space 和 I have my own ASN 设置为 YES 。\n在 My ASN 处填写 ASN （不含 AS 前缀）。\n在 BGP Password 处填写你想要的 BGP 密码。\n在 IP Prefixes 处填写你的 IP 前缀（CIDR 格式）。\nRoutes we shoule send you 选择 Full Table 。\nLOA 按照下方提供的模板照抄即可。\n\n然后点击 Setup 即可。\n\nLOA 模板\n这是一篇 LOA 模板，照抄即可。\nAUTHORIZATION LETTER\n\n[日期, 如 Feb 27, 2021]\n\nTo whom it may concern,\n\nThis letter serves as authorization for [服务商公司名, 如 Vultr] with [ASN, 如 AS2333] to announce the following IP address blocks:\n\n[IP SPACE / ASN / SUBNET]\n[IP SPACE / ASN / SUBNET]\n[...]\n\nAs a representative of the company [公司名称] that is the owner of the subnet and/or ASN, I hereby declare that I&#x27;m authorized to represent and sign for this LOA.\n\nShould you have questions about this request, email me at [邮箱], or call: [电话号码]\n\nFrom,\n\n[姓名]\n[公司名称]\n[职位, 如 Network Administrator]\n[电话号码]\n\n\n提交完毕之后会出现如图所示的界面，点击 Start 即可开始验证进程。\n\n以 AS141776 的验证为例，选择好接收验证邮件的邮箱，然后点击 Send 即可。\n\n\n点击邮箱里的链接即可（第一个是允许，第二个是拒绝）\n\n验证成功后的提示。\n之后等待客服开通即可。\n由于我是在晚上申请的 Vultr BGP 服务，所以几分钟就开通好了。\n\n之后不要忘记去控制台重启实例哦~\n使用 BIRD2 广播 IP\n可以参考我在 初探 DN42 网络 这篇文章的「DN42 BIRD2 使用入门」一节中描述的步骤，此处不再赘述。\n如果不会写配置文件可以参考 renbaoshuo/network-configs 仓库中的配置。\n一些注意事项\n拆分 IP 段\n由于我一下子用不了那么多 IP ，所以我决定把我的 /44 拆分成几个 /48 来用。\n如果不涉及 whois 信息的修改操作，那么只需要修改一下 bird 的配置分开广播即可。\nAPNIC 修改 whois 信息的流程可以参考 Sending updates by email - APNIC 页面上的指引发送邮件。\n网络交换中心（Internet Exchange）\n加 IX 的操作流程和 Peer 差不多，注意只发送自己和自己下游（如果有）的路由，不能把上游发来的路由也塞进去，否则会被断开连接。\n名词释义\n\nLIR: 本地互联网注册机构\nRIR: 区域互联网注册机构 （维基百科）\nASN: 自治系统编号（维基百科）\nBGP: 边界网关协议（维基百科）\nBIRD: 一个功能齐全的动态 IP 路由守护程序（官方网站）\n\n参考资料\n\nExample Letter of Authorization for BGP Announcements，Vultr Docs。\nIP 广播 : CentOS 7 使用 bird6 广播 IPv6，LiCEO。\n初探 DN42 网络，宝硕博客。\n年轻人的第一个私人BGP(一) - 注册一个ASN，LovelyWei’s 废纸篓。\n年轻人的第一个私人BGP(二) - 广播你的IP，LovelyWei’s 废纸篓。\n\n","categories":["笔记本"],"tags":["BGP","计算机网络"]},{"title":"配置 Nginx 只允许 Cloudflare 的 IP 回源","url":"//post/nginx-cloudflare-ip-only/","content":"配置好 Cloudflare 后，建议禁止非 Cloudflare IP 访问源站来防止一些不好的事情发生。\n\n配置\n在站点配置文件中增加以下内容：\n# Cloudflare (IPv4 - https://www.cloudflare.com/ips-v4)\nallow 173.245.48.0/20;\nallow 103.21.244.0/22;\nallow 103.22.200.0/22;\nallow 103.31.4.0/22;\nallow 141.101.64.0/18;\nallow 108.162.192.0/18;\nallow 190.93.240.0/20;\nallow 188.114.96.0/20;\nallow 197.234.240.0/22;\nallow 198.41.128.0/17;\nallow 162.158.0.0/15;\nallow 104.16.0.0/12;\nallow 172.64.0.0/13;\nallow 131.0.72.0/22;\nallow 36.27.212.0/24;\nallow 123.129.232.0/24;\n\n# Cloudflare (IPv6 - https://www.cloudflare.com/ips-v6)\nallow 2400:cb00::/32;\nallow 2405:8100::/32;\nallow 2405:b500::/32;\nallow 2606:4700::/32;\nallow 2803:f800::/32;\nallow 2c0f:f248::/32;\nallow 2a06:98c0::/29;\n\n# Others\ndeny all;\n后记\n这个配置文件可以自己生成。\n参考资料\n\nCloudflare IP Ranges (Last updated: February 21, 2019)\n\n","categories":["技术向"],"tags":["笔记本"]},{"title":"Linux Systemd 入门","url":"//post/linux-systemd/","content":"Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。\n\n目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。\n常用命令列表\n\n列出所有已加载的单元：systemctl list-units\n查看指定的单元的配置：systemctl cat [serviceName] (e.g. systemctl cat sshd.service)\n修改指定单元的配置：systemctl edit [serviceName] (e.g. systemctl edit sshd.service)\n查看指定的单元的运行状态： systemctl status [serviceName|pid] (e.g. systemctl status sshd.service)\n\n如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。\n如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。\n如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 --all 连用，则同时显示所有已加载的单元（可以用 -t 限定单元类型）的状态信息。\n\n\n启动指定的单元：systemctl start [serviceName] (e.g. systemctl start sshd.service)\n\n被指定的单元必须是已经被加载的。\n\n\n重新启动指定的单元：systemctl restart [serviceName] (e.g. systemctl restart sshd.service)\n\n如果指定的单元没有启动，则直接启动它们。\n\n\n停止指定的单元：systemctl stop [serviceName] (e.g. systemctl stop sshd.service)\n启用指定的单元：systemctl enable [serviceName] (e.g. systemctl enable sshd.service)\n停用指定的单元：systemctl disable [serviceName] (e.g. systemctl disable sshd.service)\n重新加载指定的单元的配置：systemctl reload [serviceName] (e.g. systemctl reload sshd.service)\n重新加载所有已修改过的配置文件：systemctl daemon-reload\n\n开机启动\n对于那些支持 Systemd 的软件，安装的时候，会自动在 /usr/lib/systemd/system 目录添加一个配置文件。\n如果你想让该软件开机启动，就执行下面的命令（以 sshd.service 为例）。\nsudo systemctl enable sshd.service\n上面的命令相当于在 /etc/systemd/system 目录添加一个符号链接，指向 /usr/lib/systemd/system 里面的 sshd.service 文件。\n这是因为开机时，Systemd 只执行 /etc/systemd/system 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。\nUnit\n配置文件\n对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。\n\n我曾经为 Sakura Frp 编写过一个脚本：getfrp.sh （存档 于 GitHub Gist） ，里面便是使用了自行编写配置文件的方法。\n\n以 sshd.service 这个配置文件为例子，来分析一下 Systemd 的配置文件：\n# /lib/systemd/system/ssh.service\n\n[Unit]\nDescription=OpenBSD Secure Shell server\nDocumentation=man:sshd(8) man:sshd_config(5)\nAfter=network.target auditd.service\nConditionPathExists=!/etc/ssh/sshd_not_to_be_run\n\n[Service]\nEnvironmentFile=-/etc/default/ssh\nExecStartPre=/usr/sbin/sshd -t\nExecStart=/usr/sbin/sshd -D $SSHD_OPTS\nExecReload=/usr/sbin/sshd -t\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartPreventExitStatus=255\nType=notify\nRuntimeDirectory=sshd\nRuntimeDirectoryMode=0755\n\n[Install]\nWantedBy=multi-user.target\nAlias=sshd.service\n可以看出这个文件一共有三个部分：[Unit], [Service] 和 [Install] 。\n配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。\n因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 After=），就将该设定归零了。\n[Unit]: 启动顺序与依赖关系\n这个部分主要有以下几个配置项：\n\nDescription: 当前服务的简易说明\nDocumentation: 文档位置（以空格分隔）\n\n该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。\n\n\nBefore: 在哪些服务之前启动\n\n本字段不涉及依赖关系，只是说明了启动顺序\n\n\nAfter: 在哪些服务之后启动\n\n本字段不涉及依赖关系，只是说明了启动顺序\n以 sshd.service 中的配置为例，该服务需要在 network.target 和 auditd.service 之后启动\n\n\nWants: 弱依赖的服务\n\n若被依赖的服务被停止，这个服务不需要停止\n\n\nRequires: 强依赖的服务\n\n若被依赖的服务没有启动，则不能启动这个服务\n若被依赖的服务被停止，则这个服务也必须停止\n\n\nConflicts: 冲突的服务\n\n如果列出的服务中有一个已经运行，那么就不能启动这个服务\n\n\n\n[Service]: 启动行为\n这个部分主要有以下几个配置项：\n\nType: 启动类型。默认值为 simple ，可选值如下：\n\nsimple: 使 ExecStart 项启动的项成为主进程\nforking: ExecStart 项将会以 fork() 的形式启动，此时父进程将会退出，子进程将成为主进程\noneshot: 类似于 simple ，但只执行一次，Systemd 会等它执行完，才启动其他服务\ndbus: 类似于 simple ，但会等待 D-Bus 信号后启动\nnotify: 类似于 simple ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务\nidle: 类似于 simple ，但是要等到其他任务都执行完，才会启动该服务。\n\n这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合\n这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序\n\n\n\n\nEnvironment: 指定环境变量\nEnvironmentFile: 环境变量配置文件，该文件内部的 key=value 形式的配置可以在当前文件中以 $key 获取\nExecStart: 服务启动时执行的命令\nExecReload: 服务重启时执行的命令\nExecStop: 服务停止时执行的命令\nExecStartPre: 服务启动之前执行的命令\nExecStartPost: 服务启动之后执行的命令\nExecStopPost: 服务停止之后执行的命令\nRestart: 服务退出后的重启方式，默认值为 no\n\nno: 进程退出后不会重启\non-success: 当进程正常退出时（退出状态码为 0）重启\non-failure: 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启\non-abnormal: 当进程被信号终止或程序超时时重启\non-abort: 当收到没有捕捉到的信号终止时重启\non-watchdog: 当进程超时退出时重启\nalways: 总是重启（不论原因）\n对于守护进程，推荐设为 on-failure。对于那些允许发生错误退出的服务，可以设为 on-abnormal。\n\n\nRemainAfterExit: 退出后是否重新启动\n\n当设定为 RemainAfterExit=1 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 Type=oneshot 的服务很有帮助\n\n\nTimeoutSec: 当这个服务在启动或停止时失败进入&quot;强制结束&quot;状态的等待秒数。\nKillMode: 定义 Systemd 如何停止这个服务，默认值为 control-group\n\ncontrol-group: 服务停止时关闭此控制组中所有的进程\nprocess: 服务停止时只终止主进程（ExecStart 接的后面那串指令）\nmixed: 主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号\nnone: 没有进程会被杀掉，只是执行服务的 stop 命令\n\n\nRestartSec: 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）\n\n所有的启动设置之前，都可以加上一个连词号 (-) ，表示 「抑制错误」 ，即发生错误的时候，不影响其他命令的执行。以 sshd.service 为例，文件中的 EnvironmentFile=-/etc/sysconfig/sshd（注意等号后面的那个连词号），表示 /etc/sysconfig/sshd 文件不存在，也不会抛出错误。\n[Install]: 安装行为\n这个部分主要有以下几个配置项：\n\nWantedBy: 表示该服务所在的 Target\n\n一般来说，服务性质的单元都是挂在 multi-user.target 下的\n\n\nAlso: 当该服务被启用时需要同时启用的单元\nAlias: 指定创建软链接时链接至本单元配置文件的别名文件\n\n模板实例\n此处以 getty@.service 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的：\n# /lib/systemd/system/getty@.service\n#\n#  SPDX-License-Identifier: LGPL-2.1+\n#\n#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU Lesser General Public License as published by\n#  the Free Software Foundation; either version 2.1 of the License, or\n#  (at your option) any later version.\n\n[Unit]\nDescription=Getty on %I\nDocumentation=man:agetty(8) man:systemd-getty-generator(8)\nDocumentation=http://0pointer.de/blog/projects/serial-console.html\nAfter=systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target\nAfter=rc-local.service\n\n# If additional gettys are spawned during boot then we should make\n# sure that this is synchronized before getty.target, even though\n# getty.target didn&#x27;t actually pull it in.\nBefore=getty.target\nIgnoreOnIsolate=yes\n\n# IgnoreOnIsolate causes issues with sulogin, if someone isolates\n# rescue.target or starts rescue.service from multi-user.target or\n# graphical.target.\nConflicts=rescue.service\nBefore=rescue.service\n\n# On systems without virtual consoles, don&#x27;t start any getty. Note\n# that serial gettys are covered by serial-getty@.service, not this\n# unit.\nConditionPathExists=/dev/tty0\n\n[Service]\n# the VT is cleared by TTYVTDisallocate\n# The &#x27;-o&#x27; option value tells agetty to replace &#x27;login&#x27; arguments with an\n# option to preserve environment (-p), followed by &#x27;--&#x27; for safety, and then\n# the entered username.\nExecStart=-/sbin/agetty -o &#x27;-p -- \\\\u&#x27; --noclear %I $TERM\nType=idle\nRestart=always\nRestartSec=0\nUtmpIdentifier=%I\nTTYPath=/dev/%I\nTTYReset=yes\nTTYVHangup=yes\nTTYVTDisallocate=yes\nKillMode=process\nIgnoreSIGPIPE=no\nSendSIGHUP=yes\n\n# Unset locale for the console getty since the console has problems\n# displaying some internationalized messages.\nUnsetEnvironment=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION\n\n[Install]\nWantedBy=getty.target\nDefaultInstance=tty1\n运行 systemctl status getty@tty1.service 命令，可以看到如下图所示的输出：\n\n不难发现图中标橙色的字符与上方配置文件中的 %I 相对应，并且配置文件的名称也不是 getty@tty1.service ，而是 getty@.service ，这种配置文件叫做 「模板实例」 。\n启动时只需要在 @ 后面添加需要填入 %I 位置的参数即可，如 getty@tty9.service 。\nTarget\n一般来说，常用的 Target 有两个：一个是 multi-user.target ，表示多用户命令行状态；另一个是 graphical.target ，表示图形用户状态（它依赖于 multi-user.target），这一点和 SysVinit 的运行级别很是相似。\n官方提供了一张非常清晰的 Target 依赖关系图：\n\n图源：https://www.freedesktop.org/software/systemd/man/bootup.html#System Manager Bootup\n配置文件\n以 multi-user.target 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目：\n# /lib/systemd/system/multi-user.target\n#\n#  SPDX-License-Identifier: LGPL-2.1+\n#\n#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU Lesser General Public License as published by\n#  the Free Software Foundation; either version 2.1 of the License, or\n#  (at your option) any later version.\n\n[Unit]\nDescription=Multi-User System\nDocumentation=man:systemd.special(7)\nRequires=basic.target\nConflicts=rescue.service rescue.target\nAfter=basic.target rescue.service rescue.target\nAllowIsolate=yes\n\nRequires: 要求于某个 Target 一起运行\nConflicts: 冲突的 Target\nAfter: 在哪些 Target 之后启动\nAllowIsolate: 是否允许使用 systemctl isolate 命令切换到这个 Target\n\n参考资料\n\nSystemd - Wikipedia （存档 于 互联网档案馆）\nSystemd - Ubuntu Manpages （存档 于 互联网档案馆）\n第十七章 认识系统服务(daemons) - 鸟哥的 Linux 私房菜 （存档 于 互联网档案馆）\n\n","categories":["技术向"],"tags":["Linux"]},{"title":"NOI Linux 2.0 上手体验","url":"//post/noi-linux-2/","content":"时隔多年，CCF 终于发布了新版的 NOI Linux ，替换了以前基于 Ubuntu 14.04 的 NOI Linux 1.4.1。\n\n在 NOI Linux 2.0 发布的当天，我就迫不及待地下载好了镜像（ubuntu-noi-v2.0.iso），但由于时间原因，没有第一时间进行体验。\n安装\n首先先新建好一台虚拟机。\n\n新建虚拟机及挂载镜像的步骤不再过多叙述，在安装时需要断开网络连接。\n\n开屏就是自定义的启动界面。\n安装后需要连接网络，运行 sudo apt update 更新软件包列表，然后安装 open-vm-tools-desktop ，安装完成后建议重启虚拟机。\n简单体验\n整体评价\n\n在考场上如果提供 NOI Linux 虚拟机的话，可能需要手动安装 VMware Tools （因为没网所以不能装 Open VM Tools），略麻烦。\n系统操作有点卡，不知道是不是因为虚拟机的原因。\n预装的软件部分是处于半残状态的，在考场上无法正常使用。\n编译器版本较新，默认支持一些新的语言特性。\n在考场上推荐使用 Sublime Text 或者 Code::Blocks 进行代码编写，不推荐使用 VSCode 。\n\n更新\n\n模拟考试环境时不建议安装任何更新，以还原考场上的「本真的」NOI Linux 。如果需要日常使用则建议安装更新。\nVSCode\n\nCCF 预置在 NOI Linux 2.0 中的 VSCode 只能当一个编辑器，并且并没有安装中文语言包和完整的 C/C++ 扩展，处于半残状态。\nSublime Text\n\n相比于 VSCode ，NOI Linux 预装的 Sublime Text 的自动补全功能在始终离线的环境下依旧能正常工作，同时 Sublime Text 也支持单文件编译运行，颜值也不低，写起代码来很舒服。\nCode::Blocks\n\nCode::Blocks 是一个免费、开源、跨平台的集成开发环境，可以在 codeblocks.org 上找到系统对应版本的 Code::Blocks 预编译二进制包及其源码。\nNOI Linux 中内置的 Code::Blocks 的自动补全、代码提示等功能均能正常使用，且不需要网络连接。\nNano\n\n关于 Nano 此处就不再过多叙述，可以在 The GNU nano homepage 上找到系统对应版本的 Nano 预编译二进制包及其源码。\nEmacs\n\n笔者并没有深度体验过 Emacs ，所以不做过多评价，在这里推荐一篇入门教程：Emacs 入门指南：Why &amp; How - Keep Coding 。\n可以在 GNU Emacs 找到系统对应版本的 Emacs 预编译二进制包及其源码。\nVim\n\nVim 还是老样子，可以在 vim.org 上找到系统对应版本的 Vim 预编译二进制包及其源码，关于 Vim 的使用请参阅 第九章、vim 程式編輯器 - 鳥哥的 Linux 私房菜。\n编译器\n\n\n使用 g++ -dM -E -x c++ /dev/null | grep -F __cplusplus 命令可以查看编译器默认使用的 C++ 标准。\n\n通过上图可以得出 NOI Linux 自带的编译器默认的 C++ 标准是 C++ 14 ，希望 CCF 在比赛评测的时候不要添加 --std=c++98 ，同时选手也需要做好无法使用 C++ 14 特性的准备。\n对拍\nNOI Linux 2.0 依旧安装了 Arbiter 评测系统，但是由于系统内置了 Python ，所以可以自行编写对拍程序。\n后记\nNOI Linux 的本次更新使得 NOI Linux 系统更加地人性化、更加适合 OIer 们的使用。美中不足的一点是此版本的 NOI Linux 仍然没有卸载 openssh-client 软件包。\n参考资料\n\nNOI Linux 2.0 发布，将于 9 月 1 日起正式启用！ - noi.cn\n安装 Open VM Tools - VMware Tools - VMware Docs\n\n","categories":["笔记本"],"tags":["Linux","VMware"]},{"title":"NOIP 2020 游记","url":"//post/noip-2020/","content":"我属实没想到初中生也能参加 NOIP ，只不过不给评奖罢了。\n\n推荐阅读：NOIP 2020 题解 @ oi.baoshuo.ren\nDay -1\n强迫自己学了一天竞赛，并且和周围的人讨论了讨论 NOIP 会考点啥。\n晚上看见机房里的学长们全员 typeracer ，属实被震撼到了。\nDay 0\n上午有 rp++ 模拟赛，结果一下子掉了 100 多分 ，出题人我真谢谢你 。\n\n在线膜拜两位 AK 神仙。\n\n这是为数不多的几次我比 youwike 考得好的模拟赛。\n然后就该收拾东西准备走了。\n下午坐火车去秦皇岛，在车上教练把手机收走了 ，过了一会发现没缓存离线题面又把手机要了回来 。\n到了宾馆发现环境还不错，虽然 AzusaCat 和 AlanSP 的屋子正对着工地，但是比别人的都要大。\n\n开会的时候教练们讲了讲注意事项，顺便替我们把选手胸牌领了回来。\n晚上吃完饭，写了两个板子，颓废到 12 点才睡，羡慕 AlanSP 的健康作息。\n\n可惜 youwike 最后还是没上二百。\nDay 1\n\n比赛前照了一张合影。\n打开题目发现 T1 可做，写了写调了调，过了样例。拿大样例测了下发现没开 long long ，开了就过了。\n然后就去看其他题，并没有什么思路，于是水了水能水的暴力，骗了骗能骗的分。\n出了考场以后就赶忙收拾东西去火车站。\n在火车上出来了 OI 题库的民间数据，我测了下发现 T1 过了，当时非常兴奋，出分了以后才知道自己被卡了的事实。\n然后就该退役去学文化课了嘛。\n（完）\n","categories":["乐生活"],"tags":["游记"]},{"title":"使用树莓派+Nginx搭建 Rtmp 直播服务","url":"//post/raspberry-pi-rtmp-live/","content":"国庆在家闲着没啥事，把一直在角落里吃灰的树莓派 4B 拿出来捣鼓了几下。\n\n使用 nginx 模块：nginx-rtmp-module\n安装 nginx &amp; nginx-rtmp-module\napt, yes!\napt update\napt upgrade -y\napt install nginx libnginx-mod-rtmp -y\n访问服务器 IP ，出现如下图所示网页即代表安装成功。\n\n修改 nginx 配置\n打开 /etc/nginx/nginx.conf ，在末尾处插入下面的配置\nrtmp &#123;\n    server &#123;\n        listen     1935;              # 服务端口\n        chunk_size 4096;              # 数据传输块的大小\n\n        application vod &#123;\n            play /opt/video;          # 视频文件存放位置。\n        &#125;\n\n        application rtmplive &#123;\n            live            on;        # 开启直播\n            max_connections 64;        # 为 rtmp 引擎设置最大连接数。默认为 off\n        &#125;\n\n        application live &#123;\n            live                on;              # 开启直播\n            hls                 on;              # 这个参数把直播服务器改造成实时回放服务器。\n            wait_key            on;              # 对视频切片进行保护，这样就不会产生马赛克了。\n            hls_path            /opt/video/hls;  # 切片视频文件存放位置。\n            hls_fragment        10s;             # 设置HLS片段长度。\n            hls_max_fragment    10s;             # 设置HLS片段最大长度。\n            hls_playlist_length 30s;             # 设置HLS播放列表长度。\n            hls_continuous      on;              # 连续模式。\n            hls_cleanup         on;              # 对多余的切片进行删除。\n            hls_nested          on;              # 嵌套模式。\n        &#125;\n    &#125;\n&#125;\n打开默认站点配置文件 /etc/nginx/sites-available/default ，在 server 部分的末尾添加以下内容\nlocation /live &#123;\n    types &#123;\n        application/vnd.apple.mpegurl m3u8;\n        video/mp2t                    ts;\n    &#125;\n\n    autoindex on;\n    alias     /opt/video/hls;\n\n    expires -1;\n\n    add_header &#x27;Cache-Control&#x27;                    &#x27;no-cache&#x27;;\n    add_header &#x27;Access-Control-Allow-Origin&#x27;      &#x27;*&#x27;;\n    add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;\n    add_header &#x27;Access-Control-Allow-Methods&#x27;     &#x27;GET, POST, OPTIONS&#x27;;\n    add_header &#x27;Access-Control-Allow-Headers&#x27;     &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;\n&#125;\nlocation /stat &#123;\n    rtmp_stat all;\n    # rtmp_stat_stylesheet stat.xsl;\n&#125;\n插入完以后配置文件会变成下面的样子\n--- /etc/nginx/sites-available/default\n+++ /etc/nginx/sites-available/default\n@@ -1,14 +1,36 @@\n server &#123;\n     listen 80 default_server;\n     listen [::]:80 default_server;\n\n     root /var/www/html;\n\n     index index.html index.htm index.nginx-debian.html;\n\n     server_name _;\n\n     location / &#123;\n         try_files $uri $uri/ =404;\n     &#125;\n+\n+    location /live &#123;\n+        types &#123;\n+            application/vnd.apple.mpegurl m3u8;\n+            video/mp2t                    ts;\n+        &#125;\n+\n+        autoindex on;\n+        alias     /opt/video/hls;\n+\n+        expires -1;\n+\n+        add_header &#x27;Cache-Control&#x27;                    &#x27;no-cache&#x27;;\n+        add_header &#x27;Access-Control-Allow-Origin&#x27;      &#x27;*&#x27;;\n+        add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;\n+        add_header &#x27;Access-Control-Allow-Methods&#x27;     &#x27;GET, POST, OPTIONS&#x27;;\n+        add_header &#x27;Access-Control-Allow-Headers&#x27;     &#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;\n+    &#125;\n+    location /stat &#123;\n+        rtmp_stat all;\n+        # rtmp_stat_stylesheet stat.xsl;\n+    &#125;\n &#125;\n修改完成后使用 nginx -t 测试配置文件是否正确\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n当出现成功提示时，使用 nginx -s reload 平滑重启 nginx。\n重启成功后使用 netstat -lnp 查看 tcp/1935 端口是否开启。\n\n使用 OBS 连接直播服务器\n打开 OBS ，在 设置 -&gt; 推流 中配置以下内容\n\n\n\n项目\n值\n\n\n\n\n服务\n自定义...\n\n\n服务器\nrtmp://$&#123;ip&#125;/live\n\n\n串流密钥\n$&#123;key&#125;\n\n\n\n其中，$&#123;ip&#125; 和 $&#123;key&#125; 设置为你需要的值即可。\n回到主界面，点击 开始推流 进行推流。\n使用客户端拉取直播流\n\n在 PotPlayer QQ影音 等播放器中选择 打开-&gt;打开URL 。\n\n输入 http://$&#123;ip&#125;/live/$&#123;key&#125;/index.m3u8 ，点击确定。\n\n此时可以就看到直播画面了。\n网页端播放\n页面中只有一个播放器，其他功能请自行实现。\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Live Player&lt;/title&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;dplayer&quot;&gt;&lt;/div&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/hls.js@0.14.13/dist/hls.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/dplayer@1.26.0/dist/DPlayer.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n        const dp = new DPlayer(&#123;\n            container: document.getElementById(&#x27;dplayer&#x27;),\n            live: true,\n            video: &#123;\n                url: &#x27;http://$&#123;ip&#125;/live/$&#123;key&#125;/index.m3u8&#x27;,\n                type: &#x27;hls&#x27;,\n            &#125;,\n        &#125;);\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n后记\n如果没有在外直播的需求，不要将 rtmp 端口映射至公网，这可能会带来一些不必要的麻烦。\n参考资料\n\nNGINX-based Media Streaming Server\n\n","categories":["技术向"],"tags":["折腾"]},{"title":"给腾讯云服务器免费增加第二个 IP","url":"//post/tencent-cloud-cvm-dual-ip/","content":"前言\n良心云果然是良心云，增加了一个 IP 四舍五入居然不要钱，不过还是要登进系统配置一下双 IP 的。\n\n\n和客服的对话\n增加网卡&amp;公网 IP\n\n点击按钮新建一个弹性网卡并绑定\n\n绑定完以后可以在服务器的弹性网卡管理页面看到详情\n\n点击新建的弹性网卡，进入管理页面，并记录下这张网卡的内网 IP，稍后会用到\n\n点击绑定按钮，并申请一个弹性公网 IP\n\n\n此时弹性公网 IP 已经绑定成功，并且可以看到已经变为不收取 IP 资源费的状态了\n\n查看主网卡的内网 IP，并记录下这个 IP，稍后会用到\n配置服务器的网络设置\n使用 ip addr 查看网卡名称，并记录下来\n\n切换到网卡配置文件目录\ncd /etc/sysconfig/network-scripts/\n编辑 ifcfg-eth0 文件，将下方内容修改后填入\nDEVICE=&quot;eth0&quot;             # 弹性网卡名称\nNM_CONTROLLED=&quot;yes&quot;       # 是否由 Network Manager 控制该网络接口\nONBOOT=&quot;yes&quot;              # 系统启动时是否激活\nIPADDR=&quot;172.21.0.10&quot;      # 弹性网卡上的 IP 地址\nNETMASK=&quot;255.255.240.0&quot;   # 子网掩码\nGATEWAY=&quot;172.21.0.1&quot;      # 网关\n\n其中 IPADDR 填写主网卡的内网 IP。\n子网掩码可以使用 V2EX 提供的 IPv4 子网查询工具 查询对应的子网。\n网关根据创建网卡时选择的子网而定。\n\n新建 ifcfg-eth1 文件，将下方内容修改后填入\nDEVICE=&quot;eth1&quot;             # 需配置的弹性网卡名称（此处是新添加的网卡名称）\nNM_CONTROLLED=&quot;yes&quot;       # 是否由 Network Manager 控制该网络接口\nONBOOT=&quot;yes&quot;              # 系统启动时是否激活\nIPADDR=&quot;172.21.0.12&quot;      # 弹性网卡上的 IP 地址\nNETMASK=&quot;255.255.240.0&quot;   # 子网掩码\n# GATEWAY=&quot;172.21.0.1&quot;    # 网关（若与eth0的网关不同，需要删除注释并修改为正确的网关）\n\n其中 IPADDR 填写新添加网卡的内网 IP。\n子网掩码可以 V2EX 提供的 IPv4 子网查询工具 查询对应的子网。\n网关根据创建网卡时选择的子网而定。\n\n保存后重启网络服务。\nservice network restart\n\n配置路由（可选）\n\n按照上述步骤配置好后，Linux 还是默认都从主网卡发包。\n您可通过策略路由让报文从哪个网卡进，并从该网卡返回。\n\n创建路由表\necho &quot;10 t1&quot; &gt;&gt; /etc/iproute2/rt_tables\necho &quot;20 t2&quot; &gt;&gt; /etc/iproute2/rt_tables\n添加默认路由\nip route add default dev eth0 via 172.21.0.1 table 10\nip route add default dev eth1 via 172.21.0.1 table 20\n\n上述两个命令中，172.21.0.1 要分别替换成主网卡所属子网的网关，以及辅助网卡所属子网的网关。\n\n配置策略路由\nip rule add from 172.21.0.10 table 10\nip rule add from 172.21.0.12 table 20\n","categories":["笔记本"],"tags":["腾讯云"]},{"title":"USTC Hackergame 2020 Write Up","url":"//post/ustc-hackergame-2020-write-up/","content":"前言\n对于我这种啥也不会的蒟蒻，拿到第 676 名已经是很不错的了（逃\n\nweb\n签到题\nweb 题当然要先看源码了（出题人好恶毒啊）\n\n再就是改值、提交\n\nso easy~\n\nflag 获取成功：flag&#123;hR6Ku81-HappyHacking2020-35a790fff0&#125;\n2048\n首先 F12 看下源码，看到了一个有趣的东西\n\n这么好的东西当然要拖到 console 里面去啊\n\n\n小彩蛋：JavaScript 中 String 类型转换成数字类型时会得到 NaN，凑成了 banana 。\n\n然后就出来了此题的 「flxg」\n\nflxg 获取成功：flxg&#123;8G6so5g-FLXG-7b77994fc5&#125;\ngeneral\n一闪而过的 Flag\n直接打开是会闪，但是，你闪归你闪，我直接用 cmd 打开，你总不能 把我 cmd 窗口关掉吧 还继续闪吧\n\nflag 获取成功：flag&#123;Are_you_eyes1ght_g00D?_can_you_dIst1nguish_1iI?&#125;\n猫咪问答++\n\n\n第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？\n\n\n这个很好找，链接奉上：https://tools.ietf.org/html/rfc1149\n\n\nUSTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？\n\n\n谷歌一下，你就知道 https://news.ustclug.org/2019/09/2019-sfd-ustc/\n\n\n中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？\n\n\n\n至于剩下的… 懒得找了，直接暴力吧\n\n\n以下编程语言、软件或组织对应标志是哺乳动物的有几个？\nDocker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.\n\n\n\n\n中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？\n\n\n\n附上代码：\nfor((i=1;i&lt;=23;i=($i+1))); do for((j=1;j&lt;=30;j=($j+1))); do echo &quot;[$i, $j] $(curl -s &#x27;http://202.38.93.111:10001/&#x27; --data &quot;q1=$i&amp;q2=256&amp;q3=9&amp;q4=$j&amp;q5=17098&quot; -H &quot;Cookie: PHPSESSID=******; session=******&quot; | grep &#x27;flag.*&#x27;)&quot; ; done ; done\nflag 获取成功：flag&#123;b4a31f2a_G00G1e_1s_y0ur_fr13nd_228b608a32&#125;\n233 同学的 Docker\n\n众所周知，Docker 镜像是分层存储的，所以这道题可以很轻松地解出来。\n\n先 pull 下来镜像。\ndocker inspect 8b8d3c8324c7/stringtool\n然后查看镜像的元信息，下面是简化版的结果（json 格式）\n[\n  &#123;\n    &quot;Id&quot;: &quot;sha256:be6d023618d199e0ec7448f70e5e47a00c6c2b79777ad5e2d312a6f74d6ad56b&quot;,\n    &quot;RepoTags&quot;: [&quot;8b8d3c8324c7/stringtool:latest&quot;],\n    &quot;RepoDigests&quot;: [\n      &quot;8b8d3c8324c7/stringtool@sha256:aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152&quot;\n    ],\n    &quot;Parent&quot;: &quot;&quot;,\n    &quot;Comment&quot;: &quot;&quot;,\n    &quot;Created&quot;: &quot;2020-10-16T12:51:09.221320098Z&quot;,\n    &quot;Container&quot;: &quot;d2f452fddd5c71c8c57a29d67f29c69ffac419440d57664dad6e4ba1f0eff8a1&quot;,\n    &quot;GraphDriver&quot;: &#123;\n      &quot;Data&quot;: &#123;\n        &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/e5ae9d16844b8a8f5a943dec4172e04f6cdd283af181e1d17315c6b4df883eb1/diff:/var/lib/docker/overlay2/e394091d4d369e4b39d51389ada0156f8df91164e7928ca705321012b3164171/diff:/var/lib/docker/overlay2/de25217d9ac38b566f5e21050325fc0b712b81eb76d8bf949535efe4048150dc/diff:/var/lib/docker/overlay2/44b1b520904edb80dde2e1cfd0bb4e8cc272bcdb3abfbecb9f7c58c66fda461f/diff:/var/lib/docker/overlay2/77e74c48f3d794c594fcbbaafb1de3de084d5680c7361eb3c694cd74bb5ba7d2/diff:/var/lib/docker/overlay2/e2f50b5ba8b187a859f175daf953b5f1244ca210e65fc281cebbb490c1736090/diff:/var/lib/docker/overlay2/c49ab73078dbf960574fba1cb22cbfa6cb80300213ef9ce0e8541204181b2ea6/diff:/var/lib/docker/overlay2/cdca87b3621cb3bafbb198f6b90aa229e225eec78f0a58b0b17415bc0c252c3c/diff:/var/lib/docker/overlay2/c75c733f9469403b6677b86de747b78eee86b342e4b8cb67301b62bc37148f0d/diff:/var/lib/docker/overlay2/6c5b7e0fcab90d5b9e95987fa4901fdaca167e20078efc15255025edaa3bffe5/diff:/var/lib/docker/overlay2/15ec67c13cb10d0efe49ffa8038af1e4e15ee4ace3d0e3cbb3b35373438162ee/diff:/var/lib/docker/overlay2/63919ff473de17fc4a04bebe8e3163ac9a6615e860c8d154c58b40e83cae3008/diff:/var/lib/docker/overlay2/301804bb5ea02f0be82935af0838aae81fb796470e35ca799c010ee551c63901/diff:/var/lib/docker/overlay2/837182ab20cd4356c084efceb23eaf81921b199deeb4260a3bb8bd3690bdf248/diff:/var/lib/docker/overlay2/83f0cdea53e8d31281de36413a4d5e5ba9aef2fce54733ab8686bdc04a0c7736/diff:/var/lib/docker/overlay2/fad7f08992db8ca5ee5d731ccc21ac6746107798714b453e6fb21f23f0de8ed6/diff:/var/lib/docker/overlay2/2742f86c6ff24a479ff553458418cee16e1d90c3ba6e51f28599fcd2143108c0/diff:/var/lib/docker/overlay2/f0ea5cad64532fdff5edaaad4880132a8811bbd04019a2b216710dfda4bb829b/diff:/var/lib/docker/overlay2/af49c2f259440c1d94b6843258a68201bb3a37b6ec0e20b7e1dc6773de29e5eb/diff:/var/lib/docker/overlay2/9d6591c82c88ba3d461cf4d20c03e2a4b064454e3bbe9718b26e97eaf1fa703b/diff:/var/lib/docker/overlay2/eb71979f0abedbf4854bd95a364726dd7dc21b779512dad582bdefe87b24efb3/diff:/var/lib/docker/overlay2/b14870a3b3e75ac73506b96ad8de3ac918b6d1dbb8cb702e56b1d879910ee8d7/diff&quot;,\n        &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/merged&quot;,\n        &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/diff&quot;,\n        &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/9d9609e4438067f4a2b0d26aeefab51a6e0abb58262e571b5fe2558955f271b7/work&quot;\n      &#125;,\n      &quot;Name&quot;: &quot;overlay2&quot;\n    &#125;\n  &#125;\n]\n查看 diff 文件夹：\n\n然后就能看到文件内容了~\n\nflag 获取成功：flag&#123;Docker_Layers!=PS_Layers_hhh&#125;\n","categories":["技术向"],"tags":["CTF","Hackergame"]},{"title":"USTC Hackergame 2021 Write Up","url":"//post/ustc-hackergame-2021-write-up/","content":"签到\n\n点击 Next 键，发现页面的 URL 后多了个 ?page=1 ，结合第一个页面中的 1970-01-01 字样，可以判断出来 page 参数应为比赛期间的 Unix 时间戳。\n示例：http://202.38.93.111:10000/?page=1635002186\n进制十六——参上\n\n可以照着 16 进制数据搞一搞，然后 flag 就出来了：\n\n去吧！追寻自由的电波\n下载音频之后使用 Adobe Audition 进行变速即可。\n\n旅行照片\n\n从图片中可以看出拍摄者在 14 层，并且楼下有一个蓝色的肯德基，那么使用 Google 搜索关键词 海洋 蓝色 KFC 可以得到以下结果：\n\n从照片的描述中可以得到这家肯德基位于秦皇岛新澳海底世界。\n在百度地图上可以找到这家肯德基的电话、详细位置。同时按照卫星图可以推断出拍摄者所在的方向，进而推断出拍摄的大致时间。\n\nflag 获取成功。\nFLAG 助力大红包\n查看点击助力按钮后的浏览器请求可以发现请求时有一个名为 IP 的参数，尝试修改这个参数发现会报错提示前后端检测 IP 不一致，那么考虑添加 X-Forwarded-For 头伪造经过代理的来源 IP 地址即可。\n比赛平台的速率限制为每秒最多请求一次，所以在每次请求后还需要等待 1 秒。\nfor ((i=0; $i &lt;= 255; i = ($i + 1))); do\n    curl &quot;http://202.38.93.111:10888/invite/$invite_id&quot; -H &quot;X-Forwarded-For: $i.11.45.14&quot; -d &quot;ip=$i.11.45.14&quot;\n    sleep 1\ndone\n猫咪问答 Pro Max\n\n2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（sec.ustc.edu.cn）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？\n\nWayback Machine 是个好东西啊。（页面存档）\n\n中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？\n\n\nLUG 官网上直接搜就出来了。但实际上的答案应该是 5 ，可能是官网没更新最新信息。\n\n中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？\n\n\n谷歌是你的好朋友。\nHackergame 2020 「猫咪问答++」 flag 。\n\n\n可以看到正确答案为 Development Team of Library 。\n\n在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？\n\n可以在 the record of the proceedings of SIGBOVIK 2021（页面存档）的 212 页找到这篇论文。\n\n不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？\n\n搜索关键词：IETF Protocol Police\n可以搜到这个「搞笑 RFC」：Establishing the Protocol Police ，在第 6 节中有相关介绍。\n正确答案应为 /dev/null 。\n卖瓜\n最开始拿到题我先想的是能不能用负数凑，结果发现不行，于是考虑溢出。\n试了试发现使用 6 斤瓜无法触发溢出，而使用 9 斤瓜的就可以触发溢出了。\n\n写了个脚本跑一跑，试出来了几个负数，挨个试了下发现放 2e18 个 9 斤瓜可以凑到 20 斤。\n\n然后在计算器里算了一下，只需要加 6 斤的瓜和 9 斤的瓜各 29782938247303441 个就能让称的显示变成 -1 。\n接下来放 2 个 6 斤瓜和 1 个 9 斤瓜就能拿到 flag 了。\n透明的文件\n本题与 ANSI Escape Code 有关。\n首先需要将文件中的 [ 替换成 \\033[ ，然后再找一个支持显示 ANSI 控制码的终端输出。\n然后发现一片空白，啥也没有。\n捣鼓到快怀疑人生才发现终端上的某些字符被遮挡了，进而想到这个脚本可能清除了终端上某些地方的字符来显示 flag 。\n先编写一个复读函数用来填满终端：\nrepeat() &#123;\n    for ((i = 1; $i &lt;= $1; i = ($i + 1))); do\n        echo -n &quot;▉&quot;\n    done\n&#125;\n\n再配合上方替换好的文件输出即可，效果如图。\nAmnesia\n轻度失忆\n使用 putchar() 函数即可解决此问题。\n#include &lt;stdio.h&gt;\n\nint main() &#123;\n    putchar(&#x27;H&#x27;);\n    putchar(&#x27;e&#x27;);\n    putchar(&#x27;l&#x27;);\n    putchar(&#x27;l&#x27;);\n    putchar(&#x27;o&#x27;);\n    putchar(&#x27;,&#x27;);\n    putchar(&#x27; &#x27;);\n    putchar(&#x27;w&#x27;);\n    putchar(&#x27;o&#x27;);\n    putchar(&#x27;r&#x27;);\n    putchar(&#x27;l&#x27;);\n    putchar(&#x27;d&#x27;);\n    putchar(&#x27;!&#x27;);\n    putchar(&#x27;\\n&#x27;);\n    return 0;\n&#125;\n图之上的信息\n可以使用 __schema 字段查询所有存在的类型：\n&#123;\n  __schema &#123;\n    types &#123;\n      name\n    &#125;\n  &#125;\n&#125;\n\n发现一个名为 GUser 的类型，再构造一个语句查询类型结构：\n&#123;\n  __type(name: &quot;GUser&quot;) &#123;\n    name\n    fields &#123;\n      name\n      type &#123;\n        name\n        kind\n        ofType &#123;\n          name\n          kind\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n顺便获取了下 GNote 类型的结构：\n\n进行查询即可得到 flag ：\n\n后记\n今年拿的名次比去年的高，感觉在这一年里自己的 web 水平有很大的提升，但 math 还是一如既往地爆了零，和我的数学中考成绩一样的烂。\n以后如果有时间的话逆向、汇编什么的也都要学一学，不然的话每次一看见 binary 就有点不知所措、无从下手属实不太好。\n推荐阅读：USTC Hackergame 2020 Write Up\n","categories":["技术向"],"tags":["CTF","Hackergame"]},{"title":"在 VMware 上安装 macOS 11 Big Sur Beta","url":"//post/vmware-macos-bigsur/","content":"工具准备\n\n文件：BigSur.cdr\n文件：unlocker.zip\n软件：VMware Workstation Pro 15\n\n文末会给出上述工具的下载地址。\n安装 VMware\n安装步骤这里不再细说。\n不过这里来说下 VMware 15.5.5 以后 VMware 和 微软的新动作：VMware 和 Hyper-V 可以共存了~[1][2]\n*注：需 Windows 10 2004 以上版本的系统\n只需要在安装时勾选下图所示的选项即可：\n\n于是，我的 WSL2 和我的 Docker Desktop 可以和 VMware 一起愉快的玩耍辣 😆~\n解锁 VMware\n条件：先关闭 VMware 的所有进程。\nWindows\n解压 Unlocker.zip 内的所有文件到一个文件夹中，右键 win-install.cmd ，选择&quot;以管理员身份运行&quot;，等待运行完毕即可。\nLinux\n使用以下命令解锁 VMware ：\nunzip unlocker.zip\nchmod +x lnx-install.sh\nsudo bash lnx-install.sh\n检验方法：创建虚拟机时是否可以选择 macOS 系统。\n创建虚拟机\n\n▲ 打开 VMware Workstation 15 ，选择 「新建虚拟机」。\n\n▲ 初始页面\n\n▲ 硬件兼容性\n\n▲ 镜像配置\n我们创建完成后再挂载镜像，选择&quot;稍后安装操作系统&quot;。\n\n▲ 选择系统版本\n由于 Unlocker 最高只支持 macOS 10.16 ，所以这里选择最高的版本即 macOS 10.16 。\n\n▲ 设置虚拟机名称、选择存储位置\n\n▲ 设置 CPU 核心数量\n\n▲ 调整内存大小\n\n▲ 网络配置\n\n▲ IO 配置\n\n▲ 磁盘配置\n\n▲ 磁盘配置\n\n▲ 磁盘配置\n\n▲ 磁盘配置\n\n▲ 完成！\n配置虚拟机\n在 vmx 文件末尾添加以下内容并保存。\nsmc.version = &quot;0&quot;\nhw.model = &quot;MacBookPro16,1&quot;\nboard-id = &quot;Mac-E1008331FDC96864&quot;\nboard-id.reflectHost = &quot;TRUE&quot;\n挂载安装镜像\n点击&quot;编辑虚拟机设置&quot;，选择&quot;CD/DVD&quot;选项。\n\n如图所示，先勾选&quot;使用 ISO 映像文件&quot;选项，再点击浏览，点击&quot;所有文件&quot;，选中 bigsur.cdr 并确认。\n保存以后点击&quot;开启虚拟机&quot;\n安装 macOS\n\n▲ 耐心等待加载\n\n▲ 选择中文并继续\n\n▲ 选中磁盘工具并打开\n\n▲ 找到名称为 VMware Virtual SATA Hard Drive Media 的磁盘，选中该磁盘\n\n▲ 抹掉名称为 VMware Virtual SATA Hard Drive Media 的磁盘，格式选择 APFS\n\n▲ 退出磁盘工具，选择 安装 macOS 并继续\n\n▲ 点击继续开始正式安装\n\n▲ 同意条款与条件\n\n▲ 选择安装位置\n\n▲ 开始安装\n\n▲ 上面显示的剩余时间通常都是忽悠人的，得等好久\n配置 macOS\n\n▲ 首先选择国家和地区\n接下来按照自己需求配置即可，到配置迁移助理时选择以后\n\n▲ 选择 以后\n\n▲ 选择 稍后设置\n\n▲ All done!\n安装 VMware Tools\n在 VMware 的 虚拟机(M) 菜单栏中选择 安装 VMware Tools(T)... 选项。\n\n之后按照步骤操作就行啦~\n参考资料\n[1] VMware Blogs: VMware Workstation 15.5 Now Supports Host Hyper-V Mode\n[2] Microsoft Tech Community: VMware Workstation and Hyper-V\n文件下载\n百度网盘\n\n链接：https://pan.baidu.com/s/1m_iwiZK1XVIhwrrpCenB3Q\n提取码：blog\n\n","categories":["技术向"],"tags":["VMware","macOS"]},{"title":"使用 Cloudflare Warp 为单栈 VPS 添加双栈网络访问","url":"//post/vps-cloudflare-warp/","content":"Warp 是 Cloudflare 提供的一项基于 WireGuard 的网络流量安全及加速服务，能够让你通过连接到 Cloudflare 的边缘节点实现隐私保护及链路优化。\n\n由于 Cloudflare 官方的 Warp Client 过于臃肿，导致我看到安装包大小后就决定直接放弃安装，于是我选择了 ViRb3/wgcf 替代。\n\n安装依赖\n可以前往 Releases 页面 下载编译好的二进制文件以供使用。\n也可使用如下命令安装：\ncurl -Ls https://git.io/wgcf-installer.sh | bash\n安装好之后运行 wgcf --help ，得到类似下图的输出即为安装成功：\n\n另外还需按照 WireGuard 官网 上的说明安装 WireGuard 。\n根据需求可能还需要安装 resolvconf 。\n生成 WireGuard 配置文件\n先使用 wgcf register 命令注册 Warp ，使用键盘上的方向键选择 「Yes」 并回车确认：\n\n注册成功后的提示：\n\n之后使用 wgcf generate 命令生成配置文件。\n\n修改 WireGuard 配置文件\n这是一份生成出来的配置文件：\n[Interface]\nPrivateKey = ******\nAddress = 172.16.*.*/32\nAddress = fd01:******/128\nDNS = 1.1.1.1\nMTU = 1280\n\n[Peer]\nPublicKey = ******\nAllowedIPs = 0.0.0.0/0\nAllowedIPs = ::/0\nEndpoint = engage.cloudflareclient.com:2408\n\n添加 IPv4 网络访问\n\n删去 [Interface] 中的 Address = fd01:******/128 ；\n删去 [Peer] 中的 AllowedIPs = ::/0 ；\n将 Endpoint 的域名替换为解析出来的 IPv6 地址，如 [2606:4700:d0::a29f:c001]:2408 。\n\n\n添加 IPv6 网络访问\n\n删去 [Interface] 中的 Address = 172.16.*.*/32 ；\n删去 [Peer] 中的 AllowedIPs = 0.0.0.0/0 ；\n将 Endpoint 的域名替换为解析出来的 IPv4 地址，如 162.159.192.1:2408 。\n\n\n\n如果不需要使用 Cloudflare 的 DNS 服务可以删去 DNS = 1.1.1.1 这一行，使用的话需要安装 resolvconf 。\n启动 WireGuard 隧道\n将刚才修改好的配置文件移动到 /etc/wireguard/ 目录下，推荐命名为 wgcf.conf ，下面的操作以这个文件名为准。\n使用 systemd enable --now wg-quick@wgcf 命令启动隧道，然后使用 wg show wgcf 命令查看隧道状态。\n如果在启动时出现了错误，可以使用 systemd status wg-quick@wgcf 命令查看错误信息，修复后使用 systemd start wg-quick@wgcf 启动隧道。\n\n之后就可以享受双栈网络带来的便利了~\n注：日常如果需要重启隧道可以使用 systemctl restart wg-quick@wgcf 命令。\n后记\n折腾这些的原因是我从某个 Player IX 那里嫖的 VM 没有提供 IPv4 网络访问权限，这让我日常的维护工作麻烦了很多，于是我想到了 Cloudflare Warp 这个东西。CloudFlare Warp 提供的网络访问相较于 TunnelBroker.net 、 TunnelBroker.ch 等一众隧道要好很多，延迟并不像其他隧道那样高。\n在查找资料的过程中我也发现了很多博客里面所描述的内容有误或已经过时，所以综合其他文章的内容加上自己的实践，写下了这篇文章。\n参考资料\n\n【WGCF】连接 CF WARP 为服务器添加 IPv4/IPv6 网络 - Luminous’ Home\nCloudflare WARP 给 VPS 服务器额外添加 IPv4 或 IPv6 网络获得“原生”IP - P3TERX\n\n","categories":["技术向"],"tags":["Cloudflare","Linux"]},{"title":"初识 Service Worker —— 使用 Workbox 快速开发 Service Worker","url":"//post/workbox-service-worker/","content":"对于优化前端加载性能这个问题，许多人以 http-cache、异步加载、304 状态码、文件压缩、CDN 等方法来解决。\n其实除了这些方法，还有一个比它们都强大的，那就是 Service Worker 。\n\n我们可以使用 Google Chrome 团队的 Workbox 来实现 Service Worker 的快速开发。\n注册 Service Worker\n在页面中添加以下内容以注册一个 Service Worker 。\n&lt;script&gt;\n  // 检测是否支持 Service Worker\n  // 也可使用 navigator.serviceWorker 判断\n  if (&#x27;serviceWorker&#x27; in navigator) &#123;\n    // 为了保证首屏渲染性能，在页面 onload 完之后注册 Service Worker\n    // 不使用 window.onload 以免冲突\n    window.addEventListener(&#x27;load&#x27;, () =&gt; &#123;\n      navigator.serviceWorker.register(&#x27;/sw.js&#x27;);\n    &#125;);\n  &#125;\n&lt;/script&gt;\n当然，在这之前你需要先有一个 Service Worker 的代码 /sw.js 。\n你可以在这个文件中写入以下代码来检测是否成功地注册了 Service Worker 。\nconsole.clear();\nconsole.log(&#x27;Successful registered service worker.&#x27;);\n\n引入 Workbox\n你可以使用 Google 提供的 CDN 来引入 Workbox 。\n只需在 sw.js 的开头写入以下内容即可：\nimportScripts(\n  &#x27;https://storage.googleapis.com/workbox-cdn/releases/6.1.1/workbox-sw.js&#x27;\n);\n如果你觉得 Google 的 CDN 不太靠谱的话，可以使用 workbox-cli 将资源存在本地：\nnpm i workbox-cli -g\nworkbox copyLibraries &#123;path/to/workbox/&#125;\n这时需要在 sw.js 的开头将上方写入的内容替换为以下内容即可：\nimportScripts(&#x27;&#123;path/to&#125;/workbox/workbox-sw.js&#x27;);\nworkbox.setConfig(&#123;\n  modulePathPrefix: &#x27;&#123;path/to&#125;/workbox/&#x27;,\n&#125;);\nWorkbox 策略\nStale While Revalidate（重新验证时过期）\n\n此策略将对网络请求使用缓存来响应（如果有），并在后台更新缓存。如果未缓存，它将等待网络响应并使用它。\n这是一个相当安全的策略，因为这意味着用户会定期更新其缓存。这种策略的缺点是：它总是从网络上请求资源，较为浪费用户的带宽。\nregisterRoute(\n  new RegExp(matchString),\n  new workbox.strategies.StaleWhileRevalidate()\n);\nNetwork First（网络优先）\n\n此策略将尝试首先从网络获得响应。如果收到响应，它将把它传递给浏览器，并将其保存到缓存中。如果网络请求失败，将使用最后一个缓存的响应。\nregisterRoute(new RegExp(matchString), new workbox.strategies.NetworkFirst());\nCache First（缓存优先）\n\n此策略将首先检查缓存中是否有响应，如果有响应，则使用该策略。如果请求不在缓存中，则将使用网络，并将任何有效响应添加到缓存中，然后再传递给浏览器。\nregisterRoute(new RegExp(matchString), new workbox.strategies.CacheFirst());\nNetwork Only（仅网络）\n\n强制响应来自网络。\nregisterRoute(new RegExp(matchString), new workbox.strategies.NetworkOnly());\nCache Only（仅缓存）\n\n强制响应来自缓存。\nregisterRoute(new RegExp(matchString), new workbox.strategies.CacheOnly());\n策略配置\n可以通过定义要使用的插件来自定义路由的行为。\nnew workbox.strategies.StaleWhileRevalidate(&#123;\n    // Use a custom cache for this route.\n    cacheName: &#x27;my-cache-name&#x27;,\n\n    // Add an array of custom plugins (e.g. `ExpirationPlugin`).\n    plugins: [\n        ...\n    ]\n&#125;);\nWorkbox 中的自定义策略\n在某些情况下，您可能希望使用自己的其他策略来响应请求，或者只是通过模板在 Service Worker 中生成请求。\n为此可以提供一个异步返回 Response 对象的函数 handler 。\nconst handler = async (&#123; url, event &#125;) =&gt; &#123;\n  return new Response(`Custom handler response.`);\n&#125;;\n\nworkbox.routing.registerRoute(new RegExp(matchString), handler);\n需要注意的是，如果在 match 回调中返回一个值，它将 handler 作为 params 参数传递到回调中。\nconst match = (&#123; url, event &#125;) =&gt; &#123;\n  if (url.pathname === &#x27;/example&#x27;) &#123;\n    return &#123;\n      name: &#x27;Workbox&#x27;,\n      type: &#x27;guide&#x27;,\n    &#125;;\n  &#125;\n&#125;;\n\nconst handler = async (&#123; url, event, params &#125;) =&gt; &#123;\n  // Response will be &quot;A guide to Workbox&quot;\n  return new Response(`A $&#123;params.type&#125; to $&#123;params.name&#125;`);\n&#125;;\n\nworkbox.routing.registerRoute(match, handler);\n如果 URL 中的某些信息可以在 match 回调中解析一次并在中使用，则这可能会对 handler 有所帮助。\nWorkbox 实践\n通常对于大部分项目使用 Workbox 时一般会引入相应的 gulp 或者 webpack 插件，在构建流程中完成对 Service Worker 的注册、将指定 URL 进行 Precache、完成 sw.js 的生成，等等。\n但是对于 Hexo、Jekyll 这些静态站点生成器或者 WordPress、Typecho 这些 CMS，如果不安装相应的插件，就需要自己从头编写一个 sw.js。\n先写一下总的配置：\nlet cacheSuffixVersion = &#x27;-210227&#x27;; // 缓存版本号\nconst maxEntries = 100; // 最大条目数\n\ncore.setCacheNameDetails(&#123;\n  prefix: &#x27;baoshuo-blog&#x27;, // 前缀\n  suffix: cacheSuffixVersion, // 后缀\n&#125;);\nGoogle Fonts\nGoogle Fonts 主要使用两个域名：fonts.googleapis.com 和 fonts.gstatic.com ，因此只需在匹配到这两个域名时进行缓存。\nworkbox.routing.registerRoute(\n  // 匹配 fonts.googleapis.com 和 fonts.gstatic.com 两个域名\n  new RegExp(&#x27;^https://(?:fonts\\\\.googleapis\\\\.com|fonts\\\\.gstatic\\\\.com)&#x27;),\n  new workbox.strategies.StaleWhileRevalidate(&#123;\n    // cache storage 名称和版本号\n    cacheName: &#x27;font-cache&#x27; + cacheSuffixVersion,\n    plugins: [\n      // 使用 expiration 插件实现缓存条目数目和时间控制\n      new workbox.expiration.ExpirationPlugin(&#123;\n        // 最大保存项目\n        maxEntries,\n        // 缓存 30 天\n        maxAgeSeconds: 30 * 24 * 60 * 60,\n      &#125;),\n      // 使用 cacheableResponse 插件缓存状态码为 0 的请求\n      new workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n        statuses: [0, 200],\n      &#125;),\n    ],\n  &#125;)\n);\njsDelivr CDN\n使用 jsDelivr CDN 时如果指定了库的版本，对应的文件可以称得上是永久不会改变的，所以使用 CacheFirst 来进行缓存。\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;^https://cdn\\\\.jsdelivr\\\\.net&#x27;),\n  new workbox.strategies.CacheFirst(&#123;\n    cacheName: &#x27;static-immutable&#x27; + cacheSuffixVersion,\n    fetchOptions: &#123;\n      mode: &#x27;cors&#x27;,\n      credentials: &#x27;omit&#x27;,\n    &#125;,\n    plugins: [\n      new workbox.expiration.ExpirationPlugin(&#123;\n        maxAgeSeconds: 30 * 24 * 60 * 60,\n        purgeOnQuotaError: true,\n      &#125;),\n    ],\n  &#125;)\n);\nGoogle Analytics\nWorkbox 有一个 Google Analytics 离线统计插件，可惜我用的是 Sukka 大佬编写的非官方 Google Analytics 实现，所以只能添加一个 NetworkOnly 来放弃离线统计。\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;^https://api\\\\.baoshuo\\\\.ren/cfga/(.*)&#x27;),\n  new workbox.strategies.NetworkOnly(&#123;\n    plugins: [\n      new workbox.backgroundSync.BackgroundSyncPlugin(&#x27;Optical_Collect&#x27;, &#123;\n        maxRetentionTime: 12 * 60, // Retry for max of 12 Hours (specified in minutes)\n      &#125;),\n    ],\n  &#125;)\n);\n图片\n由于我开通了 SM.MS 的 LifeTime Premium VIP ，所以图片当然是要存到这里啦~\nSM.MS 的图片域名有这几个：i.loli.net、vip1.loli.net、vip2.loli.net、s1.baoshuo.ren、s1.baoshuo.ren，只需要写一个正则匹配下就好了。\n由于图片链接对应的文件像 jsDelivr 一样也是几乎永久都不会改变的，所以使用 CacheFirst 来进行缓存。\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;^https://(?:i|vip[0-9])\\\\.loli\\\\.(?:io|net)&#x27;),\n  new workbox.strategies.CacheFirst(&#123;\n    cacheName: &#x27;img-cache&#x27; + cacheSuffixVersion,\n    plugins: [\n      // 使用 expiration 插件实现缓存条目数目和时间控制\n      new workbox.expiration.ExpirationPlugin(&#123;\n        maxEntries, // 最大保存项目\n        maxAgeSeconds: 30 * 24 * 60 * 60, // 缓存 30 天\n      &#125;),\n      // 使用 cacheableResponse 插件缓存状态码为 0 的请求\n      new workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n        statuses: [0, 200],\n      &#125;),\n    ],\n  &#125;)\n);\n友情链接\n这些文件只是偶尔更新，使用 StaleWhileRevalidate ，可以兼顾速度与版本更新。\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;^https://friends\\\\.baoshuo\\\\.ren(.*)(png|jpg|jpeg|svg|gif)&#x27;),\n  new workbox.strategies.StaleWhileRevalidate(&#123;\n    cacheName: &#x27;img-cache&#x27; + cacheSuffixVersion,\n    fetchOptions: &#123;\n      mode: &#x27;cors&#x27;,\n      credentials: &#x27;omit&#x27;,\n    &#125;,\n  &#125;)\n);\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;https://friends\\\\.baoshuo\\\\.ren/links.json&#x27;),\n  new workbox.strategies.StaleWhileRevalidate()\n);\nDisqus 评论\nDisqusJS 判断访客的 Disqus 可用性是通过检查 shortname.disqus.com/favicon.ico 和 disqus.com/favicon.ico ，显然是不能被缓存的。\nAPI 可以在无网络时使用 NetworkFirst 来达到无网络时也能查看评论的效果。\n另外 Disqus 本身也没有缓存的必要，所以对 *.disqus.com 使用 NetworkOnly 即可。\n但是 *.disquscdn.com 下的头像、JS、CSS 是可以缓存一段时间的，所以使用 CacheFirst 缓存 10 天。\n// API\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;^https://api\\\\.baoshuo\\\\.ren/disqus/(.*)&#x27;),\n  new workbox.strategies.NetworkFirst(&#123;\n    cacheName: &#x27;dsqjs-api&#x27; + cacheSuffixVersion,\n    fetchOptions: &#123;\n      mode: &#x27;cors&#x27;,\n      credentials: &#x27;omit&#x27;,\n    &#125;,\n    networkTimeoutSeconds: 3,\n  &#125;)\n);\n// Disqus\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;^https://(.*)disqus\\\\.com&#x27;),\n  new workbox.strategies.NetworkOnly()\n);\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;^https://(.*)disquscdn\\\\.com(.*)&#x27;),\n  new workbox.strategies.CacheFirst(&#123;\n    cacheName: &#x27;disqus-cdn-cache&#x27; + cacheSuffixVersion,\n    plugins: [\n      new workbox.expiration.ExpirationPlugin(&#123;\n        maxAgeSeconds: 10 * 24 * 60 * 60,\n      &#125;),\n      new workbox.cacheableResponse.CacheableResponsePlugin(&#123;\n        statuses: [0, 200],\n      &#125;),\n    ],\n  &#125;)\n);\n后缀匹配\n针对其余没有被域名匹配到的静态文件，通过文件后缀进行匹配并使用 StaleWhileRevalidate ，可以兼顾速度与版本更新。\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;.*.(?:png|jpg|jpeg|svg|gif|webp)&#x27;),\n  new workbox.strategies.StaleWhileRevalidate()\n);\nworkbox.routing.registerRoute(\n  new RegExp(&#x27;.*.(css|js)&#x27;),\n  new workbox.strategies.StaleWhileRevalidate()\n);\n默认行为\n使用 Workbox 的 defaultHandler 匹配剩下的请求（包括页面自身），一律使用 NetworkFirst ，借助 Workbox 的 runtimeCache 起到加速和离线效果。\nworkbox.routing.setDefaultHandler(\n  new workbox.strategies.NetworkFirst(&#123;\n    networkTimeoutSeconds: 3,\n  &#125;)\n);\n参考资料\n文章头图来自：https://developers.google.com/web/tools/workbox\nWorkbox 策略 一节中的配图来自：https://web.dev/offline-cookbook/\n\nWorkbox - Google Developers\nWorkbox, not sw-toolbox &amp; sw-precache - Sukka’s Blog\nGoogleChrome/workbox - GitHub\nThe Offline Cookbook - web.dev\n\n","categories":["技术向"],"tags":["Web","JavaScript","ServiceWorker"]},{"title":"关于","url":"//about/index.html","content":"关于博客\nEnglish version is on Medium: baoshuo.medium.com.\n图片\n图片托管于 SM.MS 图床 上，图片域名为 arina.loli.net 和 s1.baoshuo.ren ，如果您使用代理连接至国际互联网，请将这些域名添加至代理列表。国内图片 CDN 域名为 s1.u.sb 。感谢 Showfom 大佬赞助的 SM.MS 图床 VVIP 服务！\n评论\n评论默认使用 Disqus 评论系统，如果无法连接至 Disqus 则会使用 DisqusJS 渲染评论列表。如果您使用代理连接至国际互联网，请将 *.disqus.com disq.us *.disquscdn.com 加入代理列表。\n\n评论语法\nDisqus 评论支持使用部分 HTML 标签。\n注：下方的 &#123;&#123; text &#125;&#125; 表示显示文字，&#123;&#123; link &#125;&#125; 表示链接，&#123;&#123; code &#125;&#125; 表示代码，&#123;&#123; code_language &#125;&#125; 表示代码语言。\n下方列出了一些能使用的常用标签。为了方便查看，这些标签都是以单行形式呈现的。\n\n\n\n\n语法\n含义\n\n\n\n\n&lt;b&gt;&#123;&#123; text &#125;&#125;&lt;/b&gt;\n粗体文本\n\n\n&lt;blockquote&gt;&#123;&#123; text &#125;&#125;&lt;/blockquote&gt;\n引用文本\n\n\n&lt;i&gt;&#123;&#123; text &#125;&#125;&lt;/i&gt;\n斜体文本\n\n\n&lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/a&gt;\n超链接\n\n\n&lt;code&gt;&#123;&#123; code &#125;&#125;&lt;/code&gt;\n行内代码\n\n\n&lt;pre&gt;&lt;code class=&quot;&#123;&#123; code_language &#125;&#125;&quot;&gt;&#123;&#123; code &#125;&#125;&lt;/code&gt;&lt;/pre&gt;\n代码块\n\n\n\n详情请见：What HTML tags are allowed within comments? - Disqus Help\n\n\n评论设置\n强制使用 DisqusJS\n强制使用原版 Disqus\n\n\n\n评论检测\nDisqus: 尚未检测\nDisqus API (via api.baoshuo.ren): 尚未检测\nDisqus CDN: 尚未检测\n检测\n\nfunction checkDisqus() {\n    // document.getElementById('checkComment').style.display = 'none';\n    // Disqus\n    const disqusFavicon = new Image;\n    const disqusTimeout = setTimeout(function () {\n        disqusFavicon.onerror = disqusFavicon.onload = null;\n        document.getElementById('check-disqus').innerHTML = `失败`;\n    }, 3000);\n    disqusFavicon.onerror = function () {\n        clearTimeout(disqusTimeout);\n        document.getElementById('check-disqus').innerHTML = `失败`;\n    };\n    disqusFavicon.onload = function () {\n        clearTimeout(disqusTimeout);\n        document.getElementById('check-disqus').innerHTML = `成功`;\n    };\n    disqusFavicon.src = `https://disqus.com/favicon.ico?${+(new Date)}=${+(new Date)}`;\n\n    // Disqus API\n    // https://api.baoshuo.ren/check\n    fetch(`https://api.baoshuo.ren/check?${+(new Date)}=${+new Date()}`)\n        .then(data => document.getElementById('check-disqus-api').innerHTML = `成功`)\n        .catch(error => document.getElementById('check-disqus-api').innerHTML = `失败`);\n\n    // Disqus CDN\n    // https://c.disquscdn.com/next/embed/assets/img/disqus-social-icon-dark.a621bea3e02c9fa04fd3965a3d6f424d.svg\n    const disqusCDNLogo = new Image;\n    const disqusCDNLogoTimeout = setTimeout(function () {\n        disqusCDNLogo.onerror = disqusCDNLogo.onload = null;\n        document.getElementById('check-disqus-cdn').innerHTML = `失败`;\n    }, 3000);\n    disqusCDNLogo.onerror = function () {\n        clearTimeout(disqusCDNLogoTimeout);\n        document.getElementById('check-disqus-cdn').innerHTML = `失败`;\n    };\n    disqusCDNLogo.onload = function () {\n        clearTimeout(disqusCDNLogoTimeout);\n        document.getElementById('check-disqus-cdn').innerHTML = `成功`;\n    };\n    disqusCDNLogo.src = `https://c.disquscdn.com/next/embed/assets/img/disqus-social-icon-dark.a621bea3e02c9fa04fd3965a3d6f424d.svg?${+(new Date)}=${+(new Date)}`;\n};\n\n\nCDN\n部分静态资源使用 jsDelivr CDN 提供加速服务。\n博客历程\n\n2019/01/30 开通博客，托管于 洛谷博客 上。\n2019/08/20 注册 baoshuo.ren 域名。\n2020/01/27 切换到 Typecho 平台，使用 handsome 主题。\n2020/06/23 切换到 Gridea 平台，使用 Pure 主题。\n2020/07/22 更换到新域名 baoshuo.blog 。\n2020/11/25 将所有图片迁移到 SM.MS 图床上。\n2020/12/06 换回旧域名 blog.baoshuo.ren ，迁回到国内服务器。\n2021/02/01 切换到 Hexo 平台，使用 Pure 主题。\n2021/02/23 重构主题。\n2021/04/18 重构文章页面。\n2021/08/14 重构归档页面。\n2021/08/26 再次重构主题，修复了深色模式无法正常切换的问题。\n2021/09/22 将 OI 相关内容移至 oi.baoshuo.ren 。\n2021/10/06 使用 GitHub Actions 自动构建博客。\n2021/12/09 图片切换到 SM.MS 国内 CDN 上。\n\n关于我\n一个很正经的人。\n很惭愧，就做了一点微小的贡献。\n在上学。\n(function(){document.getElementById('baoshuo-age').innerHTML=`现在大约 ${Math.floor((+new Date() - 1149120000000) / 31536000000)} 岁，`;})();\n在干什么事情\n\n学习文化课。\n学习 信息学奥林匹克竞赛 相关知识。\n学习 计算机网络 相关知识。\n运营 AS141776 ，一个中立性的教育与科研网络。\n运营 AS4242420247 ，一个中立性的实验网络。\n代运营 AS142566 。\n\n说什么语言\n\n中文 (zh-CN) ★★★★★（母语）\n英文 (en-US) ★★★☆☆\n\n会什么东西\n\nC++ ★★★★☆\nHTML ★★★★☆ (HTML is a programming language!)\nC ★★★★☆\nJavaScript ★★★★☆\nCSS ★★★★☆\nPHP ★★★☆☆\nPython ★★★☆☆\nShellScript ★★★☆☆\n\n关于竞赛\n\n竞赛不是火，却能点亮一生。\n—— 石家庄二中实验学校 · 信息技术中心\n\n联系我\n\n主页： baoshuo.ren\n邮箱： i@baoshuo.ren\nTelegram：@baoshuo\nTwitter：@renbaoshuo\n\n鸣谢 &amp; 版权相关\n本博客使用 Hexo 构建，博客主题在设计过程中借鉴了 Pure 、 Fluid 等主题的设计风格，并参考了 Sukka’s Blog 等站点的功能设计，在此表示感谢。本主题不开源。\n博客上所有文章除特别声明外，均采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可。转载请在文中明显位置注明出处。\n"},{"title":"分类","url":"//categories/index.html","content":""},{"title":"友情链接","url":"//friends/index.html","content":"请前往 renbaoshuo/Friends 申请友情链接。\n"},{"title":"搜索","url":"//search/index.html","content":""},{"title":"标签","url":"//tags/index.html","content":""}]