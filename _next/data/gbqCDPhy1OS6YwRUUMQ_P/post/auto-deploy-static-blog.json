{"pageProps":{"title":"浅谈静态博客的自动部署方案 - 宝硕博客","post":{"title":"浅谈静态博客的自动部署方案","date":"2021-11-10T23:57:14.000Z","updated":"2021-11-10T23:57:14.000Z","type":"post","excerpt":"笔者最近阅读了 ChrAlpha 大佬的 初探无后端静态博客自动化部署方案 这篇博文，发现其中的一些内容已经过时，所以我决定写下这篇博文来简单说一说现在（2021 年）静态博客的自动部署方案。\n","thumb":"https://s1.baoshuo.ren/2021/10/31/uyZDJLU9NntF684.png","tags":["Hexo","自动化","GitHub Actions","Vercel","Netlify","Cloudflare"],"categories":["笔记本"],"content":"<p>笔者最近阅读了 ChrAlpha 大佬的 <a href=https://blog.ichr.me/post/automated-deployment-of-serverless-static-blog/ target=_blank>初探无后端静态博客自动化部署方案</a> 这篇博文，发现其中的一些内容已经过时，所以我决定写下这篇博文来简单说一说现在（2021 年）静态博客的自动部署方案。</p>\n\n<p>笔者 9 月中旬将自己的 OI 博客（<a href=https://oi.baoshuo.ren target=_blank>oi.baoshuo.ren</a>）迁到了 GitHub 上并使用 GitHub Actions 进行持续部署，在感觉良好以后又在 10 月初将自己的主博客（<a href=https://blog.baoshuo.ren>blog.baoshuo.ren</a>）也迁移到了上面，这期间我尝试了多家 CI/CD 服务，并总结了一些配置要领。</p>\n<p>本文中使用的 NodeJS 包管理器为 yarn 。</p>\n<h2 id=github-actions><a class=anchor href=#github-actions target=_blank></a>GitHub Actions</h2>\n<p>GitHub Actions 是笔者最常用的 CI/CD 服务，没有之一。关于 GitHub Actions 的介绍可以查看 <a href=https://docs.github.com/en/actions target=_blank>GitHub Actions 官网文档</a> 和阮老师的 <a href=https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html target=_blank>GitHub Actions 入门教程</a> 。</p>\n<p>配置 GitHub Actions 是非常方便的，无需绑定任何第三方平台，仅需在仓库中新建一个 <code>.github/workflows/*.yml</code> 即可。</p>\n<blockquote>\n<p>Hexo 核心团队成员之一 <a href=https://skk.moe target=_blank>Sukka</a> 大佬在他的 <a href=https://blog.skk.moe/post/deploy-blog-to-cf-workers-site/ target=_blank>将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录</a> 一文中强烈建议不要使用任何 Hexo 的 GitHub Action ，把 Hexo 当成一个普通的依赖 NodeJS 的构建程序，遵照这个思路编写配置文件即可。</p>\n</blockquote>\n<pre><code class=\"hljs language-yaml\"><span class=hljs-attr>name:</span> <span class=hljs-string>Build</span>\n\n<span class=hljs-attr>on:</span>\n  <span class=hljs-attr>push:</span>\n    <span class=hljs-attr>branches:</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>master</span>\n  <span class=hljs-attr>workflow_dispatch:</span>\n\n<span class=hljs-attr>jobs:</span>\n  <span class=hljs-attr>build:</span>\n    <span class=hljs-attr>runs-on:</span> <span class=hljs-string>ubuntu-latest</span>\n    <span class=hljs-attr>steps:</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-attr>uses:</span> <span class=hljs-string>actions/checkout@v2</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-attr>name:</span> <span class=hljs-string>Use</span> <span class=hljs-string>Node.js</span> <span class=hljs-number>14</span>\n        <span class=hljs-attr>uses:</span> <span class=hljs-string>actions/setup-node@v2</span>\n        <span class=hljs-attr>with:</span>\n          <span class=hljs-attr>node-version:</span> <span class=hljs-number>14</span>\n          <span class=hljs-attr>cache:</span> <span class=hljs-string>yarn</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-attr>name:</span> <span class=hljs-string>Install</span> <span class=hljs-string>Dependencies</span>\n        <span class=hljs-attr>run:</span> <span class=hljs-string>yarn</span> <span class=hljs-string>install</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-attr>name:</span> <span class=hljs-string>Build</span> <span class=hljs-string>Site</span>\n        <span class=hljs-attr>run:</span> <span class=hljs-string>yarn</span> <span class=hljs-string>build</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-attr>name:</span> <span class=hljs-string>Deploy</span> <span class=hljs-string>to</span> <span class=hljs-string>GitHub</span> <span class=hljs-string>Pages</span>\n        <span class=hljs-attr>uses:</span> <span class=hljs-string>peaceiris/actions-gh-pages@v3</span>\n        <span class=hljs-attr>with:</span>\n          <span class=hljs-attr>github_token:</span> <span class=hljs-string>${{</span> <span class=hljs-string>secrets.GITHUB_TOKEN</span> <span class=hljs-string>}}</span>\n          <span class=hljs-attr>publish_dir:</span> <span class=hljs-string>public</span>\n          <span class=hljs-attr>cname:</span> <span class=hljs-string>blog.baoshuo.ren</span>\n</code></pre>\n<p>该工作流的大体步骤如下：</p>\n<ol>\n<li>检出仓库中的源文件到工作目录</li>\n<li>安装 NodeJS 和 yarn 包管理器，如果使用的是 npm 包管理器请自行修改。</li>\n<li>安装依赖。</li>\n<li>构建站点。</li>\n<li>部署到 GitHub Pages 。</li>\n</ol>\n<p>在构建完成后会发现文章的更新时间出现了错误，可以在生成前添加下面这步来将文件的修改日期更正为该文件最后一次 commit 时的时间。</p>\n<pre><code class=\"hljs language-yml\"><span class=hljs-bullet>-</span> <span class=hljs-attr>name:</span> <span class=hljs-string>Fix</span> <span class=hljs-string>File</span> <span class=hljs-string>Modify</span> <span class=hljs-string>Date</span>\n  <span class=hljs-attr>run:</span> <span class=hljs-string>|\n    git ls-files | while read filepath; do touch -d &quot;$(git log -1 --format=&#x27;@%ct&#x27; $filepath)&quot; &quot;$filepath&quot; &amp;&amp; echo &quot;Fixed: $filepath&quot;; done\n</span></code></pre>\n<p>当然，为了让 git 有日志可寻，还得在检出的时候顺带把所有提交历史一并拉下来，指定 <code>fetch-depth</code> 就能做到：</p>\n<pre><code class=\"hljs language-yaml\"><span class=hljs-bullet>-</span> <span class=hljs-attr>uses:</span> <span class=hljs-string>actions/checkout@v2</span>\n  <span class=hljs-attr>with:</span>\n    <span class=hljs-attr>fetch-depth:</span> <span class=hljs-number>0</span>\n</code></pre>\n<p>然后开启 GitHub Pages 功能即可访问到构建好的站点了。</p>\n<h2 id=cloudflare-pages><a class=anchor href=#cloudflare-pages target=_blank></a>Cloudflare Pages</h2>\n<p>如果觉得 GitHub Actions + GitHub Pages 比较麻烦的话，才推出不久的 Cloudflare Pages 或许是一个不错的选择。</p>\n<p>前往 <a href=https://dash.cloudflare.com target=_blank>CloudFlare 管理面板</a> 登录账号后即可在右侧找到「网页」或者「Pages」功能的入口。</p>\n<p>点击新建按钮，选择要使用的仓库，点击下一步。</p>\n<p><img src=https://s1.baoshuo.ren/2021/10/31/9HpOja1N6JIK4DP.png alt=\"\"></p>\n<p>Cloudflare Pages 的构建配置模板中并没有给出 Hexo 的模板，所以需要自己填写：</p>\n<p><img src=https://s1.baoshuo.ren/2021/10/31/zc7GdhKqCSfliQ1.png alt=\"\"></p>\n<p>完成之后点击确定就可以开始构建站点了。</p>\n<p><img src=https://s1.baoshuo.ren/2021/10/31/Z9YrJGNByXhKbkl.png alt=\"\"></p>\n<p>构建完成后，访问分配的 <code>pages.dev</code> 子域名即可查看构建好的站点。</p>\n<p>可以在「自定义域」选项卡中添加自定义域名。</p>\n<h2 id=netlify><a class=anchor href=#netlify target=_blank></a>Netlify</h2>\n<p>Netlify 是一家为静态网站提供托管服务的平台，有一定的免费额度，对于小型站点来说使用免费套餐就足够了。</p>\n<p>首先登陆账号，点击「New site from Git」按钮新建一个站点。</p>\n<p><img src=https://s1.baoshuo.ren/2021/10/31/sULdZkfIgOBhzJP.png alt=\"\"></p>\n<p>可以看到 Netlify 自动识别出了博客使用的框架并且填充好了构建命令，接下来只需要点击下一步即可。</p>\n<p><img src=https://s1.baoshuo.ren/2021/10/31/yVlnMEJgeLSzwFD.png alt=\"\"></p>\n<p>新建站点完成以后可以在「Domain Settings」页面中修改默认分配的 <code>netlify.app</code> 子域名，并添加自定义域名。</p>\n<h2 id=vercel><a class=anchor href=#vercel target=_blank></a>Vercel</h2>\n<p>Vercel 是一个类似于 Netlify 的静态网站托管平台（Vercel 也支持托管 Serverless 函数，不过不在本文的讨论范围内）。</p>\n<p><img src=https://s1.baoshuo.ren/2021/10/22/1oLr8fiODTNXSRP.png alt=\"\"></p>\n<p>绑定好 GitHub 账号后导入一个新的项目即可。</p>\n<p><img src=https://s1.baoshuo.ren/2021/10/31/EAsH2CWLUTZFeXu.png alt=\"\"></p>\n<p>Vercel 也和 Netlify 自动填充好了构建命令，如果没有特殊需求可以直接点击下一步。</p>\n<p>可以在项目的域名设置中绑定自定义域名。</p>\n<h2 id=参考资料><a class=anchor href=#参考资料 target=_blank></a>参考资料</h2>\n<ol>\n<li><a href=https://blog.ichr.me/post/automated-deployment-of-serverless-static-blog/ target=_blank>初探无后端静态博客自动化部署方案</a>，ChrAlpha，2020 年 2 月 14 日。</li>\n<li><a href=https://stackoverflow.com/questions/42032035/finding-files-older-than-certain-dates-in-git-repository target=_blank>Finding files older than certain dates in Git repository</a>，Scott Weldon (on Stack Overflow)，2017 年 2 月 7 日。</li>\n<li><a href=https://blog.skk.moe/post/deploy-blog-to-cf-workers-site/ target=_blank>将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录</a>，Sukka，2020 年 6 月 7 日。</li>\n</ol>\n","katex":false,"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#github-actions\"><span class=\"toc-text\">GitHub Actions</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cloudflare-pages\"><span class=\"toc-text\">Cloudflare Pages</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#netlify\"><span class=\"toc-text\">Netlify</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vercel\"><span class=\"toc-text\">Vercel</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","comment":true,"path":"/post/auto-deploy-static-blog/","url":"https://blog.baoshuo.ren/post/auto-deploy-static-blog/"},"__post":true},"__N_SSG":true}