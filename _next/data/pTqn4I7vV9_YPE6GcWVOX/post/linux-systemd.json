{"pageProps":{"title":"Linux Systemd 入门 - 宝硕博客","post":{"title":"Linux Systemd 入门","excerpt":"Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。","content":[["$","p",{},["Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。"]],["$","span",{"id":"more"},[]],["$","p",{},["目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。"]],["$","h2",{"id":"常用命令列表"},["常用命令列表"]],["$","ul",{},[["$","li",{},["列出所有已加载的单元：",["$","code",{},["systemctl list-units"]]]],["$","li",{},["查看指定的单元的配置：",["$","code",{},["systemctl cat [serviceName]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl cat sshd.service"]],")"]]]],["$","li",{},["修改指定单元的配置：",["$","code",{},["systemctl edit [serviceName]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl edit sshd.service"]],")"]]]],["$","li",{},["查看指定的单元的运行状态： ",["$","code",{},["systemctl status [serviceName|pid]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl status sshd.service"]],")"]],["$","ul",{},[["$","li",{},["如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。"]],["$","li",{},["如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。"]],["$","li",{},["如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 ",["$","code",{},["--all"]]," 连用，则同时显示所有已加载的单元（可以用 ",["$","code",{},["-t"]]," 限定单元类型）的状态信息。"]]]]]],["$","li",{},["启动指定的单元：",["$","code",{},["systemctl start [serviceName]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl start sshd.service"]],")"]],["$","ul",{},[["$","li",{},["被指定的单元必须是已经被加载的。"]]]]]],["$","li",{},["重新启动指定的单元：",["$","code",{},["systemctl restart [serviceName]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl restart sshd.service"]],")"]],["$","ul",{},[["$","li",{},["如果指定的单元没有启动，则直接启动它们。"]]]]]],["$","li",{},["停止指定的单元：",["$","code",{},["systemctl stop [serviceName]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl stop sshd.service"]],")"]]]],["$","li",{},["启用指定的单元：",["$","code",{},["systemctl enable [serviceName]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl enable sshd.service"]],")"]]]],["$","li",{},["停用指定的单元：",["$","code",{},["systemctl disable [serviceName]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl disable sshd.service"]],")"]]]],["$","li",{},["重新加载指定的单元的配置：",["$","code",{},["systemctl reload [serviceName]"]]," ",["$","em",{},["(e.g. ",["$","code",{},["systemctl reload sshd.service"]],")"]]]],["$","li",{},["重新加载所有已修改过的配置文件：",["$","code",{},["systemctl daemon-reload"]]]]]],["$","h2",{"id":"开机启动"},["开机启动"]],["$","p",{},["对于那些支持 Systemd 的软件，安装的时候，会自动在 ",["$","code",{},["/usr/lib/systemd/system"]]," 目录添加一个配置文件。"]],["$","p",{},["如果你想让该软件开机启动，就执行下面的命令（以 ",["$","code",{},["sshd.service"]]," 为例）。"]],["$","pre",{},[["$","code",{"class":"hljs bash"},["sudo systemctl ",["$","span",{"class":"hljs-built_in"},["enable"]]," sshd.service"]]]],["$","p",{},["上面的命令相当于在 ",["$","code",{},["/etc/systemd/system"]]," 目录添加一个符号链接，指向 ",["$","code",{},["/usr/lib/systemd/system"]]," 里面的 ",["$","code",{},["sshd.service"]]," 文件。"]],["$","p",{},["这是因为开机时，Systemd 只执行 ",["$","code",{},["/etc/systemd/system"]]," 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。"]],["$","h2",{"id":"unit"},["Unit"]],["$","h3",{"id":"配置文件"},["配置文件"]],["$","p",{},["对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。"]],["$","blockquote",{},[["$","p",{},["我曾经为 Sakura Frp 编写过一个脚本：",["$","a",{"href":"https://getfrp.sh","rel":"external nofollow noreferrer"},["getfrp.sh"]]," ",["$","sup",{},["（",["$","a",{"href":"https://gist.github.com/renbaoshuo/9c351b3e5750a2f6d453d035e0fd071a#file-getfrp-sh-L200-L213","rel":"external nofollow noreferrer"},["存档"]]," 于 GitHub Gist）"]]," ，里面便是使用了自行编写配置文件的方法。"]]]],["$","p",{},["以 ",["$","code",{},["sshd.service"]]," 这个配置文件为例子，来分析一下 Systemd 的配置文件："]],["$","pre",{},[["$","code",{"class":"hljs ini"},[["$","span",{"class":"hljs-comment"},["# /lib/systemd/system/ssh.service"]],"\n\n",["$","span",{"class":"hljs-section"},["[Unit]"]],"\n",["$","span",{"class":"hljs-attr"},["Description"]],"=OpenBSD Secure Shell server\n",["$","span",{"class":"hljs-attr"},["Documentation"]],"=man:sshd(",["$","span",{"class":"hljs-number"},["8"]],") man:sshd_config(",["$","span",{"class":"hljs-number"},["5"]],")\n",["$","span",{"class":"hljs-attr"},["After"]],"=network.target auditd.service\n",["$","span",{"class":"hljs-attr"},["ConditionPathExists"]],"=!/etc/ssh/sshd_not_to_be_run\n\n",["$","span",{"class":"hljs-section"},["[Service]"]],"\n",["$","span",{"class":"hljs-attr"},["EnvironmentFile"]],"=-/etc/default/ssh\n",["$","span",{"class":"hljs-attr"},["ExecStartPre"]],"=/usr/sbin/sshd -t\n",["$","span",{"class":"hljs-attr"},["ExecStart"]],"=/usr/sbin/sshd -D ",["$","span",{"class":"hljs-variable"},["$SSHD_OPTS"]],"\n",["$","span",{"class":"hljs-attr"},["ExecReload"]],"=/usr/sbin/sshd -t\n",["$","span",{"class":"hljs-attr"},["ExecReload"]],"=/bin/kill -HUP ",["$","span",{"class":"hljs-variable"},["$MAINPID"]],"\n",["$","span",{"class":"hljs-attr"},["KillMode"]],"=process\n",["$","span",{"class":"hljs-attr"},["Restart"]],"=",["$","span",{"class":"hljs-literal"},["on"]],"-failure\n",["$","span",{"class":"hljs-attr"},["RestartPreventExitStatus"]],"=",["$","span",{"class":"hljs-number"},["255"]],"\n",["$","span",{"class":"hljs-attr"},["Type"]],"=notify\n",["$","span",{"class":"hljs-attr"},["RuntimeDirectory"]],"=sshd\n",["$","span",{"class":"hljs-attr"},["RuntimeDirectoryMode"]],"=",["$","span",{"class":"hljs-number"},["0755"]],"\n\n",["$","span",{"class":"hljs-section"},["[Install]"]],"\n",["$","span",{"class":"hljs-attr"},["WantedBy"]],"=multi-user.target\n",["$","span",{"class":"hljs-attr"},["Alias"]],"=sshd.service"]]]],["$","p",{},["可以看出这个文件一共有三个部分：",["$","code",{},["[Unit]"]],", ",["$","code",{},["[Service]"]]," 和 ",["$","code",{},["[Install]"]]," 。"]],["$","p",{},["配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。",["$","br",{},[]],"因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 ",["$","code",{},["After="]],"），就将该设定归零了。"]],["$","h4",{"id":"unit-启动顺序与依赖关系"},["[Unit]: 启动顺序与依赖关系"]],["$","p",{},["这个部分主要有以下几个配置项："]],["$","ul",{},[["$","li",{},[["$","code",{},["Description"]],": 当前服务的简易说明"]],["$","li",{},[["$","code",{},["Documentation"]],": 文档位置（以空格分隔）",["$","ul",{},[["$","li",{},["该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。"]]]]]],["$","li",{},[["$","code",{},["Before"]],": 在哪些服务之前启动",["$","ul",{},[["$","li",{},["本字段不涉及依赖关系，只是说明了启动顺序"]]]]]],["$","li",{},[["$","code",{},["After"]],": 在哪些服务之后启动",["$","ul",{},[["$","li",{},["本字段不涉及依赖关系，只是说明了启动顺序"]],["$","li",{},["以 ",["$","code",{},["sshd.service"]]," 中的配置为例，该服务需要在 ",["$","code",{},["network.target"]]," 和 ",["$","code",{},["auditd.service"]]," 之后启动"]]]]]],["$","li",{},[["$","code",{},["Wants"]],": 弱依赖的服务",["$","ul",{},[["$","li",{},["若被依赖的服务被停止，这个服务不需要停止"]]]]]],["$","li",{},[["$","code",{},["Requires"]],": 强依赖的服务",["$","ul",{},[["$","li",{},["若被依赖的服务没有启动，则不能启动这个服务"]],["$","li",{},["若被依赖的服务被停止，则这个服务也必须停止"]]]]]],["$","li",{},[["$","code",{},["Conflicts"]],": 冲突的服务",["$","ul",{},[["$","li",{},["如果列出的服务中有一个已经运行，那么就不能启动这个服务"]]]]]]]],["$","h4",{"id":"service-启动行为"},["[Service]: 启动行为"]],["$","p",{},["这个部分主要有以下几个配置项："]],["$","ul",{},[["$","li",{},[["$","code",{},["Type"]],": 启动类型。默认值为 ",["$","code",{},["simple"]]," ，可选值如下：",["$","ul",{},[["$","li",{},[["$","code",{},["simple"]],": 使 ",["$","code",{},["ExecStart"]]," 项启动的项成为主进程"]],["$","li",{},[["$","code",{},["forking"]],": ",["$","code",{},["ExecStart"]]," 项将会以 ",["$","code",{},["fork()"]]," 的形式启动，此时父进程将会退出，子进程将成为主进程"]],["$","li",{},[["$","code",{},["oneshot"]],": 类似于 ",["$","code",{},["simple"]]," ，但只执行一次，Systemd 会等它执行完，才启动其他服务"]],["$","li",{},[["$","code",{},["dbus"]],": 类似于 ",["$","code",{},["simple"]]," ，但会等待 ",["$","code",{},["D-Bus"]]," 信号后启动"]],["$","li",{},[["$","code",{},["notify"]],": 类似于 ",["$","code",{},["simple"]]," ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务"]],["$","li",{},[["$","code",{},["idle"]],": 类似于 ",["$","code",{},["simple"]]," ，但是要等到其他任务都执行完，才会启动该服务。",["$","ul",{},[["$","li",{},["这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合"]],["$","li",{},["这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序"]]]]]]]]]],["$","li",{},[["$","code",{},["Environment"]],": 指定环境变量"]],["$","li",{},[["$","code",{},["EnvironmentFile"]],": 环境变量配置文件，该文件内部的 ",["$","code",{},["key=value"]]," 形式的配置可以在当前文件中以 ",["$","code",{},["$key"]]," 获取"]],["$","li",{},[["$","code",{},["ExecStart"]],": 服务启动时执行的命令"]],["$","li",{},[["$","code",{},["ExecReload"]],": 服务重启时执行的命令"]],["$","li",{},[["$","code",{},["ExecStop"]],": 服务停止时执行的命令"]],["$","li",{},[["$","code",{},["ExecStartPre"]],": 服务启动之前执行的命令"]],["$","li",{},[["$","code",{},["ExecStartPost"]],": 服务启动之后执行的命令"]],["$","li",{},[["$","code",{},["ExecStopPost"]],": 服务停止之后执行的命令"]],["$","li",{},[["$","code",{},["Restart"]],": 服务退出后的重启方式，默认值为 ",["$","code",{},["no"]],["$","ul",{},[["$","li",{},[["$","code",{},["no"]],": 进程退出后不会重启"]],["$","li",{},[["$","code",{},["on-success"]],": 当进程正常退出时（退出状态码为 0）重启"]],["$","li",{},[["$","code",{},["on-failure"]],": 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启"]],["$","li",{},[["$","code",{},["on-abnormal"]],": 当进程被信号终止或程序超时时重启"]],["$","li",{},[["$","code",{},["on-abort"]],": 当收到没有捕捉到的信号终止时重启"]],["$","li",{},[["$","code",{},["on-watchdog"]],": 当进程超时退出时重启"]],["$","li",{},[["$","code",{},["always"]],": 总是重启（不论原因）"]],["$","li",{},["对于守护进程，推荐设为 ",["$","code",{},["on-failure"]],"。对于那些允许发生错误退出的服务，可以设为 ",["$","code",{},["on-abnormal"]],"。"]]]]]],["$","li",{},[["$","code",{},["RemainAfterExit"]],": 退出后是否重新启动",["$","ul",{},[["$","li",{},["当设定为 ",["$","code",{},["RemainAfterExit=1"]]," 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 ",["$","code",{},["Type=oneshot"]]," 的服务很有帮助"]]]]]],["$","li",{},[["$","code",{},["TimeoutSec"]],": 当这个服务在启动或停止时失败进入\"强制结束\"状态的等待秒数。"]],["$","li",{},[["$","code",{},["KillMode"]],": 定义 Systemd 如何停止这个服务，默认值为 ",["$","code",{},["control-group"]],["$","ul",{},[["$","li",{},[["$","code",{},["control-group"]],": 服务停止时关闭此控制组中所有的进程"]],["$","li",{},[["$","code",{},["process"]],": 服务停止时只终止主进程（ExecStart 接的后面那串指令）"]],["$","li",{},[["$","code",{},["mixed"]],": 主进程将收到 ",["$","strong",{},["SIGTERM"]]," 信号，子进程收到 ",["$","strong",{},["SIGKILL"]]," 信号"]],["$","li",{},[["$","code",{},["none"]],": 没有进程会被杀掉，只是执行服务的 stop 命令"]]]]]],["$","li",{},[["$","code",{},["RestartSec"]],": 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）"]]]],["$","p",{},["所有的启动设置之前，都可以加上一个连词号 (",["$","code",{},["-"]],") ，表示 「抑制错误」 ，即发生错误的时候，不影响其他命令的执行。以 ",["$","code",{},["sshd.service"]]," 为例，文件中的 ",["$","code",{},["EnvironmentFile=-/etc/sysconfig/sshd"]],"（注意等号后面的那个连词号），表示 ",["$","code",{},["/etc/sysconfig/sshd"]]," 文件不存在，也不会抛出错误。"]],["$","h4",{"id":"install-安装行为"},["[Install]: 安装行为"]],["$","p",{},["这个部分主要有以下几个配置项："]],["$","ul",{},[["$","li",{},[["$","code",{},["WantedBy"]],": 表示该服务所在的 Target",["$","ul",{},[["$","li",{},["一般来说，服务性质的单元都是挂在 ",["$","code",{},["multi-user.target"]]," 下的"]]]]]],["$","li",{},[["$","code",{},["Also"]],": 当该服务被启用时需要同时启用的单元"]],["$","li",{},[["$","code",{},["Alias"]],": 指定创建软链接时链接至本单元配置文件的别名文件"]]]],["$","h3",{"id":"模板实例"},["模板实例"]],["$","p",{},["此处以 ",["$","code",{},["getty@.service"]]," 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的："]],["$","pre",{},[["$","code",{"class":"hljs ini"},[["$","span",{"class":"hljs-comment"},["# /lib/systemd/system/getty@.service"]],"\n",["$","span",{"class":"hljs-comment"},["#"]],"\n",["$","span",{"class":"hljs-comment"},["#  SPDX-License-Identifier: LGPL-2.1+"]],"\n",["$","span",{"class":"hljs-comment"},["#"]],"\n",["$","span",{"class":"hljs-comment"},["#  This file is part of systemd."]],"\n",["$","span",{"class":"hljs-comment"},["#"]],"\n",["$","span",{"class":"hljs-comment"},["#  systemd is free software; you can redistribute it and/or modify it"]],"\n",["$","span",{"class":"hljs-comment"},["#  under the terms of the GNU Lesser General Public License as published by"]],"\n",["$","span",{"class":"hljs-comment"},["#  the Free Software Foundation; either version 2.1 of the License, or"]],"\n",["$","span",{"class":"hljs-comment"},["#  (at your option) any later version."]],"\n\n",["$","span",{"class":"hljs-section"},["[Unit]"]],"\n",["$","span",{"class":"hljs-attr"},["Description"]],"=Getty ",["$","span",{"class":"hljs-literal"},["on"]]," %I\n",["$","span",{"class":"hljs-attr"},["Documentation"]],"=man:agetty(",["$","span",{"class":"hljs-number"},["8"]],") man:systemd-getty-generator(",["$","span",{"class":"hljs-number"},["8"]],")\n",["$","span",{"class":"hljs-attr"},["Documentation"]],"=http://",["$","span",{"class":"hljs-number"},["0"]],"pointer.de/blog/projects/serial-console.html\n",["$","span",{"class":"hljs-attr"},["After"]],"=systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target\n",["$","span",{"class":"hljs-attr"},["After"]],"=rc-local.service\n\n",["$","span",{"class":"hljs-comment"},["# If additional gettys are spawned during boot then we should make"]],"\n",["$","span",{"class":"hljs-comment"},["# sure that this is synchronized before getty.target, even though"]],"\n",["$","span",{"class":"hljs-comment"},["# getty.target didn't actually pull it in."]],"\n",["$","span",{"class":"hljs-attr"},["Before"]],"=getty.target\n",["$","span",{"class":"hljs-attr"},["IgnoreOnIsolate"]],"=",["$","span",{"class":"hljs-literal"},["yes"]],"\n\n",["$","span",{"class":"hljs-comment"},["# IgnoreOnIsolate causes issues with sulogin, if someone isolates"]],"\n",["$","span",{"class":"hljs-comment"},["# rescue.target or starts rescue.service from multi-user.target or"]],"\n",["$","span",{"class":"hljs-comment"},["# graphical.target."]],"\n",["$","span",{"class":"hljs-attr"},["Conflicts"]],"=rescue.service\n",["$","span",{"class":"hljs-attr"},["Before"]],"=rescue.service\n\n",["$","span",{"class":"hljs-comment"},["# On systems without virtual consoles, don't start any getty. Note"]],"\n",["$","span",{"class":"hljs-comment"},["# that serial gettys are covered by serial-getty@.service, not this"]],"\n",["$","span",{"class":"hljs-comment"},["# unit."]],"\n",["$","span",{"class":"hljs-attr"},["ConditionPathExists"]],"=/dev/tty0\n\n",["$","span",{"class":"hljs-section"},["[Service]"]],"\n",["$","span",{"class":"hljs-comment"},["# the VT is cleared by TTYVTDisallocate"]],"\n",["$","span",{"class":"hljs-comment"},["# The '-o' option value tells agetty to replace 'login' arguments with an"]],"\n",["$","span",{"class":"hljs-comment"},["# option to preserve environment (-p), followed by '--' for safety, and then"]],"\n",["$","span",{"class":"hljs-comment"},["# the entered username."]],"\n",["$","span",{"class":"hljs-attr"},["ExecStart"]],"=-/sbin/agetty -o ",["$","span",{"class":"hljs-string"},["'-p -- \\\\u'"]]," --noclear %I ",["$","span",{"class":"hljs-variable"},["$TERM"]],"\n",["$","span",{"class":"hljs-attr"},["Type"]],"=idle\n",["$","span",{"class":"hljs-attr"},["Restart"]],"=always\n",["$","span",{"class":"hljs-attr"},["RestartSec"]],"=",["$","span",{"class":"hljs-number"},["0"]],"\n",["$","span",{"class":"hljs-attr"},["UtmpIdentifier"]],"=%I\n",["$","span",{"class":"hljs-attr"},["TTYPath"]],"=/dev/%I\n",["$","span",{"class":"hljs-attr"},["TTYReset"]],"=",["$","span",{"class":"hljs-literal"},["yes"]],"\n",["$","span",{"class":"hljs-attr"},["TTYVHangup"]],"=",["$","span",{"class":"hljs-literal"},["yes"]],"\n",["$","span",{"class":"hljs-attr"},["TTYVTDisallocate"]],"=",["$","span",{"class":"hljs-literal"},["yes"]],"\n",["$","span",{"class":"hljs-attr"},["KillMode"]],"=process\n",["$","span",{"class":"hljs-attr"},["IgnoreSIGPIPE"]],"=",["$","span",{"class":"hljs-literal"},["no"]],"\n",["$","span",{"class":"hljs-attr"},["SendSIGHUP"]],"=",["$","span",{"class":"hljs-literal"},["yes"]],"\n\n",["$","span",{"class":"hljs-comment"},["# Unset locale for the console getty since the console has problems"]],"\n",["$","span",{"class":"hljs-comment"},["# displaying some internationalized messages."]],"\n",["$","span",{"class":"hljs-attr"},["UnsetEnvironment"]],"=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION\n\n",["$","span",{"class":"hljs-section"},["[Install]"]],"\n",["$","span",{"class":"hljs-attr"},["WantedBy"]],"=getty.target\n",["$","span",{"class":"hljs-attr"},["DefaultInstance"]],"=tty1"]]]],["$","p",{},["运行 ",["$","code",{},["systemctl status getty@tty1.service"]]," 命令，可以看到如下图所示的输出："]],["$","p",{},[["$","img",{"src":"https://s1.baoshuo.ren/2021/02/11/lhw1BzOUb7TRDrq.png","alt":"","loading":"lazy"},[]]]],["$","p",{},["不难发现图中标橙色的字符与上方配置文件中的 ",["$","code",{},["%I"]]," 相对应，并且配置文件的名称也不是 ",["$","code",{},["getty@tty1.service"]]," ，而是 ",["$","code",{},["getty@.service"]]," ，这种配置文件叫做 「模板实例」 。"]],["$","p",{},["启动时只需要在 ",["$","code",{},["@"]]," 后面添加需要填入 ",["$","code",{},["%I"]]," 位置的参数即可，如 ",["$","code",{},["getty@tty9.service"]]," 。"]],["$","h2",{"id":"target"},["Target"]],["$","p",{},["一般来说，常用的 Target 有两个：一个是 ",["$","code",{},["multi-user.target"]]," ，表示多用户命令行状态；另一个是 ",["$","code",{},["graphical.target"]]," ，表示图形用户状态（它依赖于 ",["$","code",{},["multi-user.target"]],"），这一点和 SysVinit 的运行级别很是相似。"]],["$","p",{},["官方提供了一张非常清晰的 Target 依赖关系图："]],["$","p",{},[["$","img",{"src":"https://s1.baoshuo.ren/2021/02/11/ubmqlLdiGeCtUg7.png","alt":"","loading":"lazy"},[]]]],["$","p",{},["图源：",["$","a",{"href":"https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup","rel":"external nofollow noreferrer"},["https://www.freedesktop.org/software/systemd/man/bootup.html#System Manager Bootup"]]]],["$","h3",{"id":"配置文件-2"},["配置文件"]],["$","p",{},["以 ",["$","code",{},["multi-user.target"]]," 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目："]],["$","pre",{},[["$","code",{"class":"hljs ini"},[["$","span",{"class":"hljs-comment"},["# /lib/systemd/system/multi-user.target"]],"\n",["$","span",{"class":"hljs-comment"},["#"]],"\n",["$","span",{"class":"hljs-comment"},["#  SPDX-License-Identifier: LGPL-2.1+"]],"\n",["$","span",{"class":"hljs-comment"},["#"]],"\n",["$","span",{"class":"hljs-comment"},["#  This file is part of systemd."]],"\n",["$","span",{"class":"hljs-comment"},["#"]],"\n",["$","span",{"class":"hljs-comment"},["#  systemd is free software; you can redistribute it and/or modify it"]],"\n",["$","span",{"class":"hljs-comment"},["#  under the terms of the GNU Lesser General Public License as published by"]],"\n",["$","span",{"class":"hljs-comment"},["#  the Free Software Foundation; either version 2.1 of the License, or"]],"\n",["$","span",{"class":"hljs-comment"},["#  (at your option) any later version."]],"\n\n",["$","span",{"class":"hljs-section"},["[Unit]"]],"\n",["$","span",{"class":"hljs-attr"},["Description"]],"=Multi-User System\n",["$","span",{"class":"hljs-attr"},["Documentation"]],"=man:systemd.special(",["$","span",{"class":"hljs-number"},["7"]],")\n",["$","span",{"class":"hljs-attr"},["Requires"]],"=basic.target\n",["$","span",{"class":"hljs-attr"},["Conflicts"]],"=rescue.service rescue.target\n",["$","span",{"class":"hljs-attr"},["After"]],"=basic.target rescue.service rescue.target\n",["$","span",{"class":"hljs-attr"},["AllowIsolate"]],"=",["$","span",{"class":"hljs-literal"},["yes"]]]]]],["$","ul",{},[["$","li",{},[["$","code",{},["Requires"]],": 要求于某个 Target 一起运行"]],["$","li",{},[["$","code",{},["Conflicts"]],": 冲突的 Target"]],["$","li",{},[["$","code",{},["After"]],": 在哪些 Target 之后启动"]],["$","li",{},[["$","code",{},["AllowIsolate"]],": 是否允许使用 ",["$","code",{},["systemctl isolate"]]," 命令切换到这个 Target"]]]],["$","h2",{"id":"参考资料-7"},["参考资料"]],["$","ol",{},[["$","li",{},[["$","a",{"href":"https://en.wikipedia.org/wiki/Systemd","rel":"external nofollow noreferrer"},["Systemd - Wikipedia"]]," ",["$","sup",{},["（",["$","a",{"href":"https://web.archive.org/web/20210210150200/https://en.wikipedia.org/wiki/Systemd","rel":"external nofollow noreferrer"},["存档"]]," 于 ",["$","a",{"href":"https://archive.org","rel":"external nofollow noreferrer"},["互联网档案馆"]],"）"]]]],["$","li",{},[["$","a",{"href":"https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html","rel":"external nofollow noreferrer"},["Systemd - Ubuntu Manpages"]]," ",["$","sup",{},["（",["$","a",{"href":"https://web.archive.org/web/20210210150518/https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html","rel":"external nofollow noreferrer"},["存档"]]," 于 ",["$","a",{"href":"https://archive.org","rel":"external nofollow noreferrer"},["互联网档案馆"]],"）"]]]],["$","li",{},[["$","a",{"href":"http://linux.vbird.org/linux_basic/0560daemons.php","rel":"external nofollow noreferrer"},["第十七章 认识系统服务(daemons) - 鸟哥的 Linux 私房菜"]]," ",["$","sup",{},["（",["$","a",{"href":"https://web.archive.org/web/20200810204650/http://linux.vbird.org/linux_basic/0560daemons.php","rel":"external nofollow noreferrer"},["存档"]]," 于 ",["$","a",{"href":"https://archive.org","rel":"external nofollow noreferrer"},["互联网档案馆"]],"）"]]]]]]],"thumb":"https://s1.baoshuo.ren/2021/08/17/bnP7pH3XR6IAx1U.png","date":"2021-02-11","updated":"2021-02-11","isoDate":"2021-02-11T16:06:31.000Z","isoUpdate":"2021-02-11T16:06:31.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"Linux","url":"/tags/Linux/"}],"license":null,"permalink":"https://blog.baoshuo.ren/post/linux-systemd/","url":"/post/linux-systemd/","prev":{"title":"浅谈网页「深色模式」的实现","url":"/post/darkmode/"},"next":{"title":"你好，2021 —— 博客迁移记录","url":"/post/hello-2021/"},"toc":{"0":{"text":"常用命令列表","id":"常用命令列表"},"1":{"text":"开机启动","id":"开机启动"},"2":{"0":{"0":{"text":"[Unit]: 启动顺序与依赖关系","id":"unit-启动顺序与依赖关系"},"1":{"text":"[Service]: 启动行为","id":"service-启动行为"},"2":{"text":"[Install]: 安装行为","id":"install-安装行为"},"text":"配置文件","id":"配置文件"},"1":{"text":"模板实例","id":"模板实例"},"text":"Unit","id":"unit"},"3":{"0":{"text":"配置文件","id":"配置文件-2"},"text":"Target","id":"target"},"4":{"text":"参考资料","id":"参考资料-7"}},"hasToc":true,"comments":true,"wordCount":"约 2.8 千字"}},"__N_SSG":true}