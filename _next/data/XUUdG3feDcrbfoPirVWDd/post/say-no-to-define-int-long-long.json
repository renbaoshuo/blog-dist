{"pageProps":{"title":"向 #Define Int Long Long 说不 - 宝硕博客","post":{"title":"向 #Define Int Long Long 说不","excerpt":"在算法竞赛社区中，经常能看见有人在代码中使用 #define int long long 来偷懒。这种做法会导致代码的可读性大大降低，并带来一些难以预料的问题。本文将从 C++ 标准定义的角度，解释为什么这种做法是不可取的。","content":[["$","h2",{"id":"tl-dr"},["TL;DR"]],["$","p",{},[["$","code",{},["#define int long long"]]," 是一种未定义行为，尽量不要在代码中使用它。"]],["$","h2",{"id":"前言"},["前言"]],["$","p",{},["在算法竞赛社区中，经常能看见有人在代码中使用 #define int long long 来偷懒。我是一直极力反对这种做法的，因为这种做法会导致代码的可读性大大降低，并带来一些难以预料的问题。"]],["$","h2",{"id":"c-标准"},["C++ 标准"]],["$","p",{},["在 ISO/IEC 14882:2014(E) 的 17.6.4.3.1 Macro names 一节中，有这样一段描述："]],["$","p",{},[["$","img",{"src":"https://arina.loli.net/2023/01/30/yxkIGujSCKBeRlt.png","alt":"","loading":"lazy"},[]]]],["$","p",{},["翻译并整理一下，就是："]],["$","blockquote",{},[["$","p",{},["翻译单元不可 ",["$","code",{},["#define"]]," 或 ",["$","code",{},["#undef"]]," 词法上等同于下列部分的名称："]],["$","ul",{},[["$","li",{},[["$","p",{},["C++ 中的关键字（表 4、表 5，在 2.12 节 Keywords ",["$","code",{},["[lex.key]"]]," 中给出）；"]],["$","p",{},[["$","img",{"src":"https://arina.loli.net/2023/01/30/7Q9nONJElzkMdFh.png","alt":"","loading":"lazy"},[]]]]]],["$","li",{},[["$","p",{},["有特殊含义的标识符（表 3，在 2.11 节 Identifiers ",["$","code",{},["[lex.name]"]]," 中给出）；"]],["$","p",{},[["$","img",{"src":"https://arina.loli.net/2023/01/30/xma8Bt2JybCAl6T.png","alt":"","loading":"lazy"},[]]]]]],["$","li",{},[["$","p",{},["任何标准属性记号（attribute-token，在 7.6 节 Attributes ",["$","code",{},["[dcl.attr]"]]," 中给出）。"]]]]]]]],["$","p",{},["也就是说，标准中 ",["$","strong",{},["并不允许 ",["$","code",{},["#define int"]]]]," 这种操作。"]],["$","h2",{"id":"编译器实现"},["编译器实现"]],["$","h3",{"id":"gcc"},["GCC"]],["$","p",{},["在 GCC 的 ",["$","a",{"href":"https://gcc.gnu.org/onlinedocs/cpp/Macros.html","rel":"external nofollow noreferrer"},["C Preprocessor 文档中"]]," 给出了下面的说明："]],["$","blockquote",{},[["$","p",{},["You may define any valid identifier as a macro, even if it is a C keyword."]]]],["$","p",{},["也就是说，GCC 并没有严格按照标准来实现预处理器，而是稍微放宽了一些限制以允许通过这种方式来使得代码更加灵活，便于增强代码的向下兼容性。"]],["$","h3",{"id":"clang"},["Clang"]],["$","p",{},["相关文档中并未提及是否允许 define 关键字，但源代码中未见相关限制。"]],["$","h3",{"id":"msvc"},["MSVC"]],["$","p",{},[["$","a",{"href":"https://learn.microsoft.com/en-us/cpp/preprocessor/hash-define-directive-c-cpp","rel":"external nofollow noreferrer"},[["$","code",{},["#define"]]," 指令"]]," 相关文档中并未提及。"]],["$","h2",{"id":"后记"},["后记"]],["$","p",{},["使用适当的数据类型来存储数据，有利于代码的可读性和稳定性，便于编写和调试。同时，正确设置变量类型也能提高程序的运行速度和效率。因此，我们应该做好正确的数据类型定义，而不是在编写代码时滥用 ",["$","code",{},["#define int long long"]],"。"]]],"thumb":null,"date":"2023-02-08","updated":"2023-02-08","isoDate":"2023-02-08T01:21:05.000Z","isoUpdate":"2023-02-08T01:25:04.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"C++","url":"/tags/C/"}],"license":null,"permalink":"https://blog.baoshuo.ren/post/say-no-to-define-int-long-long/","url":"/post/say-no-to-define-int-long-long/","prev":null,"next":{"title":"再见，2022 —— 我的 2022 年度总结","url":"/post/goodbye-2022/"},"toc":{"0":{"text":"TL;DR","id":"tl-dr"},"1":{"text":"前言","id":"前言"},"2":{"text":"C++ 标准","id":"c-标准"},"3":{"0":{"text":"GCC","id":"gcc"},"1":{"text":"Clang","id":"clang"},"2":{"text":"MSVC","id":"msvc"},"text":"编译器实现","id":"编译器实现"},"4":{"text":"后记","id":"后记"}},"hasToc":true,"comments":true,"wordCount":"469 字"}},"__N_SSG":true}