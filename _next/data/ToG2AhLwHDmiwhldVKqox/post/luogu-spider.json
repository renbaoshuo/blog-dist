{"pageProps":{"title":"洛谷爬虫 - 宝硕博客","post":{"title":"洛谷爬虫","excerpt":"截至目前，洛谷已经有了近两万道题目和四十余万名用户。本代码爬取了一些样本，以供后续（可能）的数据分析。","content":"<p>截至目前，洛谷已经有了近两万道题目和四十余万名用户。本代码爬取了一些样本，以供后续（可能）的数据分析。</p><span id=more></span><p>本次爬取遵守洛谷的 <code>robots.txt</code> 中的要求，不爬取提交记录页面。为了避免影响洛谷的正常运行，脚本只采用单线程进行爬取。</p><pre><code class=\"hljs http\"><span class=hljs-attribute>User-Agent</span><span class=hljs-punctuation>: </span>*\n<span class=hljs-attribute>Disallow</span><span class=hljs-punctuation>: </span>/record\n<span class=hljs-attribute>Disallow</span><span class=hljs-punctuation>: </span>/recordnew</code></pre><h2 id=爬取题目信息>爬取题目信息</h2><h3 id=题目数据获取>题目数据获取</h3><p>先使用 <code>curl</code> 获取洛谷的题目页面：</p><p><img src=https://s1.baoshuo.ren/2020/11/26/JageUdcpXTthIjM.png alt=\"\" loading=lazy></p><p>可以看出我们需要的数据都在传入给 <code>decodeURIComponent()</code> 函数的字符串中，正则匹配取出即可。</p><p>下面是代码实现：</p><pre><code class=\"hljs python\"><span class=hljs-comment>#!/usr/bin/python3</span>\n<span class=hljs-comment># coding: utf-8</span>\n\n<span class=hljs-keyword>import</span> requests\n<span class=hljs-keyword>import</span> re\n<span class=hljs-keyword>import</span> json\n<span class=hljs-keyword>from</span> urllib.parse <span class=hljs-keyword>import</span> unquote\n\n<span class=hljs-comment># 设置请求头</span>\nheaders = &#123;\n    <span class=hljs-string>&quot;User-Agent&quot;</span>: <span class=hljs-string>&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 Spider/0.1&quot;</span>\n&#125;\n\n<span class=hljs-keyword>def</span> <span class=\"hljs-title function_\">getProblemJSON</span>(<span class=hljs-params>pid</span>):\n    <span class=hljs-keyword>return</span> json.loads(unquote(<span class=hljs-built_in>str</span>(re.findall(<span class=hljs-string>r&#x27;decodeURIComponent\\(&quot;(.*)&quot;\\)&#x27;</span>, requests.get(url=<span class=hljs-string>&quot;https://www.luogu.com.cn/problem/P1000&quot;</span>, headers=headers).text)[<span class=hljs-number>0</span>])))\n\ndata = getProblemJSON(<span class=hljs-string>&quot;P1000&quot;</span>)\n<span class=hljs-built_in>print</span>(json.dumps(data[<span class=hljs-string>&#x27;currentData&#x27;</span>], sort_keys=<span class=hljs-literal>True</span>, indent=<span class=hljs-number>4</span>))</code></pre><p>Update at 2021/02/05:</p><p>添加参数 <code>_contentOnly=1</code> 可以直接获取 JSON 格式的信息，无需再正则匹配。</p><pre><code class=\"hljs diff\"><span class=hljs-comment>--- a/tools/spider.py</span>\n<span class=hljs-comment>+++ b/tools/spider.py</span>\n<span class=hljs-meta>@@ -19,8 +19,7 @@</span>\n def getProblem(pid):\n<span class=hljs-deletion>-    url = f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;&quot;</span>\n<span class=hljs-deletion>-    redata = re.findall(r&#x27;decodeURIComponent\\(&quot;(.*)&quot;\\)&#x27;,</span>\n<span class=hljs-deletion>-                        requests.get(url, headers=headers).text)</span>\n<span class=hljs-addition>+    url = f&quot;https://www.luogu.com.cn/problem/&#123;pid&#125;?_contentOnly=1&quot;</span>\n<span class=hljs-addition>+    redata = requests.get(url, headers=headers).text</span>\n     if len(redata) == 0:\n         return &#123; &quot;code&quot;: 403 &#125;\n     else:\n<span class=hljs-deletion>-        return json.loads(unquote(redata[0]))</span>\n<span class=hljs-addition>+        return json.loads(redata)</span></code></pre><h3 id=处理题目数据>处理题目数据</h3><p>这里只留下 <code>currentData.problem</code> 字段里面的内容即可。</p><pre><code class=\"hljs python\"><span class=hljs-comment>#!/usr/bin/python3</span>\n<span class=hljs-comment># coding: utf-8</span>\n\n<span class=hljs-keyword>import</span> requests\n<span class=hljs-keyword>import</span> re\n<span class=hljs-keyword>import</span> json\n<span class=hljs-keyword>from</span> urllib.parse <span class=hljs-keyword>import</span> unquote\n\nf = <span class=hljs-built_in>open</span>(<span class=hljs-string>&#x27;problems.json&#x27;</span>, <span class=hljs-string>&#x27;w&#x27;</span>)\nres = []\n\nheaders = &#123;\n    <span class=hljs-string>&quot;user-agent&quot;</span>: <span class=hljs-string>&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36 spider/0.1&quot;</span>,\n&#125;\n\n\n<span class=hljs-keyword>def</span> <span class=\"hljs-title function_\">getProblem</span>(<span class=hljs-params>pid</span>):\n    <span class=hljs-keyword>return</span> json.loads(requests.get(<span class=hljs-string>f&quot;https://www.luogu.com.cn/problem/<span class=hljs-subst>&#123;pid&#125;</span>?_contentOnly=1&quot;</span>, headers=headers).text)[<span class=hljs-string>&#x27;currentData&#x27;</span>]\n\n\n<span class=hljs-keyword>for</span> i <span class=hljs-keyword>in</span> <span class=hljs-built_in>range</span>(<span class=hljs-number>1000</span>, <span class=hljs-number>1010</span>):\n    tmpdict = &#123;&#125;\n    tmpdict[<span class=hljs-string>&quot;pid&quot;</span>] = <span class=hljs-string>f&quot;P<span class=hljs-subst>&#123;i&#125;</span>&quot;</span>\n    tmpdict[<span class=hljs-string>&quot;data&quot;</span>] = getProblem(<span class=hljs-string>f&quot;P<span class=hljs-subst>&#123;i&#125;</span>&quot;</span>)[<span class=hljs-string>&quot;problem&quot;</span>]\n    res.append(tmpdict)\n\n<span class=hljs-comment># print(res)</span>\nf.write(json.dumps(res, indent=<span class=hljs-number>4</span>).replace(<span class=hljs-string>&quot;\\\\t&quot;</span>, <span class=hljs-string>&quot;    &quot;</span>))</code></pre><h3 id=最终代码>最终代码</h3><pre><code class=\"hljs python\"><span class=hljs-comment>#!/usr/bin/python3</span>\n<span class=hljs-comment># coding: utf-8</span>\n\n<span class=hljs-keyword>import</span> requests\n<span class=hljs-keyword>import</span> json\n<span class=hljs-keyword>import</span> time\n<span class=hljs-keyword>import</span> pymongo\n\ndbclient = pymongo.MongoClient(<span class=hljs-string>&quot;mongodb://127.0.0.1:27017/&quot;</span>)\nluogudb = dbclient[<span class=hljs-string>&quot;luogu&quot;</span>]\ndbcol = luogudb[<span class=hljs-string>&quot;problem&quot;</span>]\n\nheaders = &#123;\n    <span class=hljs-string>&quot;user-agent&quot;</span>: <span class=hljs-string>&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36 spider/0.1&quot;</span>,\n&#125;\n\n\n<span class=hljs-keyword>def</span> <span class=\"hljs-title function_\">getProblem</span>(<span class=hljs-params>pid</span>):\n    url = <span class=hljs-string>f&quot;https://www.luogu.com.cn/problem/<span class=hljs-subst>&#123;pid&#125;</span>?_contentOnly=1&quot;</span>\n    redata = requests.get(url, headers=headers).text\n    <span class=hljs-keyword>return</span> json.loads(redata)\n\n<span class=hljs-keyword>for</span> i <span class=hljs-keyword>in</span> <span class=hljs-built_in>range</span>(<span class=hljs-number>1000</span>, <span class=hljs-number>7103</span>):\n    pid = <span class=hljs-string>f&quot;P<span class=hljs-subst>&#123;i&#125;</span>&quot;</span>\n    <span class=hljs-keyword>if</span> <span class=hljs-built_in>list</span>(dbcol.find(&#123;<span class=hljs-string>&#x27;pid&#x27;</span>: pid&#125;)) == []:\n        tmpdict = &#123;&#125;\n        tmpdict[<span class=hljs-string>&quot;pid&quot;</span>] = pid\n        tmpdata = getProblem(pid)\n        <span class=hljs-keyword>if</span> tmpdata[<span class=hljs-string>&quot;code&quot;</span>] == <span class=hljs-number>200</span>:\n            tmpdict[<span class=hljs-string>&quot;data&quot;</span>] = getProblem(pid)[<span class=hljs-string>&quot;currentData&quot;</span>][<span class=hljs-string>&quot;problem&quot;</span>]\n            dbcol.insert_one(tmpdict)\n            <span class=hljs-built_in>print</span>(<span class=hljs-string>f&quot;Successfully get problem <span class=hljs-subst>&#123;pid&#125;</span>.&quot;</span>)\n            time.sleep(<span class=hljs-number>1</span>)\n        <span class=hljs-keyword>else</span>:\n            <span class=hljs-built_in>print</span>(<span class=hljs-string>f&quot;Fail to get problem <span class=hljs-subst>&#123;pid&#125;</span>.&quot;</span>)\n    <span class=hljs-keyword>else</span>:\n        <span class=hljs-built_in>print</span>(<span class=hljs-string>f&quot;Problem <span class=hljs-subst>&#123;pid&#125;</span> is already exists.&quot;</span>)</code></pre><p>有关于数据库读写的部分请参考下文的 <a href=#%E6%95%B0%E6%8D%AE%E5%BA%93>数据库</a> 部分。</p><h2 id=爬取用户信息>爬取用户信息</h2><p>结构与题目爬虫类似，故不再作代码说明。</p><pre><code class=\"hljs python\"><span class=hljs-keyword>import</span> json\n<span class=hljs-keyword>import</span> time\n<span class=hljs-keyword>import</span> pymongo\n<span class=hljs-keyword>import</span> requests\n\ndbclient = pymongo.MongoClient(<span class=hljs-string>&quot;mongodb://127.0.0.1:27017/&quot;</span>)\nluogudb = dbclient[<span class=hljs-string>&quot;luogu&quot;</span>]\ndbcol = luogudb[<span class=hljs-string>&quot;user&quot;</span>]\n\nheaders = &#123; <span class=hljs-string>&quot;User-Agent&quot;</span>: <span class=hljs-string>&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4331.0 Safari/537.36&quot;</span>, &#125;\n\n<span class=hljs-keyword>def</span> <span class=\"hljs-title function_\">getUser</span>(<span class=hljs-params>uid</span>):\n    url = <span class=hljs-string>f&quot;https://www.luogu.com.cn/user/<span class=hljs-subst>&#123;uid&#125;</span>?_contentOnly=1&quot;</span>\n    redata = requests.get(url, headers=headers).text\n    <span class=hljs-keyword>return</span> json.loads(redata)\n\n<span class=hljs-keyword>for</span> uid <span class=hljs-keyword>in</span> <span class=hljs-built_in>range</span>(<span class=hljs-number>1</span>, <span class=hljs-number>2</span>):\n    <span class=hljs-keyword>if</span> <span class=hljs-built_in>list</span>(dbcol.find(&#123;<span class=hljs-string>&#x27;uid&#x27;</span>: uid&#125;)) == []:\n        tmpdict = &#123;&#125;\n        tmpdict[<span class=hljs-string>&quot;_id&quot;</span>] = uid\n        tmpdict[<span class=hljs-string>&quot;uid&quot;</span>] = uid\n        tmpdata = getUser(uid)\n        <span class=hljs-keyword>if</span> tmpdata[<span class=hljs-string>&quot;code&quot;</span>] == <span class=hljs-number>200</span>:\n            tmpdict[<span class=hljs-string>&quot;data&quot;</span>] = tmpdata[<span class=hljs-string>&quot;currentData&quot;</span>][<span class=hljs-string>&quot;user&quot;</span>]\n            dbcol.insert_one(tmpdict)\n            <span class=hljs-built_in>print</span>(<span class=hljs-string>f&quot;Successfully get user <span class=hljs-subst>&#123;uid&#125;</span>.&quot;</span>)\n            time.sleep(<span class=hljs-number>0.5</span>)\n        <span class=hljs-keyword>else</span>:\n            <span class=hljs-built_in>print</span>(<span class=hljs-string>f&quot;Fail to get user <span class=hljs-subst>&#123;uid&#125;</span>.&quot;</span>)\n            time.sleep(<span class=hljs-number>0.5</span>)\n    <span class=hljs-keyword>else</span>:\n        <span class=hljs-built_in>print</span>(<span class=hljs-string>f&quot;User <span class=hljs-subst>&#123;uid&#125;</span> is already exists.&quot;</span>)</code></pre><h2 id=数据库>数据库</h2><h3 id=搭建数据库>搭建数据库</h3><p>搭建 MongoDB 数据库只需要在 docker 里面跑一个容器，非常简便。</p><pre><code class=\"hljs bash\">docker run -v /root/data/mongo:/data/db -itd --name mongo -p 27017:27017 mongo</code></pre><h3 id=连接数据库>连接数据库</h3><pre><code class=\"hljs python\">client = pymongo.MongoClient(<span class=hljs-string>&quot;mongodb://127.0.0.1:27017/&quot;</span>)\nluogudb = dbclient[<span class=hljs-string>&quot;luogu&quot;</span>]\ncol = luogudb[<span class=hljs-string>&quot;problem&quot;</span>]</code></pre><h3 id=存储数据>存储数据</h3><pre><code class=\"hljs python\"><span class=hljs-keyword>if</span> <span class=hljs-built_in>list</span>(col.find(&#123;<span class=hljs-string>&#x27;pid&#x27;</span> : pid&#125;)) == []:\n    col.insert_one(data)\n    <span class=hljs-built_in>print</span>(<span class=hljs-string>&quot;Success.&quot;</span>)\n<span class=hljs-keyword>else</span>:\n    <span class=hljs-built_in>print</span>(<span class=hljs-string>&quot;Already exists.&quot;</span>)</code></pre><h3 id=读取数据>读取数据</h3><pre><code class=\"hljs python\"><span class=hljs-built_in>print</span>(<span class=hljs-built_in>list</span>(col.find()))</code></pre><h2 id=web-管理数据库>web 管理数据库</h2><p>再跑一个 <code>mongo-express</code> 就行了。</p><pre><code class=\"hljs bash\">docker run -d --name mongo-express -e ME_CONFIG_MONGODB_SERVER=host.docker.internal -p 8081:8081 mongo-express</code></pre><p>访问 <code>ip:8081</code> 就能看到管理界面了。</p><h2 id=导出数据库>导出数据库</h2><p>直接运行下方命令导出为 JSON 格式即可。</p><pre><code class=\"hljs bash\">mongoexport -d luogu -c problem -o /data/db/problem.json</code></pre><p>或者点击对应数据库管理界面中的 <code>[JSON]</code> 按钮导出。</p><p><img src=https://s1.baoshuo.ren/2020/11/26/hXtVAynYGcb8B71.png alt=\"\" loading=lazy></p><h2 id=成果-2>成果</h2><p>断断续续爬了一个多星期，终于爬完了。</p><p><img src=https://s1.baoshuo.ren/2020/11/26/7muojQZM125gWXL.png alt=\"\" loading=lazy></p>","thumb":null,"date":"2020-11-26","updated":"2020-11-26","isoDate":"2020-11-26T06:55:02.000Z","isoUpdate":"2020-11-26T06:55:02.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[],"license":null,"permalink":"https://blog.baoshuo.ren/post/luogu-spider/","url":"/post/luogu-spider/","prev":{"title":"【随笔】下载自己在 SM.MS 图床上的所有图片","url":"/post/download-smms-image/"},"next":{"title":"批量修改 Git 仓库的提交邮箱","url":"/post/change-git-submission-email/"},"toc":{"1":{"1":{"text":"题目数据获取","id":"题目数据获取"},"2":{"text":"处理题目数据","id":"处理题目数据"},"3":{"text":"最终代码","id":"最终代码"},"text":"爬取题目信息","id":"爬取题目信息"},"2":{"text":"爬取用户信息","id":"爬取用户信息"},"3":{"1":{"text":"搭建数据库","id":"搭建数据库"},"2":{"text":"连接数据库","id":"连接数据库"},"3":{"text":"存储数据","id":"存储数据"},"4":{"text":"读取数据","id":"读取数据"},"text":"数据库","id":"数据库"},"4":{"text":"web 管理数据库","id":"web-管理数据库"},"5":{"text":"导出数据库","id":"导出数据库"},"6":{"text":"成果","id":"成果-2"}},"hasToc":true,"comments":true,"wordCount":"约 1.2 千字"},"__post":true},"__N_SSG":true}