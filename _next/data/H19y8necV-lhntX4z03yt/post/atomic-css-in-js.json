{"pageProps":{"title":"拥抱 Atomic CSS-in-JS - 宝硕博客","post":{"title":"拥抱 Atomic CSS-in-JS","excerpt":"当下，Atomic CSS 愈发受到人们的关注。相比于传统 CSS 编写方法中每个组件对应一个 CSS 类，使用了 Atomic CSS 以后，每一个 CSS 类都唯一对应了一条独立的 CSS 规则，随着组件数量逐渐增加、能复用的 CSS 规则越来越多，最终的 CSS 产物体积也会下降许多，使得网页的加载速度能够产生一个质的飞跃。","content":[["$","p",{},["当下，Atomic CSS 愈发受到人们的关注。相比于传统 CSS 编写方法中每个组件对应一个 CSS 类，使用了 Atomic CSS 以后，每一个 CSS 类都唯一对应了一条独立的 CSS 规则，随着组件数量逐渐增加、能复用的 CSS 规则越来越多，最终的 CSS 产物体积也会下降许多，使得网页的加载速度能够产生一个质的飞跃。"]],["$","span",{"id":"more"},[]],["$","h2",{"id":"css-编写方法的发展历程"},["CSS 编写方法的发展历程"]],["$","p",{},["在介绍 Atomic CSS 之前，让我们先来回顾一下 CSS 编写方法的发展历程。"]],["$","h3",{"id":"smacss"},["SMACSS"]],["$","p",{},[["$","a",{"href":"http://smacss.com","rel":"external nofollow noreferrer"},["SMACSS"]],"（Scalable & Modular Architecture for CSS），是由 Jonathan Snook 提出的 CSS 理论。其主要原则有 3 条："]],["$","ul",{},[["$","li",{},["Categorizing CSS Rules（为 CSS 分类）"]],["$","li",{},["Naming Rules（命名规则）"]],["$","li",{},["Minimizing the Depth of Applicability（最小化适配深度）"]]]],["$","h4",{"id":"规则分类"},["规则分类"]],["$","p",{},["SMACSS 将规则分为了五类：Base（基础）、Layout（布局）、Module（模块）、State（状态）、Theme（主题）。"]],["$","p",{},[["$","strong",{},["基础（Base）"]]," 规则里放置默认样式。这些默认样式基本上都是元素选择器，不过也可以包含属性选择器，伪类选择器，孩子选择器，兄弟选择器。本质上来说，一个基础样式定义了元素在页面的任何位置应该是怎么样的。"]],["$","p",{},[["$","strong",{},["布局（Layout）"]]," 规则将页面拆分成几个部分，每个部分都可能有一到多个模块。顾名思义，这个分类主要用来做页面的整体或其中一块区域的布局。"]],["$","p",{},[["$","strong",{},["模块（Modules）"]]," 是我们的设计当中可重用，可模块化的部分。插图，侧边栏，文章列表等等都属于模块。"]],["$","p",{},[["$","strong",{},["状态（State）"]]," 规则定义了我们的模块或者布局在特殊的状态下应该呈现怎样的效果。它可能定义模块、布局在不同显示屏上应该如何显示。也可能定义一个模块在不同页面（例如主页和内页）中可能呈现怎么样的效果。"]],["$","p",{},[["$","strong",{},["主题（Theme）"]]," 规则和状态规则类似，定义模块或者布局的外观。很多网站的「深色模式」「换肤」等等功能就是这样实现的。"]],["$","h4",{"id":"命名规则"},["命名规则"]],["$","p",{},["将规则分成五类之后，还需要命名规范。命名规范能够使得我们立刻了解到某个样式属于哪一类，以及它在整个页面中起到的作用。在一个大型项目中，我们可能会将一个样式分割成几个文件，这个时候命名约定能够使得我们更容易知道这个样式属于哪个文件。"]],["$","p",{},["推荐使用前缀来区分布局、模块和状态等等规则。比如对布局规则使用 ",["$","code",{},["layout-"]]," 前缀，对状态规则使用 ",["$","code",{},["is-"]]," 前缀就是一个不错的选择。"]],["$","h4",{"id":"最小化适配深度"},["最小化适配深度"]],["$","p",{},["尽量不要依赖文档树的结构来编写样式。这样可以让我们的样式更加灵活，并且容易维护。"]],["$","h3",{"id":"bem"},["BEM"]],["$","p",{},[["$","a",{"href":"http://getbem.com","rel":"external nofollow noreferrer"},["BEM"]],"（ Block Element Modifier）是由 Yandex 团队提出的一种前端 CSS 命名方法论。它是一个简单又非常有用的命名约定。让前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确，而且更加严密。"]],["$","p",{},["BEM 命名约定的模式是："]],["$","pre",{},[["$","code",{"class":"hljs css"},[["$","span",{"class":"hljs-selector-class"},[".block"]]," {\n}\n\n",["$","span",{"class":"hljs-selector-class"},[".block__element"]]," {\n}\n\n",["$","span",{"class":"hljs-selector-class"},[".block--modifier"]]," {\n}"]]]],["$","ul",{},[["$","li",{},[["$","code",{},["block"]]," 代表了「块」，用于组件本体。"]],["$","li",{},[["$","code",{},["element"]]," 代表了「块」中的某个「元素」（也可以叫做「子组件」），是块构成的主要成员。"]],["$","li",{},[["$","code",{},["modifier"]]," 代表了「块」的修饰符，表示不同的状态和版本。使用 ",["$","code",{},["--"]]," 做区分，适用于「块」和「元素」，分别称之为「块修饰符」和「元素修饰符」。"]]]],["$","p",{},["命名的不同部分之间之所以使用 ",["$","code",{},["__"]]," 和 ",["$","code",{},["--"]]," 分割，是因为如果某部分中如果出现了多个单词需要使用 ",["$","code",{},["-"]]," 分隔，这样可以避免造成混淆。"]],["$","h3",{"id":"css-modules"},["CSS Modules"]],["$","p",{},["随着时代的发展，一个大型前端工程中的 CSS 类名越来越多，此时难免会出现类名冲突的情况，此时 CSS Modules 应运而生 —— 它通过为 CSS 类名添加 Hash 等方式来产生唯一的名称来防止冲突的产生。"]],["$","p",{},[["$","a",{"href":"https://github.com/css-modules/css-modules","rel":"external nofollow noreferrer"},["CSS Modules"]]," 并不是 CSS 官方的标准，也不是浏览器的特性，而是使用一些构建工具，比如 Webpack，对 CSS 类名和选择器限定作用域的一种方式。"]],["$","h3",{"id":"utility-first-css"},["Utility-First CSS"]],["$","p",{},["当传统大型项目使用的 CSS 方法论还都大多是上方提到的 OOCSS、SMACSS、BEM 等等主要聚焦在「关注点分离」的「语义化 CSS」方案的时候，Utility-First 的 CSS 概念脱颖而出、逐渐受到社区的关注。而这之中最为被人熟知的、也最典型的就是 ",["$","a",{"href":"https://tailwindcss.com","rel":"external nofollow noreferrer"},["Tailwind CSS"]]," 了。"]],["$","p",{},["Utility-First CSS 不像 Semantic CSS 那样将组件样式放在一个类中，而是为我们提供一个由不同功能类组成的工具箱，我们可以将它们混合在一起应用在页面元素上。这样有几个好处："]],["$","ul",{},[["$","li",{},["不用纠结于类名的命名；"]],["$","li",{},["功能越简单的类，复用率越高，可以减小最终的打包大小；"]],["$","li",{},["不存在全局样式污染问题；"]],["$","li",{},["等等。"]]]],["$","p",{},["但也存在一些不足："]],["$","ul",{},[["$","li",{},[["$","code",{},["class"]]," 属性的内容过长；"]],["$","li",{},["存在 CSS 规则插入顺序相关的问题；"]],["$","li",{},["不能通过语义化类名得知组件的作用；"]],["$","li",{},["不压缩的话构建产物体积过大。"]]]],["$","h2",{"id":"新时代，来临了-——-atomic-css-in-js"},["新时代，来临了 —— Atomic CSS-in-JS"]],["$","p",{},["在前文介绍的 Utility-First CSS 的基础之上更进一步，Atomic CSS 便映入了人们的眼帘。"]],["$","p",{},["Atomic CSS 背后的思想与以往的「关注点分离」的思想可以称得上是背道而驰了。使用 Atomic CSS 时实际上将结构层和样式层耦合在了一起，这样的方式在现代 CSS-in-JS 的代码库中基本上得到了广泛认可，下文将会进行进一步的介绍。"]],["$","p",{},["Atomic CSS 可以看作是 Utility-First CSS 的极致抽象版本，每一个 CSS 类都对应一条单一的 CSS 规则。可面对如此繁复的 CSS 规则，手写 Atomic CSS 的类名并不是一个好的办法。于是 Atomic CSS-in-JS 应运而生，它可以看作是「自动化的 Atomic CSS」："]],["$","ul",{},[["$","li",{},["无需手动设计 CSS 类名；"]],["$","li",{},["能够提取页面的关键 CSS，并进行代码拆分；"]],["$","li",{},["可以解决经典的 CSS 规则插入顺序的问题。"]]]],["$","h3",{"id":"传统-css-编写方式的缺点"},["传统 CSS 编写方式的缺点"]],["$","p",{},["Christopher Chedeau 一直致力于推广 React 生态系统中 CSS-in-JS 理念。在很多次演讲中，他都解释了 CSS 的几大问题："]],["$","p",{},[["$","img",{"src":"https://s1.baoshuo.ren/2022/07/23/5PTlQWfhkVZObpJ.png","alt":"","loading":"lazy"},[]]]],["$","ol",{},[["$","li",{},["全局命名空间"]],["$","li",{},["依赖"]],["$","li",{},["无用代码消除"]],["$","li",{},["代码压缩"]],["$","li",{},["共享常量"]],["$","li",{},["非确定性（Non-Deterministic）解析"]],["$","li",{},["隔离"]]]],["$","p",{},["虽然 Utility-First CSS 和 Atomic CSS 也解决了其中的一些问题，但它们无法解决所有问题（特别是样式的非确定性解析）。"]],["$","p",{},["举个例子：Tailwind CSS 会在生成时生成出来许多无用代码，导致样式文件体积的增长，看看下面这份代码："]],["$","pre",{},[["$","code",{"class":"hljs html"},[["$","span",{"class":"hljs-tag"},["<",["$","span",{"class":"hljs-name"},["div"]]," ",["$","span",{"class":"hljs-attr"},["class"]],"=",["$","span",{"class":"hljs-string"},["\"before:bg-white before:p-4\""]],">"]],"content",["$","span",{"class":"hljs-tag"},["</",["$","span",{"class":"hljs-name"},["div"]],">"]]]]]],["$","p",{},["生成出来的样式文件长这个样子："]],["$","pre",{},[["$","code",{"class":"hljs css"},[["$","span",{"class":"hljs-selector-class"},[".before"]],"\\:bg-white::before {\n  ",["$","span",{"class":"hljs-attribute"},["content"]],": ",["$","span",{"class":"hljs-built_in"},["var"]],"(--tw-content);\n  ",["$","span",{"class":"hljs-attr"},["--tw-bg-opacity"]],": ",["$","span",{"class":"hljs-number"},["1"]],";\n  ",["$","span",{"class":"hljs-attribute"},["background-color"]],": ",["$","span",{"class":"hljs-built_in"},["rgb"]],"(",["$","span",{"class":"hljs-number"},["255"]]," ",["$","span",{"class":"hljs-number"},["255"]]," ",["$","span",{"class":"hljs-number"},["255"]]," / ",["$","span",{"class":"hljs-built_in"},["var"]],"(--tw-bg-opacity));\n}\n\n",["$","span",{"class":"hljs-selector-class"},[".before"]],"\\:p-",["$","span",{"class":"hljs-number"},["4"]],"::before {\n  ",["$","span",{"class":"hljs-attribute"},["content"]],": ",["$","span",{"class":"hljs-built_in"},["var"]],"(--tw-content);\n  ",["$","span",{"class":"hljs-attribute"},["padding"]],": ",["$","span",{"class":"hljs-number"},["1rem"]],";\n}"]]]],["$","p",{},["可以看到这份文件中包括了许多的无用代码，比如重复的 ",["$","code",{},["content: var(--tw-content)"]],"。"]],["$","h3",{"id":"更小的构建产物"},["更小的构建产物"]],["$","p",{},["传统的 CSS 编写方法无法复用组件间重复的 CSS 规则，比如下图中高亮的几条规则各自躺在它们对应的 CSS 类中："]],["$","p",{},[["$","img",{"src":"https://arina.loli.net/2022/07/23/TKvwu6PpgxalrsG.png","alt":"","loading":"lazy"},[]]]],["$","p",{},["这样会导致 CSS 产物大小与项目的复杂程度和组件数量线性正相关。"]],["$","p",{},["但使用 Atomic CSS 之后，这些规则被提取出来进行复用："]],["$","p",{},[["$","img",{"src":"https://arina.loli.net/2022/07/23/xKRoETDVqQBgFcf.png","alt":"","loading":"lazy"},[]]]],["$","p",{},["随着后期组件数量逐渐增加、能复用的 CSS 规则越来越多、最终 CSS 产物大小与项目复杂程度呈对数关系："]],["$","p",{},[["$","img",{"src":"https://s1.baoshuo.ren/2022/07/16/Uq6nbJXidShyzH8.png","alt":"","loading":"lazy"},[]]]],["$","p",{},["Facebook 分享了他们的数据：在旧网站上，仅登录页就需要加载 413 KiB 的样式文件，而在使用 Atomic CSS-in-JS 重写后，整个站点只有 74 KiB 的样式文件，还包括了深色模式。"]],["$","p",{},["虽然在使用 Atomic CSS 之后，HTML 的体积会显著增大，不过由于这些类名的高冗余度，可以利用 gzip 来压缩掉很大一部分体积。"]],["$","h3",{"id":"处理-css-规则的插入顺序"},["处理 CSS 规则的插入顺序"]],["$","p",{},["让我们再来回顾一遍这个经典的 CSS 规则插入顺序的问题："]],["$","p",{},[["$","img",{"src":"https://s1.baoshuo.ren/2022/07/23/dfu1NqZ7i3pmOrM.png","alt":"","loading":"lazy"},[]]]],["$","p",{},["我们都知道，最后生效的样式不是最后一个类名对应的规则，而是样式表中最后插入的规则。"]],["$","p",{},["那么，如何在 CSS-in-JS 中处理这个问题呢？通用的做法是在生成阶段就将冲突的规则过滤掉，以避免产生冲突。比如下面这个组件："]],["$","pre",{},[["$","code",{"class":"hljs js"},[["$","span",{"class":"hljs-keyword"},["const"]]," styles = style9.",["$","span",{"class":"hljs-title function_"},["create"]],"({\n  ",["$","span",{"class":"hljs-attr"},["card"]],": {\n    ",["$","span",{"class":"hljs-attr"},["color"]],": ",["$","span",{"class":"hljs-string"},["'#000000'"]],",\n  },\n  ",["$","span",{"class":"hljs-attr"},["profileCard"]],": {\n    ",["$","span",{"class":"hljs-attr"},["color"]],": ",["$","span",{"class":"hljs-string"},["'#ffffff'"]],",\n  },\n});\n\n",["$","span",{"class":"hljs-keyword"},["const"]]," ",["$","span",{"class":"hljs-title function_"},["Component"]]," = (",["$","span",{"class":"hljs-params"},[]],") => (\n  ",["$","span",{"class":"language-xml"},[["$","span",{"class":"hljs-tag"},["<",["$","span",{"class":"hljs-name"},["div"]]," ",["$","span",{"class":"hljs-attr"},["className"]],"=",["$","span",{"class":"hljs-string"},["{style9(styles.card,"]]," ",["$","span",{"class":"hljs-attr"},["styles.profileCard"]],")} />"]]]],"\n);"]]]],["$","p",{},["过滤后组件的实际样式如下："]],["$","pre",{},[["$","code",{"class":"hljs css"},[["$","span",{"class":"hljs-attribute"},["color"]],": ",["$","span",{"class":"hljs-number"},["#ffffff"]],";"]]]],["$","p",{},["而如果将组件样式中的 ",["$","code",{},["styles.card"]]," 和 ",["$","code",{},["styles.profileCard"]]," 调换一下顺序，过滤之后的样式就变成了这样："]],["$","pre",{},[["$","code",{"class":"hljs css"},[["$","span",{"class":"hljs-attribute"},["color"]],": ",["$","span",{"class":"hljs-number"},["#000000"]],";"]]]],["$","p",{},["但 CSS 中有一些简写规则，如果只按照规则名称来处理显然是不行的。有的库强制开发者们不使用简写规则来避免这个问题，而另外的一些库则将这些简写规则展开成多条规则后再进行过滤，比如 ",["$","code",{},["margin: 10px"]]," 可以被拆成 ",["$","code",{},["margin-top: 10px"]],"、",["$","code",{},["margin-right: 10px"]],"、",["$","code",{},["margin-bottom: 10px"]],"、",["$","code",{},["margin-left: 10px"]]," 四条独立的规则。"]],["$","h3",{"id":"经典实现"},["经典实现"]],["$","p",{},["Atomic CSS-in-JS 实现有运行时（Runtime）和预编译（Pre-Compile）两种。运行时（Runtime）的优点在于可以动态生成样式，相比于下文中采用预编译方法的库来说灵活度高了不止一点半点。其缺点则在于 Vendor Prefix 等操作需要在 Runtime 执行，因此 Bundle 中必须携带相关依赖导致体积增大。预编译（Pre-Compile）的优点则在于无需将相关依赖打包发送给客户端，改善了性能。而缺点则是预编译的过程高度依赖静态代码分析，所以难以实现动态样式生成与组合。"]],["$","h4",{"id":"styletron"},["Styletron"]],["$","p",{},[["$","a",{"href":"https://styletron.org","rel":"external nofollow noreferrer"},["Styletron"]]," 是 Uber 公司开发的一个较为典型的运行时 Atomic CSS-in-JS 库，驱动了 Uber 的官网和 H5 页面。"]],["$","p",{},["Styletron 还提供了一套 Styled Components 的实现，可以通过下面的方式使用："]],["$","pre",{},[["$","code",{"class":"hljs javascript"},[["$","span",{"class":"hljs-keyword"},["import"]]," { styled } ",["$","span",{"class":"hljs-keyword"},["from"]]," ",["$","span",{"class":"hljs-string"},["'styletron-react'"]],";\n\n",["$","span",{"class":"hljs-keyword"},["const"]]," ",["$","span",{"class":"hljs-title class_"},["Component"]]," = ",["$","span",{"class":"hljs-title function_"},["styled"]],"(",["$","span",{"class":"hljs-string"},["'div'"]],", {\n  ",["$","span",{"class":"hljs-attr"},["marginTop"]],": ",["$","span",{"class":"hljs-string"},["'10px'"]],",\n  ",["$","span",{"class":"hljs-attr"},["marginBottom"]],": ",["$","span",{"class":"hljs-string"},["'10px'"]],",\n});\n\n",["$","span",{"class":"language-xml"},[["$","span",{"class":"hljs-tag"},["<",["$","span",{"class":"hljs-name"},["Component"]]," />"]]]],";"]]]],["$","p",{},["还可以根据 prop 的值来动态生成样式："]],["$","pre",{},[["$","code",{"class":"hljs javascript"},[["$","span",{"class":"hljs-keyword"},["const"]]," ",["$","span",{"class":"hljs-title class_"},["Component"]]," = ",["$","span",{"class":"hljs-title function_"},["styled"]],"(",["$","span",{"class":"hljs-string"},["'div'"]],", ",["$","span",{"class":"hljs-function"},["(",["$","span",{"class":"hljs-params"},["props"]],") =>"]]," {\n  ",["$","span",{"class":"hljs-keyword"},["return"]]," { ",["$","span",{"class":"hljs-attr"},["color"]],": props.",["$","span",{"class":"hljs-property"},["$fraction"]]," < ",["$","span",{"class":"hljs-number"},["0.5"]]," ? ",["$","span",{"class":"hljs-string"},["'red'"]]," : ",["$","span",{"class":"hljs-string"},["'green'"]]," };\n});\n\n",["$","span",{"class":"language-xml"},[["$","span",{"class":"hljs-tag"},["<",["$","span",{"class":"hljs-name"},["Component"]]," $",["$","span",{"class":"hljs-attr"},["fraction"]],"=",["$","span",{"class":"hljs-string"},["{Math.random()}"]]," />"]]]],";"]]]],["$","h4",{"id":"fela"},["Fela"]],["$","p",{},["与 Styletron 同为运行时 Atomic CSS-in-JS 库的还有沃尔沃汽车前技术主管开发的 ",["$","a",{"href":"https://fela.js.org/","rel":"external nofollow noreferrer"},["Fela"]],"，驱动了沃尔沃汽车官网，Cloudflare Dashboard 和 Medium 等众多网站。"]],["$","h4",{"id":"vanilla-extract"},["vanilla-extract"]],["$","p",{},[["$","a",{"href":"https://www.youtube.com/watch?v=9JZHodNR184","rel":"external nofollow noreferrer"},["Stylex"]]," 是 Meta（原 Facebook）的一个尚未开源的预编译 Atomic CSS-in-JS 库。不过由于 Meta 迟迟不开源 stylex，社区中已经涌现出了数个基于其思想的开源实现，其中以 ",["$","a",{"href":"https://github.com/seek-oss/vanilla-extract","rel":"external nofollow noreferrer"},["vanilla-extract"]]," 最为知名。"]],["$","h4",{"id":"style9"},["style9"]],["$","p",{},["基于 stylex 思想的预编译 Atomic CSS-in-JS 库除了 vanilla-extract 之外还有 ",["$","a",{"href":"https://github.com/johanholmerin/style9","rel":"external nofollow noreferrer"},["style9"]]," 和 ",["$","a",{"href":"https://github.com/necolas/styleq","rel":"external nofollow noreferrer"},["styleQ"]],"。"]],["$","h4",{"id":"compiled"},["compiled"]],["$","p",{},["将视线从 stylex 系列中转移开来，Atlassian 还编写了一个名为 ",["$","a",{"href":"https://compiledcssinjs.com/","rel":"external nofollow noreferrer"},["compiled"]]," 的预编译 Atomic CSS-in-JS 库，但在笔者的实际使用过程中坑点较多，可能会导致样式的重复生成，并且其对 TypeScript 的支持也不尽人意，不过其代码实现中的许多技巧还是有借鉴价值的。"]],["$","h5",{"id":"styled-components"},["Styled Components"]],["$","p",{},["compiled 依靠一个 babel transformer 来对代码进行转换以插入样式。"]],["$","p",{},["在 ",["$","a",{"href":"https://github.com/atlassian-labs/compiled/blob/ba66b35b82be513bf206d46c4adbdd7aefa3f7f1/packages/react/src/styled/index.tsx#L59-L83","rel":"external nofollow noreferrer"},[["$","code",{},["packages/react/src/styled/index.tsx"]]]]," 文件中可以看到，",["$","code",{},["@compiled/react"]]," 包含了一个导出了一个名为 ",["$","code",{},["styled"]]," 的对象，这个对象一旦被访问就会立刻抛出错误，提示 transformer 没有正常工作："]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-keyword"},["export"]]," ",["$","span",{"class":"hljs-keyword"},["const"]]," ",["$","span",{"class":"hljs-attr"},["styled"]],": ",["$","span",{"class":"hljs-title class_"},["StyledComponentInstantiator"]]," = ",["$","span",{"class":"hljs-keyword"},["new"]]," ",["$","span",{"class":"hljs-title class_"},["Proxy"]],"(\n  {},\n  {\n    ",["$","span",{"class":"hljs-title function_"},["get"]],"(",["$","span",{"class":"hljs-params"},[]],") {\n      ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-function"},["() =>"]]," {\n        ",["$","span",{"class":"hljs-comment"},["// Blow up if the transformer isn't turned on."]],"\n        ",["$","span",{"class":"hljs-comment"},["// This code won't ever be executed when setup correctly."]],"\n        ",["$","span",{"class":"hljs-keyword"},["throw"]]," ",["$","span",{"class":"hljs-title function_"},["createSetupError"]],"();\n      };\n    },\n  }\n) ",["$","span",{"class":"hljs-keyword"},["as"]]," ",["$","span",{"class":"hljs-built_in"},["any"]],";"]]]],["$","p",{},["那么可以看出，",["$","code",{},["styled"]]," 会被 transformer 替换掉，对应的入口逻辑在 ",["$","a",{"href":"https://github.com/atlassian-labs/compiled/blob/ba66b35b82be513bf206d46c4adbdd7aefa3f7f1/packages/babel-plugin/src/babel-plugin.tsx","rel":"external nofollow noreferrer"},[["$","code",{},["packages/babel-plugin/src/babel-plugin.tsx"]]]]," 文件中："]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-title class_"},["ImportDeclaration"]],"(path, state) {\n  ",["$","span",{"class":"hljs-comment"},["// 不是从 @compiled/react 导入的包不处理"]],"\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["source"]],".",["$","span",{"class":"hljs-property"},["value"]]," !== ",["$","span",{"class":"hljs-string"},["'@compiled/react'"]],") {\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 记录导入的模块"]],"\n  state.",["$","span",{"class":"hljs-property"},["compiledImports"]]," = {};\n\n  ",["$","span",{"class":"hljs-comment"},["// 遍历导入数组中的所有元素"]],"\n  path.",["$","span",{"class":"hljs-title function_"},["get"]],"(",["$","span",{"class":"hljs-string"},["'specifiers'"]],").",["$","span",{"class":"hljs-title function_"},["forEach"]],"(",["$","span",{"class":"hljs-function"},["(",["$","span",{"class":"hljs-params"},["specifier"]],") =>"]]," {\n    ",["$","span",{"class":"hljs-keyword"},["if"]]," (!state.",["$","span",{"class":"hljs-property"},["compiledImports"]]," || !specifier.",["$","span",{"class":"hljs-title function_"},["isImportSpecifier"]],"()) {\n      ",["$","span",{"class":"hljs-keyword"},["return"]],";\n    }\n\n    ([",["$","span",{"class":"hljs-string"},["'styled'"]],", ",["$","span",{"class":"hljs-string"},["'ClassNames'"]],", ",["$","span",{"class":"hljs-string"},["'css'"]],", ",["$","span",{"class":"hljs-string"},["'keyframes'"]],"] ",["$","span",{"class":"hljs-keyword"},["as"]]," ",["$","span",{"class":"hljs-keyword"},["const"]],").",["$","span",{"class":"hljs-title function_"},["forEach"]],"(",["$","span",{"class":"hljs-function"},["(",["$","span",{"class":"hljs-params"},["apiName"]],") =>"]]," {\n      ",["$","span",{"class":"hljs-keyword"},["if"]]," (\n        state.",["$","span",{"class":"hljs-property"},["compiledImports"]]," &&\n        t.",["$","span",{"class":"hljs-title function_"},["isIdentifier"]],"(specifier.",["$","span",{"class":"hljs-property"},["node"]],"?.",["$","span",{"class":"hljs-property"},["imported"]],") &&\n        specifier.",["$","span",{"class":"hljs-property"},["node"]],"?.",["$","span",{"class":"hljs-property"},["imported"]],".",["$","span",{"class":"hljs-property"},["name"]]," === apiName\n      ) {\n        ",["$","span",{"class":"hljs-comment"},["// 记录下导入后 API 的名称"]],"\n        state.",["$","span",{"class":"hljs-property"},["compiledImports"]],"[apiName] = specifier.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["local"]],".",["$","span",{"class":"hljs-property"},["name"]],";\n      }\n    });\n  });\n\n  ",["$","span",{"class":"hljs-comment"},["// 导入 @compiled/react/runtime 中的 API"]],"\n  ",["$","span",{"class":"hljs-title function_"},["appendRuntimeImports"]],"(path);\n\n  path.",["$","span",{"class":"hljs-title function_"},["remove"]],"();\n},"]]]],["$","p",{},["这段代码记录了 ",["$","code",{},["@compiled/react"]]," 的引入情况，为下方的处理提供了便利。"]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-title class_"},["TaggedTemplateExpression"]],"(path, state) {\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isIdentifier"]],"(path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["tag"]],") && path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["tag"]],".",["$","span",{"class":"hljs-property"},["name"]]," === state.",["$","span",{"class":"hljs-property"},["compiledImports"]],"?.",["$","span",{"class":"hljs-property"},["css"]],") {\n    state.",["$","span",{"class":"hljs-property"},["pathsToCleanup"]],".",["$","span",{"class":"hljs-title function_"},["push"]],"({ path, ",["$","span",{"class":"hljs-attr"},["action"]],": ",["$","span",{"class":"hljs-string"},["'replace'"]]," });\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (\n    t.",["$","span",{"class":"hljs-title function_"},["isIdentifier"]],"(path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["tag"]],") &&\n    path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["tag"]],".",["$","span",{"class":"hljs-property"},["name"]]," === state.",["$","span",{"class":"hljs-property"},["compiledImports"]],"?.",["$","span",{"class":"hljs-property"},["keyframes"]],"\n  ) {\n    state.",["$","span",{"class":"hljs-property"},["pathsToCleanup"]],".",["$","span",{"class":"hljs-title function_"},["push"]],"({ path, ",["$","span",{"class":"hljs-attr"},["action"]],": ",["$","span",{"class":"hljs-string"},["'replace'"]]," });\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (!state.",["$","span",{"class":"hljs-property"},["compiledImports"]],"?.",["$","span",{"class":"hljs-property"},["styled"]],") {\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 处理 styled component"]],"\n  ",["$","span",{"class":"hljs-title function_"},["visitStyledPath"]],"(path, { ",["$","span",{"class":"hljs-attr"},["context"]],": ",["$","span",{"class":"hljs-string"},["'root'"]],", state, ",["$","span",{"class":"hljs-attr"},["parentPath"]],": path });\n},\n",["$","span",{"class":"hljs-title class_"},["CallExpression"]],"(path, state) {\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (!state.",["$","span",{"class":"hljs-property"},["compiledImports"]],") {\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (\n    t.",["$","span",{"class":"hljs-title function_"},["isIdentifier"]],"(path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["callee"]],") &&\n    (path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["callee"]],".",["$","span",{"class":"hljs-property"},["name"]]," === state.",["$","span",{"class":"hljs-property"},["compiledImports"]],"?.",["$","span",{"class":"hljs-property"},["css"]]," ||\n      path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["callee"]],".",["$","span",{"class":"hljs-property"},["name"]]," === state.",["$","span",{"class":"hljs-property"},["compiledImports"]],"?.",["$","span",{"class":"hljs-property"},["keyframes"]],")\n  ) {\n    state.",["$","span",{"class":"hljs-property"},["pathsToCleanup"]],".",["$","span",{"class":"hljs-title function_"},["push"]],"({ path, ",["$","span",{"class":"hljs-attr"},["action"]],": ",["$","span",{"class":"hljs-string"},["'replace'"]]," });\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 处理 styled component"]],"\n  ",["$","span",{"class":"hljs-title function_"},["visitStyledPath"]],"(path, { ",["$","span",{"class":"hljs-attr"},["context"]],": ",["$","span",{"class":"hljs-string"},["'root'"]],", state, ",["$","span",{"class":"hljs-attr"},["parentPath"]],": path });\n},"]]]],["$","p",{},["对 ",["$","code",{},["TaggedTemplateExpression"]]," 和 ",["$","code",{},["CallExpression"]]," 的处理，正好对应了文档中的两种不同调用方式："]],["$","pre",{},[["$","code",{"class":"hljs js"},[["$","span",{"class":"hljs-comment"},["// 模板字符串"]],"\nstyled.",["$","span",{"class":"hljs-property"},["a"]],["$","span",{"class":"hljs-string"},["`"]],"\n",["$","span",{"class":"hljs-string"},["  color: blue;"]],"\n",["$","span",{"class":"hljs-string"},["`"]],";\n\n",["$","span",{"class":"hljs-comment"},["// 函数调用"]],"\nstyled.",["$","span",{"class":"hljs-title function_"},["a"]],"({\n  ",["$","span",{"class":"hljs-attr"},["color"]],": ",["$","span",{"class":"hljs-string"},["'blue'"]],",\n});"]]]],["$","p",{},["跟随着 ",["$","code",{},["visitStyledPath"]]," 函数的定义，可以找到 ",["$","a",{"href":"https://github.com/atlassian-labs/compiled/blob/ba66b35b82be513bf206d46c4adbdd7aefa3f7f1/packages/babel-plugin/src/styled/index.tsx","rel":"external nofollow noreferrer"},[["$","code",{},["packages/babel-plugin/src/styled/index.tsx"]]]]," 文件。"]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-keyword"},["export"]]," ",["$","span",{"class":"hljs-keyword"},["const"]]," visitStyledPath = (\n  ",["$","span",{"class":"hljs-attr"},["path"]],": ",["$","span",{"class":"hljs-title class_"},["NodePath"]],"<t.",["$","span",{"class":"hljs-property"},["TaggedTemplateExpression"]],"> | ",["$","span",{"class":"hljs-title class_"},["NodePath"]],"<t.",["$","span",{"class":"hljs-property"},["CallExpression"]],">,\n  ",["$","span",{"class":"hljs-attr"},["meta"]],": ",["$","span",{"class":"hljs-title class_"},["Metadata"]],"\n): ",["$","span",{"class":"hljs-function"},[["$","span",{"class":"hljs-params"},["void"]]," =>"]]," {\n  ",["$","span",{"class":"hljs-comment"},["// 判断是否是支持的操作"]],"\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (\n    t.",["$","span",{"class":"hljs-title function_"},["isTaggedTemplateExpression"]],"(path.",["$","span",{"class":"hljs-property"},["node"]],") &&\n    ",["$","span",{"class":"hljs-title function_"},["hasInValidExpression"]],"(path.",["$","span",{"class":"hljs-property"},["node"]],")\n  ) {\n    ",["$","span",{"class":"hljs-keyword"},["throw"]]," ",["$","span",{"class":"hljs-title function_"},["buildCodeFrameError"]],"(\n      ",["$","span",{"class":"hljs-string"},["`A logical expression contains an invalid CSS declaration. "]],"\n",["$","span",{"class":"hljs-string"},["      Compiled doesn't support CSS properties that are defined with a conditional rule that doesn't specify a default value."]],"\n",["$","span",{"class":"hljs-string"},["      Eg. font-weight: \\${(props) => (props.isPrimary && props.isMaybe) && 'bold'}; is invalid."]],"\n",["$","span",{"class":"hljs-string"},["      Use \\${(props) => props.isPrimary && props.isMaybe && ({ 'font-weight': 'bold' })}; instead`"]],",\n      path.",["$","span",{"class":"hljs-property"},["node"]],",\n      meta.",["$","span",{"class":"hljs-property"},["parentPath"]],"\n    );\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 提取样式信息"]],"\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," styledData = ",["$","span",{"class":"hljs-title function_"},["extractStyledDataFromNode"]],"(path.",["$","span",{"class":"hljs-property"},["node"]],", meta);\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (!styledData) {\n    ",["$","span",{"class":"hljs-comment"},["// 没有样式信息"]],"\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 生成 CSS"]],"\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," cssOutput = ",["$","span",{"class":"hljs-title function_"},["buildCss"]],"(styledData.",["$","span",{"class":"hljs-property"},["cssNode"]],", meta);\n\n  ",["$","span",{"class":"hljs-comment"},["// 构建并替换节点"]],"\n  path.",["$","span",{"class":"hljs-title function_"},["replaceWith"]],"(",["$","span",{"class":"hljs-title function_"},["buildStyledComponent"]],"(styledData.",["$","span",{"class":"hljs-property"},["tag"]],", cssOutput, meta));\n\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," parentVariableDeclaration = path.",["$","span",{"class":"hljs-title function_"},["findParent"]],"(",["$","span",{"class":"hljs-function"},["(",["$","span",{"class":"hljs-params"},["x"]],") =>"]],"\n    x.",["$","span",{"class":"hljs-title function_"},["isVariableDeclaration"]],"()\n  );\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (\n    parentVariableDeclaration &&\n    t.",["$","span",{"class":"hljs-title function_"},["isVariableDeclaration"]],"(parentVariableDeclaration.",["$","span",{"class":"hljs-property"},["node"]],")\n  ) {\n    ",["$","span",{"class":"hljs-keyword"},["const"]]," variableDeclarator = parentVariableDeclaration.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["declarations"]],"[",["$","span",{"class":"hljs-number"},["0"]],"];\n    ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isIdentifier"]],"(variableDeclarator.",["$","span",{"class":"hljs-property"},["id"]],")) {\n      ",["$","span",{"class":"hljs-keyword"},["const"]]," variableName = variableDeclarator.",["$","span",{"class":"hljs-property"},["id"]],".",["$","span",{"class":"hljs-property"},["name"]],";\n      parentVariableDeclaration.",["$","span",{"class":"hljs-title function_"},["insertAfter"]],"(",["$","span",{"class":"hljs-title function_"},["buildDisplayName"]],"(variableName));\n    }\n  }\n};"]]]],["$","p",{},["再来看提取样式信息的函数 ",["$","code",{},["extractStyledDataFromNode"]],"，这个函数根据不同情况使用不同的方法提取样式信息："]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-keyword"},["const"]]," ",["$","span",{"class":"hljs-title function_"},["extractStyledDataFromNode"]]," = (",["$","span",{"class":"hljs-params"},[]],"\n",["$","span",{"class":"hljs-params"},["  node: t.TaggedTemplateExpression | t.CallExpression,"]],"\n",["$","span",{"class":"hljs-params"},["  meta: Metadata"]],"\n",["$","span",{"class":"hljs-params"},[]],") => {\n  ",["$","span",{"class":"hljs-comment"},["// 使用模板字符串"]],"\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isTaggedTemplateExpression"]],"(node)) {\n    ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-title function_"},["extractStyledDataFromTemplateLiteral"]],"(node, meta);\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 使用函数调用"]],"\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isCallExpression"]],"(node)) {\n    ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-title function_"},["extractStyledDataFromObjectLiteral"]],"(node, meta);\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 提取不到信息"]],"\n  ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-literal"},["undefined"]],";\n};"]]]],["$","p",{},["构建新节点的函数被定义在 ",["$","a",{"href":"https://github.com/atlassian-labs/compiled/blob/ba66b35b82be513bf206d46c4adbdd7aefa3f7f1/packages/babel-plugin/src/utils/ast-builders.tsx#L455-L496","rel":"external nofollow noreferrer"},[["$","code",{},["packages/babel-plugin/src/utils/ast-builders.tsx"]]]]," 文件中："]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-keyword"},["export"]]," ",["$","span",{"class":"hljs-keyword"},["const"]]," buildStyledComponent = (\n  ",["$","span",{"class":"hljs-attr"},["tag"]],": ",["$","span",{"class":"hljs-title class_"},["Tag"]],",\n  ",["$","span",{"class":"hljs-attr"},["cssOutput"]],": ",["$","span",{"class":"hljs-title class_"},["CSSOutput"]],",\n  ",["$","span",{"class":"hljs-attr"},["meta"]],": ",["$","span",{"class":"hljs-title class_"},["Metadata"]],"\n): t.",["$","span",{"class":"hljs-property"},["Node"]]," => {\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," ",["$","span",{"class":"hljs-attr"},["unconditionalCss"]],": ",["$","span",{"class":"hljs-built_in"},["string"]],"[] = [];\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," ",["$","span",{"class":"hljs-attr"},["logicalCss"]],": ",["$","span",{"class":"hljs-title class_"},["CssItem"]],"[] = [];\n\n  cssOutput.",["$","span",{"class":"hljs-property"},["css"]],".",["$","span",{"class":"hljs-title function_"},["forEach"]],"(",["$","span",{"class":"hljs-function"},["(",["$","span",{"class":"hljs-params"},["item"]],") =>"]]," {\n    ",["$","span",{"class":"hljs-keyword"},["if"]]," (item.",["$","span",{"class":"hljs-property"},["type"]]," === ",["$","span",{"class":"hljs-string"},["'logical'"]],") {\n      logicalCss.",["$","span",{"class":"hljs-title function_"},["push"]],"(item);\n    } ",["$","span",{"class":"hljs-keyword"},["else"]]," {\n      unconditionalCss.",["$","span",{"class":"hljs-title function_"},["push"]],"(",["$","span",{"class":"hljs-title function_"},["getItemCss"]],"(item));\n    }\n  });\n\n  ",["$","span",{"class":"hljs-comment"},["// 去重，只保留最后一个"]],"\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," uniqueUnconditionalCssOutput = ",["$","span",{"class":"hljs-title function_"},["transformCss"]],"(unconditionalCss.",["$","span",{"class":"hljs-title function_"},["join"]],"(",["$","span",{"class":"hljs-string"},["''"]],"));\n\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," logicalCssOutput = ",["$","span",{"class":"hljs-title function_"},["transformItemCss"]],"({\n    ",["$","span",{"class":"hljs-attr"},["css"]],": logicalCss,\n    ",["$","span",{"class":"hljs-attr"},["variables"]],": cssOutput.",["$","span",{"class":"hljs-property"},["variables"]],",\n  });\n\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," sheets = [\n    ...uniqueUnconditionalCssOutput.",["$","span",{"class":"hljs-property"},["sheets"]],",\n    ...logicalCssOutput.",["$","span",{"class":"hljs-property"},["sheets"]],",\n  ];\n\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," classNames = [\n    ...[t.",["$","span",{"class":"hljs-title function_"},["stringLiteral"]],"(uniqueUnconditionalCssOutput.",["$","span",{"class":"hljs-property"},["classNames"]],".",["$","span",{"class":"hljs-title function_"},["join"]],"(",["$","span",{"class":"hljs-string"},["' '"]],"))],\n    ...logicalCssOutput.",["$","span",{"class":"hljs-property"},["classNames"]],",\n  ];\n\n  ",["$","span",{"class":"hljs-comment"},["// 返回构建好的节点"]],"\n  ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-title function_"},["styledTemplate"]],"(\n    {\n      classNames,\n      tag,\n      sheets,\n      ",["$","span",{"class":"hljs-attr"},["variables"]],": cssOutput.",["$","span",{"class":"hljs-property"},["variables"]],",\n    },\n    meta\n  );\n};"]]]],["$","p",{},["至于构建节点的操作，则是较为简单的字符串拼接："]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-keyword"},["const"]]," styledTemplate = (",["$","span",{"class":"hljs-attr"},["opts"]],": ",["$","span",{"class":"hljs-title class_"},["StyledTemplateOpts"]],", ",["$","span",{"class":"hljs-attr"},["meta"]],": ",["$","span",{"class":"hljs-title class_"},["Metadata"]],"): t.",["$","span",{"class":"hljs-property"},["Node"]]," => {\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," nonceAttribute = meta.",["$","span",{"class":"hljs-property"},["state"]],".",["$","span",{"class":"hljs-property"},["opts"]],".",["$","span",{"class":"hljs-property"},["nonce"]],"\n    ? ",["$","span",{"class":"hljs-string"},["`nonce={",["$","span",{"class":"hljs-subst"},["${meta.state.opts.nonce}"]],"}`"]],"\n    : ",["$","span",{"class":"hljs-string"},["''"]],";\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," ",["$","span",{"class":"hljs-attr"},["propsToDestructure"]],": ",["$","span",{"class":"hljs-built_in"},["string"]],"[] = [];\n\n  ",["$","span",{"class":"hljs-comment"},["// 提取样式"]],"\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," styleProp = opts.",["$","span",{"class":"hljs-property"},["variables"]],".",["$","span",{"class":"hljs-property"},["length"]],"\n    ? ",["$","span",{"class":"hljs-title function_"},["styledStyleProp"]],"(opts.",["$","span",{"class":"hljs-property"},["variables"]],", ",["$","span",{"class":"hljs-function"},["(",["$","span",{"class":"hljs-params"},["node"]],") =>"]]," {\n        ",["$","span",{"class":"hljs-keyword"},["const"]]," nestedArrowFunctionExpressionVisitor = {\n          ",["$","span",{"class":"hljs-attr"},["noScope"]],": ",["$","span",{"class":"hljs-literal"},["true"]],",\n          ",["$","span",{"class":"hljs-title class_"},["MemberExpression"]],"(",["$","span",{"class":"hljs-attr"},["path"]],": ",["$","span",{"class":"hljs-title class_"},["NodePath"]],"<t.",["$","span",{"class":"hljs-property"},["MemberExpression"]],">) {\n            ",["$","span",{"class":"hljs-keyword"},["const"]]," propsToDestructureFromMemberExpression =\n              ",["$","span",{"class":"hljs-title function_"},["handleMemberExpressionInStyledInterpolation"]],"(path);\n\n            propsToDestructure.",["$","span",{"class":"hljs-title function_"},["push"]],"(...propsToDestructureFromMemberExpression);\n          },\n          ",["$","span",{"class":"hljs-title class_"},["Identifier"]],"(",["$","span",{"class":"hljs-attr"},["path"]],": ",["$","span",{"class":"hljs-title class_"},["NodePath"]],"<t.",["$","span",{"class":"hljs-property"},["Identifier"]],">) {\n            ",["$","span",{"class":"hljs-keyword"},["const"]]," propsToDestructureFromIdentifier =\n              ",["$","span",{"class":"hljs-title function_"},["handleDestructuringInStyledInterpolation"]],"(path);\n\n            propsToDestructure.",["$","span",{"class":"hljs-title function_"},["push"]],"(...propsToDestructureFromIdentifier);\n          },\n        };\n\n        ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isArrowFunctionExpression"]],"(node)) {\n          ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-title function_"},["traverseStyledArrowFunctionExpression"]],"(\n            node,\n            nestedArrowFunctionExpressionVisitor\n          );\n        }\n\n        ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isBinaryExpression"]],"(node)) {\n          ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-title function_"},["traverseStyledBinaryExpression"]],"(\n            node,\n            nestedArrowFunctionExpressionVisitor\n          );\n        }\n\n        ",["$","span",{"class":"hljs-keyword"},["return"]]," node;\n      })\n    : t.",["$","span",{"class":"hljs-title function_"},["identifier"]],"(",["$","span",{"class":"hljs-string"},["'style'"]],");\n\n  ",["$","span",{"class":"hljs-keyword"},["let"]]," unconditionalClassNames = ",["$","span",{"class":"hljs-string"},["''"]],",\n    logicalClassNames = ",["$","span",{"class":"hljs-string"},["''"]],";\n\n  opts.",["$","span",{"class":"hljs-property"},["classNames"]],".",["$","span",{"class":"hljs-title function_"},["forEach"]],"(",["$","span",{"class":"hljs-function"},["(",["$","span",{"class":"hljs-params"},["item"]],") =>"]]," {\n    ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isStringLiteral"]],"(item)) {\n      unconditionalClassNames += ",["$","span",{"class":"hljs-string"},["`",["$","span",{"class":"hljs-subst"},["${item.value}"]]," `"]],";\n    } ",["$","span",{"class":"hljs-keyword"},["else"]]," ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isLogicalExpression"]],"(item)) {\n      logicalClassNames += ",["$","span",{"class":"hljs-string"},["`",["$","span",{"class":"hljs-subst"},["${generate(item).code}"]],", `"]],";\n    }\n  });\n\n  ",["$","span",{"class":"hljs-comment"},["// classNames 为生成好的类名"]],"\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," classNames = ",["$","span",{"class":"hljs-string"},["`\"",["$","span",{"class":"hljs-subst"},["${unconditionalClassNames.trim()}"]],"\", ",["$","span",{"class":"hljs-subst"},["${logicalClassNames}"]],"`"]],";\n\n  ",["$","span",{"class":"hljs-comment"},["// 此处的 <CC />, <CS /> 是上文中处理 import 时从 @compiled/react/runtime 中导入的组件"]],"\n  ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-title function_"},["template"]],"(\n    ",["$","span",{"class":"hljs-string"},["`"]],"\n",["$","span",{"class":"hljs-string"},["  forwardRef(({"]],"\n",["$","span",{"class":"hljs-string"},["    as: C = ",["$","span",{"class":"hljs-subst"},["${buildComponentTag(opts.tag)}"]],","]],"\n",["$","span",{"class":"hljs-string"},["    style,"]],"\n",["$","span",{"class":"hljs-string"},["    ",["$","span",{"class":"hljs-subst"},["${unique(propsToDestructure)"]]]],"\n",["$","span",{"class":"hljs-subst"},[["$","span",{"class":"hljs-string"},["      .map((prop) => prop + ",["$","span",{"class":"hljs-string"},["','"]],")"]]]],"\n",["$","span",{"class":"hljs-subst"},[["$","span",{"class":"hljs-string"},["      .join(",["$","span",{"class":"hljs-string"},["''"]],")}"]]]],"\n",["$","span",{"class":"hljs-string"},["    ...",["$","span",{"class":"hljs-subst"},["${PROPS_IDENTIFIER_NAME}"]]]],"\n",["$","span",{"class":"hljs-string"},["  }, ref) => ("]],"\n",["$","span",{"class":"hljs-string"},["    <CC>"]],"\n",["$","span",{"class":"hljs-string"},["      <CS ",["$","span",{"class":"hljs-subst"},["${nonceAttribute}"]],">{%%cssNode%%}</CS>"]],"\n",["$","span",{"class":"hljs-string"},["      <C"]],"\n",["$","span",{"class":"hljs-string"},["        {...",["$","span",{"class":"hljs-subst"},["${PROPS_IDENTIFIER_NAME}"]],"}"]],"\n",["$","span",{"class":"hljs-string"},["        style={%%styleProp%%}"]],"\n",["$","span",{"class":"hljs-string"},["        ref={ref}"]],"\n",["$","span",{"class":"hljs-string"},["        className={ax([",["$","span",{"class":"hljs-subst"},["${classNames}"]]," ",["$","span",{"class":"hljs-subst"},["${PROPS_IDENTIFIER_NAME}"]],".className])}"]],"\n",["$","span",{"class":"hljs-string"},["      />"]],"\n",["$","span",{"class":"hljs-string"},["    </CC>"]],"\n",["$","span",{"class":"hljs-string"},["  ));"]],"\n",["$","span",{"class":"hljs-string"},["`"]],",\n    {\n      ",["$","span",{"class":"hljs-attr"},["plugins"]],": [",["$","span",{"class":"hljs-string"},["'jsx'"]],"],\n    }\n  )({\n    styleProp,\n    ",["$","span",{"class":"hljs-attr"},["cssNode"]],": t.",["$","span",{"class":"hljs-title function_"},["arrayExpression"]],"(\n      ",["$","span",{"class":"hljs-title function_"},["unique"]],"(opts.",["$","span",{"class":"hljs-property"},["sheets"]],").",["$","span",{"class":"hljs-title function_"},["map"]],"(",["$","span",{"class":"hljs-function"},["(",["$","span",{"class":"hljs-params"},["sheet"]],") =>"]]," ",["$","span",{"class":"hljs-title function_"},["hoistSheet"]],"(sheet, meta))\n    ),\n  }) ",["$","span",{"class":"hljs-keyword"},["as"]]," t.",["$","span",{"class":"hljs-property"},["Node"]],";\n};"]]]],["$","p",{},["这样兜兜转转一圈下来，就将使用了 ",["$","code",{},["styled"]]," 方法生成的组件的样式抽离出来，变成了一个 compiled 的 Atomic CSS-in-JS 组件。"]],["$","h5",{"id":"css-prop"},[["$","code",{},["css"]]," Prop"]],["$","p",{},["compiled 首先 ",["$","a",{"href":"https://github.com/atlassian-labs/compiled/blob/8470616bde0cd47b2b41d63dedb0efa7bf6f299f/packages/react/src/jsx/jsx-local-namespace.ts","rel":"external nofollow noreferrer"},["增加了 ",["$","code",{},["css"]]," prop 的 TypeScript 定义"]],"，然后和 styled component 一样在 babel transform 的时候对这个 prop 进行特殊处理："]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-title class_"},["JSXOpeningElement"]],"(path, state) {\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (!state.",["$","span",{"class":"hljs-property"},["compiledImports"]],") {\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 处理 css prop"]],"\n  ",["$","span",{"class":"hljs-title function_"},["visitCssPropPath"]],"(path, { ",["$","span",{"class":"hljs-attr"},["context"]],": ",["$","span",{"class":"hljs-string"},["'root'"]],", state, ",["$","span",{"class":"hljs-attr"},["parentPath"]],": path });\n},"]]]],["$","p",{},["相比于 styled component 繁复的处理方式，",["$","code",{},["css"]]," prop 的处理看起来简洁了许多："]],["$","pre",{},[["$","code",{"class":"hljs typescript"},[["$","span",{"class":"hljs-keyword"},["export"]]," ",["$","span",{"class":"hljs-keyword"},["const"]]," visitCssPropPath = (\n  ",["$","span",{"class":"hljs-attr"},["path"]],": ",["$","span",{"class":"hljs-title class_"},["NodePath"]],"<t.",["$","span",{"class":"hljs-property"},["JSXOpeningElement"]],">,\n  ",["$","span",{"class":"hljs-attr"},["meta"]],": ",["$","span",{"class":"hljs-title class_"},["Metadata"]],"\n): ",["$","span",{"class":"hljs-function"},[["$","span",{"class":"hljs-params"},["void"]]," =>"]]," {\n  ",["$","span",{"class":"hljs-keyword"},["let"]]," cssPropIndex = -",["$","span",{"class":"hljs-number"},["1"]],";\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," cssProp = path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["attributes"]],".",["$","span",{"class":"hljs-title function_"},["find"]],"(\n    (attr, index): attr is t.",["$","span",{"class":"hljs-property"},["JSXAttribute"]]," => {\n      ",["$","span",{"class":"hljs-keyword"},["if"]]," (t.",["$","span",{"class":"hljs-title function_"},["isJSXAttribute"]],"(attr) && attr.",["$","span",{"class":"hljs-property"},["name"]],".",["$","span",{"class":"hljs-property"},["name"]]," === ",["$","span",{"class":"hljs-string"},["'css'"]],") {\n        cssPropIndex = index;\n        ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-literal"},["true"]],";\n      }\n\n      ",["$","span",{"class":"hljs-keyword"},["return"]]," ",["$","span",{"class":"hljs-literal"},["false"]],";\n    }\n  );\n\n  ",["$","span",{"class":"hljs-comment"},["// 不存在 css prop 就不进行处理了"]],"\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (!cssProp || !cssProp.",["$","span",{"class":"hljs-property"},["value"]],") {\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 从 css props 中提取样式信息"]],"\n  ",["$","span",{"class":"hljs-keyword"},["const"]]," cssOutput = ",["$","span",{"class":"hljs-title function_"},["buildCss"]],"(",["$","span",{"class":"hljs-title function_"},["getJsxAttributeExpression"]],"(cssProp), meta);\n\n  ",["$","span",{"class":"hljs-comment"},["// 删除 css prop"]],"\n  path.",["$","span",{"class":"hljs-property"},["node"]],".",["$","span",{"class":"hljs-property"},["attributes"]],".",["$","span",{"class":"hljs-title function_"},["splice"]],"(cssPropIndex, ",["$","span",{"class":"hljs-number"},["1"]],");\n\n  ",["$","span",{"class":"hljs-comment"},["// 没有样式信息"]],"\n  ",["$","span",{"class":"hljs-keyword"},["if"]]," (!cssOutput.",["$","span",{"class":"hljs-property"},["css"]],".",["$","span",{"class":"hljs-property"},["length"]],") {\n    ",["$","span",{"class":"hljs-keyword"},["return"]],";\n  }\n\n  ",["$","span",{"class":"hljs-comment"},["// 构建并替换节点"]],"\n  path.",["$","span",{"class":"hljs-property"},["parentPath"]],".",["$","span",{"class":"hljs-title function_"},["replaceWith"]],"(\n    ",["$","span",{"class":"hljs-title function_"},["buildCompiledComponent"]],"(\n      path.",["$","span",{"class":"hljs-property"},["parentPath"]],".",["$","span",{"class":"hljs-property"},["node"]]," ",["$","span",{"class":"hljs-keyword"},["as"]]," t.",["$","span",{"class":"hljs-property"},["JSXElement"]],",\n      cssOutput,\n      meta\n    )\n  );\n};"]]]],["$","p",{},["构建新节点的 ",["$","code",{},["buildCompiledComponent"]]," 函数被定义在 ",["$","a",{"href":"https://github.com/atlassian-labs/compiled/blob/ba66b35b82be513bf206d46c4adbdd7aefa3f7f1/packages/babel-plugin/src/utils/ast-builders.tsx#L567-L651","rel":"external nofollow noreferrer"},[["$","code",{},["packages/babel-plugin/src/utils/ast-builders.tsx"]]]]," 文件中，这个函数主要完成了以下操作："]],["$","ol",{},[["$","li",{},["合并现有的 ",["$","code",{},["className"]],"；"]],["$","li",{},["处理 ",["$","code",{},["css"]]," prop 中的样式；"]],["$","li",{},["生成 compiled 的 Atomic CSS-in-JS 组件。"]]]],["$","p",{},["这样就将组件的 ",["$","code",{},["css"]]," 参数拆成了两部分 —— 静态的样式和附加到原组件的 ",["$","code",{},["className"]]," 参数值。"]],["$","h4",{"id":"其他"},["其他"]],["$","p",{},["微软最近开源的 ",["$","a",{"href":"https://github.com/microsoft/griffel","rel":"external nofollow noreferrer"},["Griffel"]]," 既支持运行时模式，又支持预编译模式，同时拥有着更佳的 TypeScript 支持，不失为一个好的选择。这个库目前驱动了微软官方的 ",["$","a",{"href":"https://developer.microsoft.com/en-us/fluentui","rel":"external nofollow noreferrer"},["Fluent UI"]],"。"]],["$","h2",{"id":"后记"},["后记"]],["$","p",{},["以上就是本文要介绍关于 Atomic CSS 的全部内容了。"]],["$","p",{},["虽然 Atomic CSS-in-JS 是 React 生态系统中新涌起的一股潮流，但在使用前一定要三思 —— 这个方案到底符不符合项目的需求，而不是盲目地「为了使用而使用」，给将来的维护工作埋雷，但如果使用它能带来显而易见的好处，那么何乐而不为呢？"]],["$","p",{},["笔者才疏学浅，只是在前人的基础之上做了一些微小的工作而已，文章中如有错误欢迎在评论区指正。感谢 ",["$","a",{"href":"https://skk.moe","rel":"external nofollow noreferrer"},["Sukka"]]," 大佬在本文编写过程中的指导。感谢 ",["$","a",{"href":"https://github.com/liby","rel":"external nofollow noreferrer"},["Byran Lee"]]," 指出本文中的错误。"]],["$","h2",{"id":"参考资料-2"},["参考资料"]],["$","ol",{},[["$","li",{},[["$","a",{"href":"https://sebastienlorber.com/atomic-css-in-js","rel":"external nofollow noreferrer"},["Atomic CSS-in-JS"]],"，Sébastien Lorber，2020 年 4 月 27 日。"]],["$","li",{},[["$","a",{"href":"https://mongkii.com/blog/2021-07-26-talk-about-atomic-css","rel":"external nofollow noreferrer"},["聊聊原子类（Atomic CSS）"]],"，Mongkii，2021 年 7 月 26 日。"]],["$","li",{},[["$","a",{"href":"http://acgtofe.com/posts/2014/09/valuable-theories-of-css","rel":"external nofollow noreferrer"},["值得参考的 CSS 理论：OOCSS、SMACSS 与 BEM"]],"，ACGTOFE，2014 年 9 月 30 日。"]],["$","li",{},[["$","a",{"href":"https://tailwindcss.com/docs/utility-first","rel":"external nofollow noreferrer"},["Utility-First Fundamentals"]],"，Tailwind CSS。"]]]]],"thumb":"https://s1.baoshuo.ren/2022/07/23/R2LQrmhBxc3PEFy.webp","date":"2022-07-23","updated":"2022-07-23","isoDate":"2022-07-23T09:30:29.000Z","isoUpdate":"2022-07-23T23:10:23.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"前端","url":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","url":"/tags/CSS/"},{"name":"Atomic CSS","url":"/tags/Atomic-CSS/"},{"name":"Tailwind","url":"/tags/Tailwind/"}],"license":null,"permalink":"https://blog.baoshuo.ren/post/atomic-css-in-js/","url":"/post/atomic-css-in-js/","prev":null,"next":{"title":"使用 GitHub Actions 自动申请与部署 SSL 证书","url":"/post/actions-ssl-cert/"},"toc":{"0":{"0":{"0":{"text":"规则分类","id":"规则分类"},"1":{"text":"命名规则","id":"命名规则"},"2":{"text":"最小化适配深度","id":"最小化适配深度"},"text":"SMACSS","id":"smacss"},"1":{"text":"BEM","id":"bem"},"2":{"text":"CSS Modules","id":"css-modules"},"3":{"text":"Utility-First CSS","id":"utility-first-css"},"text":"CSS 编写方法的发展历程","id":"css-编写方法的发展历程"},"1":{"0":{"text":"传统 CSS 编写方式的缺点","id":"传统-css-编写方式的缺点"},"1":{"text":"更小的构建产物","id":"更小的构建产物"},"2":{"text":"处理 CSS 规则的插入顺序","id":"处理-css-规则的插入顺序"},"3":{"0":{"text":"Styletron","id":"styletron"},"1":{"text":"Fela","id":"fela"},"2":{"text":"vanilla-extract","id":"vanilla-extract"},"3":{"text":"style9","id":"style9"},"4":{"0":{"text":"Styled Components","id":"styled-components"},"1":{"text":"css Prop","id":"css-prop"},"text":"compiled","id":"compiled"},"5":{"text":"其他","id":"其他"},"text":"经典实现","id":"经典实现"},"text":"新时代，来临了 —— Atomic CSS-in-JS","id":"新时代，来临了-——-atomic-css-in-js"},"2":{"text":"后记","id":"后记"},"3":{"text":"参考资料","id":"参考资料-2"}},"hasToc":true,"comments":true,"wordCount":"约 4.9 千字"}},"__N_SSG":true}