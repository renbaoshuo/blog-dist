{"pageProps":{"title":"浅谈跨域资源共享（CORS） - 宝硕博客","post":{"title":"浅谈跨域资源共享（CORS）","excerpt":"跨域资源共享（CORS）是一种基于 HTTP 头来让网页的受限资源能够被其他域名的页面访问的一种机制。通过该机制，页面能够自由地使用不同源的图片、样式、脚本、iframes 以及视频。 在通常情况下，一些跨域的请求会被同源策略禁止。而 CORS 定义了一种方式，可以允许 Web 应用服务器进行跨源访问控制，从而使得跨源数据传输得以安全进行。 ","content":[["$","p",{},["跨域资源共享（CORS）是一种基于 HTTP 头来让网页的受限资源能够被其他域名的页面访问的一种机制。通过该机制，页面能够自由地使用不同源（cross-origin）的图片、样式、脚本、iframes 以及视频。"]],["$","p",{},["在通常情况下，一些跨域的请求（特别是 ajax）会被同源策略（same-origin policy）禁止。而 CORS 定义了一种方式，可以允许 Web 应用服务器进行跨源访问控制，从而使得跨源数据传输得以安全进行。"]],["$","hr",{},[]],["$","p",{},["目前几乎所有现代浏览器都支持 CORS ，可以在 ",["$","a",{"href":"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7","rel":"external nofollow noreferrer"},["MDN"]]," 上找到有关浏览器兼容性的信息。"]],["$","p",{},["浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。",["$","em",{},["这两个术语并不属于 Fetch 规范。"]]]],["$","h2",{"id":"简单请求"},["简单请求"]],["$","p",{},["某些请求不会触发 CORS 预检请求。本文中称这样的请求为「简单请求」。"]],["$","h3",{"id":"定义"},["定义"]],["$","p",{},["若请求满足所有下述条件则该请求可被视为「简单请求」："]],["$","ol",{},[["$","li",{},["请求方法为 ",["$","code",{},["HEAD"]],"，",["$","code",{},["GET"]]," 或 ",["$","code",{},["POST"]]," 。"]],["$","li",{},["除了被用户代理自动设置的字段以及在 Fetch 规范中被定义为 ",["$","a",{"href":"https://fetch.spec.whatwg.org/#forbidden-header-name","rel":"external nofollow noreferrer"},["禁用头名称"]]," 的字段之外，HTTP 头信息只允许包含 Fetch 规范定义的 ",["$","a",{"href":"https://fetch.spec.whatwg.org/#cors-safelisted-request-header","rel":"external nofollow noreferrer"},["对 CORS 安全的首部字段集合"]]," ：",["$","ul",{},[["$","li",{},[["$","code",{},["Accept"]]]],["$","li",{},[["$","code",{},["Accept-Language"]]]],["$","li",{},[["$","code",{},["Content-Language"]]]],["$","li",{},[["$","code",{},["Last-Event-ID"]]]],["$","li",{},[["$","code",{},["Content-Type"]]," 仅限于三个值：",["$","code",{},["application/x-www-form-urlencoded"]],"、",["$","code",{},["multipart/form-data"]]," 或 ",["$","code",{},["text/plain"]]]]]]]],["$","li",{},["请求中的任意 ",["$","code",{},["XMLHttpRequestUpload"]]," 对象均没有注册任何事件监听器；",["$","code",{},["XMLHttpRequestUpload"]]," 对象可以使用 ",["$","code",{},["XMLHttpRequest.upload"]]," 属性访问。"]],["$","li",{},["请求中没有使用 ",["$","code",{},["ReadableStream"]]," 对象。"]]]],["$","p",{},["简单请求的设计是为了兼容表单（form），因为历史上表单就一直可以发出跨域请求。"]],["$","h3",{"id":"基本流程"},["基本流程"]],["$","p",{},["对于简单请求，浏览器会直接发出 CORS 请求。具体来说，就是增加一个名为 ",["$","code",{},["Origin"]]," 的字段到 HTTP 头中。"]],["$","pre",{},[["$","code",{"class":"hljs http"},[["$","span",{"class":"hljs-keyword"},["GET"]]," ",["$","span",{"class":"hljs-string"},["/cors"]]," ",["$","span",{"class":"hljs-meta"},["HTTP/1.1"]],"\n",["$","span",{"class":"hljs-attribute"},["Origin"]],["$","span",{"class":"hljs-punctuation"},[": "]],"http://foo.example\n",["$","span",{"class":"hljs-attribute"},["Host"]],["$","span",{"class":"hljs-punctuation"},[": "]],"foo.example\n",["$","span",{"class":"hljs-attribute"},["Accept-Language"]],["$","span",{"class":"hljs-punctuation"},[": "]],"zh-CN\n",["$","span",{"class":"hljs-attribute"},["Connection"]],["$","span",{"class":"hljs-punctuation"},[": "]],"keep-alive\n",["$","span",{"class":"hljs-attribute"},["User-Agent"]],["$","span",{"class":"hljs-punctuation"},[": "]],"Mozilla/5.0..."]]]],["$","p",{},["上面的头信息中，",["$","code",{},["Origin"]]," 字段用来说明本次请求来自哪个源，服务器端根据这个值决定是否同意这个请求。"]],["$","p",{},["如果 ",["$","code",{},["Origin"]]," 指定的源在许可范围内，服务器返回的响应头会添加以下几个字段："]],["$","ul",{},[["$","li",{},[["$","code",{},["Access-Control-Allow-Origin"]]," 字段表明服务器允许的请求源，其值要么为请求时 Origin 字段的值，要么为 ",["$","code",{},["*"]]," 。"]],["$","li",{},[["$","code",{},["Access-Control-Allow-Credentials"]]," 字段表明服务器是否允许发送凭据信息，该字段是可选的，默认情况下不允许发送凭据信息。"]],["$","li",{},[["$","code",{},["Access-Control-Expose-Headers"]]," 字段表明服务器指定的允许获取的 HTTP 头字段，该字段是可选的。"]]]],["$","p",{},["如果 ",["$","code",{},["Origin"]]," 指定的源不在许可范围内，服务器会返回一个不带 ",["$","code",{},["Access-Control-Allow-Origin"]]," 字段的正常的 HTTP 回应。当浏览器发现没有包含这个字段就知道请求出错了，会抛出一个异常。需要注意的是，这种错误的 HTTP 响应码有可能是 200 或 204 ，因此无法通过状态码识别。"]],["$","h3",{"id":"代码示例"},["代码示例"]],["$","pre",{},[["$","code",{"class":"hljs javascript"},[["$","span",{"class":"hljs-title function_"},["fetch"]],"(",["$","span",{"class":"hljs-string"},["'https://baoshuo.ren'"]],", {\n  ",["$","span",{"class":"hljs-attr"},["mode"]],": ",["$","span",{"class":"hljs-string"},["'no-cors'"]],",\n});"]]]],["$","h2",{"id":"非简单请求-——-预检请求"},["非简单请求 —— 预检请求"]],["$","p",{},["上面提到，CORS 请求除了简单请求外还有非简单请求。简单来说，非简单请求时对服务器有特殊要求的请求，比如请求方法是 ",["$","code",{},["PUT"]]," 或 ",["$","code",{},["DELETE"]]," ，或者 HTTP 头中 ",["$","code",{},["Content-Type"]]," 字段的值不是上文所述的那三个「对 CORS 安全的 ",["$","code",{},["Content-type"]]," 字段值」。"]],["$","h3",{"id":"基本流程-2"},["基本流程"]],["$","p",{},["非简单请求的 CORS 请求，会在正式通信之前增加一次称为「预检」（preflight）的 HTTP 查询请求。"]],["$","p",{},[["$","img",{"src":"https://s1.baoshuo.ren/2021/10/02/Nt9o2cX7gWzuMCr.png","alt":"","loading":"lazy"},[]]]],["$","p",{},["从上面的报文中可以看到，浏览器先发送了一个使用 ",["$","code",{},["OPTIONS"]]," 方法的「预检请求」。OPTIONS 是 HTTP/1.1 协议中定义的方法，用以从服务器获取更多信息。该方法不会对服务器资源产生影响。预检请求中同时携带了下面两个首部字段："]],["$","pre",{},[["$","code",{"class":"hljs http"},[["$","span",{"class":"hljs-attribute"},["Access-Control-Request-Method"]],["$","span",{"class":"hljs-punctuation"},[": "]],"POST\n",["$","span",{"class":"hljs-attribute"},["Access-Control-Request-Headers"]],["$","span",{"class":"hljs-punctuation"},[": "]],"X-PINGOTHER, Content-Type"]]]],["$","ul",{},[["$","li",{},[["$","code",{},["Access-Control-Request-Method"]]," 字段将告知服务器实际请求将要使用的方法。"]],["$","li",{},[["$","code",{},["Access-Control-Request-Headers"]]," 字段将告知服务器实际请求将要携带的自定义请求首部字段。"]]]],["$","p",{},["服务器将据此决定是否允许实际请求，并返回相应的响应。"]],["$","pre",{},[["$","code",{"class":"hljs http"},[["$","span",{"class":"hljs-attribute"},["Access-Control-Allow-Origin"]],["$","span",{"class":"hljs-punctuation"},[": "]],"http://foo.example\n",["$","span",{"class":"hljs-attribute"},["Access-Control-Allow-Methods"]],["$","span",{"class":"hljs-punctuation"},[": "]],"POST, GET, OPTIONS\n",["$","span",{"class":"hljs-attribute"},["Access-Control-Allow-Headers"]],["$","span",{"class":"hljs-punctuation"},[": "]],"X-PINGOTHER, Content-Type\n",["$","span",{"class":"hljs-attribute"},["Access-Control-Allow-Credentials"]],["$","span",{"class":"hljs-punctuation"},[": "]],"true\n",["$","span",{"class":"hljs-attribute"},["Access-Control-Max-Age"]],["$","span",{"class":"hljs-punctuation"},[": "]],"86400"]]]],["$","ul",{},[["$","li",{},[["$","code",{},["Access-Control-Allow-Origin"]]," 字段与简单请求时并无差异。"]],["$","li",{},[["$","code",{},["Access-Control-Allow-Methods"]]," 字段表明服务器允许哪些方法发起请求。"]],["$","li",{},[["$","code",{},["Access-Control-Allow-Headers"]]," 字段表明服务器允许请求头中携带的额外字段。"]],["$","li",{},[["$","code",{},["Access-Control-Allow-Credentials"]]," 字段与简单请求时并无差异。"]],["$","li",{},[["$","code",{},["Access-Control-Max-Age"]]," 字段表明该响应的有效时间，在有效时间内浏览器无须为同一请求再次发起预检请求。需要注意的是浏览器自身维护了一个最大有效时间，如果该字段的值超出了浏览器维护的最大有效时间则不会生效。"]]]],["$","p",{},["如果服务器「否定」了一个预检请求，也会返回一个正常的 HTTP 回应，但不包含任何与 CORS 相关的 HTTP 头信息字段。此时浏览器就会认定服务器不同意预检请求，并抛出一个错误。"]],["$","p",{},["一旦通过了预检请求，接下来的步骤就都和简单请求一样了，此处不过多赘述。"]],["$","h3",{"id":"代码示例-2"},["代码示例"]],["$","pre",{},[["$","code",{"class":"hljs javascript"},[["$","span",{"class":"hljs-title function_"},["fetch"]],"(",["$","span",{"class":"hljs-string"},["'https://baoshuo.ren'"]],", {\n  ",["$","span",{"class":"hljs-attr"},["mode"]],": ",["$","span",{"class":"hljs-string"},["'cors'"]],",\n});"]]]],["$","h2",{"id":"附带身份凭证的-cors-请求"},["附带身份凭证的 CORS 请求"]],["$","p",{},["上文中提到，CORS 请求默认不发送凭据信息（Cookie 和 HTTP 认证信息），如果要向服务器发送凭据，不仅需要服务器指定 HTTP 头的 ",["$","code",{},["Access-Control-Allow-Credentials"]]," 字段，还需要在请求时指明是否发送凭据信息。"]],["$","h3",{"id":"代码示例-3"},["代码示例"]],["$","p",{},["使用 ",["$","code",{},["XmlHttpRequest"]]," 向服务器发起 CORS 请求时，需要将 ",["$","code",{},["withCredentials"]]," 标志设置为 ",["$","code",{},["true"]]," 。"]],["$","pre",{},[["$","code",{"class":"hljs javascript"},[["$","span",{"class":"hljs-keyword"},["var"]]," xhr = ",["$","span",{"class":"hljs-keyword"},["new"]]," ",["$","span",{"class":"hljs-title class_"},["XMLHttpRequest"]],"();\nxhr.",["$","span",{"class":"hljs-title function_"},["open"]],"(",["$","span",{"class":"hljs-string"},["'GET'"]],", ",["$","span",{"class":"hljs-string"},["'https://baoshuo.ren'"]],", ",["$","span",{"class":"hljs-literal"},["true"]],");\nxhr.",["$","span",{"class":"hljs-property"},["withCredentials"]]," = ",["$","span",{"class":"hljs-literal"},["true"]],";\nxhr.",["$","span",{"class":"hljs-property"},["onreadystatechange"]]," = handler; ",["$","span",{"class":"hljs-comment"},["// 此处的 Handler 需要自行定义"]],"\nxhr.",["$","span",{"class":"hljs-title function_"},["send"]],"();"]]]],["$","p",{},["使用 fetch 进行请求时则需要设置 ",["$","code",{},["credentials"]]," 为 ",["$","code",{},["include"]]," 才能使浏览器向跨域源发送包含凭据的请求。"]],["$","pre",{},[["$","code",{"class":"hljs javascript"},[["$","span",{"class":"hljs-title function_"},["fetch"]],"(",["$","span",{"class":"hljs-string"},["'https://baoshuo.ren'"]],", {\n  ",["$","span",{"class":"hljs-attr"},["credentials"]],": ",["$","span",{"class":"hljs-string"},["'include'"]],",\n});"]]]],["$","h2",{"id":"与-jsonp-的比较"},["与 JSONP 的比较"]],["$","p",{},["CORS 与 JSONP 的使用目的是相同的，但是 CORS 比 JSONP 更强大。"]],["$","p",{},["JSONP 的缺点是只支持 GET 请求，而 CORS 则支持所有类型的 HTTP 请求。如果网站需要兼容老式浏览器或者需要向不支持 CORS 的网站请求数据仍然需要使用 JSONP 。"]],["$","h2",{"id":"参考资料"},["参考资料"]],["$","ol",{},[["$","li",{},[["$","a",{"href":"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS","rel":"external nofollow noreferrer"},["跨源资源共享（CORS）"]],"，MDN Web Docs，2021 年 8 月 8 日。"]],["$","li",{},[["$","a",{"href":"https://www.ruanyifeng.com/blog/2016/04/cors.html","rel":"external nofollow noreferrer"},["跨域资源共享 CORS 详解"]],"，阮一峰的网络日志，2016 年 4 月 12 日。"]],["$","li",{},[["$","a",{"href":"https://zh.wikipedia.org/wiki/%E8%B7%A8%E4%BE%86%E6%BA%90%E8%B3%87%E6%BA%90%E5%85%B1%E4%BA%AB","rel":"external nofollow noreferrer"},["跨域资源共享"]],"，维基百科，2021 年 5 月 3 日。"]],["$","li",{},["3.2. CORS protocol，",["$","a",{"href":"https://fetch.spec.whatwg.org/#http-cors-protocol","rel":"external nofollow noreferrer"},["Fetch Standard"]],"，2021 年 9 月 30 日。"]],["$","li",{},["参数，",["$","a",{"href":"https://developer.mozilla.org/zh-CN/docs/Web/API/fetch#%E5%8F%82%E6%95%B0","rel":"external nofollow noreferrer"},["WorkerOrGlobalScope.fetch()"]],"，MDN Web Docs，2021 年 9 月 1 日。"]]]]],"thumb":"https://s1.baoshuo.ren/2021/10/02/6YfLj17HUV4e9Wd.png","date":"2021-10-02","updated":"2021-10-02","isoDate":"2021-10-02T14:24:02.000Z","isoUpdate":"2021-10-02T14:24:02.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"Web","url":"/tags/Web/"},{"name":"HTTP","url":"/tags/HTTP/"},{"name":"JavaScript","url":"/tags/JavaScript/"}],"license":null,"permalink":"https://blog.baoshuo.ren/post/cors/","url":"/post/cors/","prev":{"title":"USTC Hackergame 2021 Write Up","url":"/post/ustc-hackergame-2021-write-up/"},"next":{"title":"NOI Linux 2.0 上手体验","url":"/post/noi-linux-2/"},"toc":{"0":{"0":{"text":"定义","id":"定义"},"1":{"text":"基本流程","id":"基本流程"},"2":{"text":"代码示例","id":"代码示例"},"text":"简单请求","id":"简单请求"},"1":{"0":{"text":"基本流程","id":"基本流程-2"},"1":{"text":"代码示例","id":"代码示例-2"},"text":"非简单请求 —— 预检请求","id":"非简单请求-——-预检请求"},"2":{"0":{"text":"代码示例","id":"代码示例-3"},"text":"附带身份凭证的 CORS 请求","id":"附带身份凭证的-cors-请求"},"3":{"text":"与 JSONP 的比较","id":"与-jsonp-的比较"},"4":{"text":"参考资料","id":"参考资料"}},"hasToc":true,"comments":true,"wordCount":"约 1.8 千字"}},"__N_SSG":true}