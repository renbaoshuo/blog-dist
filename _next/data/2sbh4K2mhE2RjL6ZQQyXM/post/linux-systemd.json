{"pageProps":{"title":"Linux Systemd 入门 - 宝硕博客","post":{"title":"Linux Systemd 入门","excerpt":"Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。","content":"<p>Systemd 是 Linux 电脑操作系统之下的一套中央化系统及设置管理程序，包括有守护进程、程序库以及应用软件，由 Lennart Poettering 带头开发。其开发目标是提供更优秀的框架以表示系统服务间的依赖关系，并依此实现系统初始化时服务的并行启动，同时达到降低 Shell 的系统开销的效果，最终代替现在常用的 System V 与 BSD 风格 init 程序。</p>\n<span id=\"more\"></span>\n<p>目前绝大多数的 Linux 发行版都已采用 systemd 代替原来的 System V。</p>\n<h2 id=\"常用命令列表\"><a class=\"anchor\" href=\"#常用命令列表\"></a>常用命令列表</h2>\n<ul>\n<li>列出所有已加载的单元：<code>systemctl list-units</code></li>\n<li>查看指定的单元的配置：<code>systemctl cat [serviceName]</code> <em>(e.g. <code>systemctl cat sshd.service</code>)</em></li>\n<li>修改指定单元的配置：<code>systemctl edit [serviceName]</code> <em>(e.g. <code>systemctl edit sshd.service</code>)</em></li>\n<li>查看指定的单元的运行状态： <code>systemctl status [serviceName|pid]</code> <em>(e.g. <code>systemctl status sshd.service</code>)</em>\n<ul>\n<li>如果指定了单元名称，那么显示指定单元的运行时状态信息，以及这些单元最近的日志数据。</li>\n<li>如果指定了 PID ，那么显示指定 PID 所属单元的运行时状态信息，以及这些单元最近的日志数据。</li>\n<li>如果未指定任何单元或 PID ，那么显示整个系统的状态信息， 此时若与 <code>--all</code> 连用，则同时显示所有已加载的单元（可以用 <code>-t</code> 限定单元类型）的状态信息。</li>\n</ul>\n</li>\n<li>启动指定的单元：<code>systemctl start [serviceName]</code> <em>(e.g. <code>systemctl start sshd.service</code>)</em>\n<ul>\n<li>被指定的单元必须是已经被加载的。</li>\n</ul>\n</li>\n<li>重新启动指定的单元：<code>systemctl restart [serviceName]</code> <em>(e.g. <code>systemctl restart sshd.service</code>)</em>\n<ul>\n<li>如果指定的单元没有启动，则直接启动它们。</li>\n</ul>\n</li>\n<li>停止指定的单元：<code>systemctl stop [serviceName]</code> <em>(e.g. <code>systemctl stop sshd.service</code>)</em></li>\n<li>启用指定的单元：<code>systemctl enable [serviceName]</code> <em>(e.g. <code>systemctl enable sshd.service</code>)</em></li>\n<li>停用指定的单元：<code>systemctl disable [serviceName]</code> <em>(e.g. <code>systemctl disable sshd.service</code>)</em></li>\n<li>重新加载指定的单元的配置：<code>systemctl reload [serviceName]</code> <em>(e.g. <code>systemctl reload sshd.service</code>)</em></li>\n<li>重新加载所有已修改过的配置文件：<code>systemctl daemon-reload</code></li>\n</ul>\n<h2 id=\"开机启动\"><a class=\"anchor\" href=\"#开机启动\"></a>开机启动</h2>\n<p>对于那些支持 Systemd 的软件，安装的时候，会自动在 <code>/usr/lib/systemd/system</code> 目录添加一个配置文件。</p>\n<p>如果你想让该软件开机启动，就执行下面的命令（以 <code>sshd.service</code> 为例）。</p>\n<pre><code class=\"hljs bash\">sudo systemctl <span class=\"hljs-built_in\">enable</span> sshd.service</code></pre>\n<p>上面的命令相当于在 <code>/etc/systemd/system</code> 目录添加一个符号链接，指向 <code>/usr/lib/systemd/system</code> 里面的 <code>sshd.service</code> 文件。</p>\n<p>这是因为开机时，Systemd 只执行 <code>/etc/systemd/system</code> 目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p>\n<h2 id=\"unit\"><a class=\"anchor\" href=\"#unit\"></a>Unit</h2>\n<h3 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\"></a>配置文件</h3>\n<p>对于那些没有原生支持 Systemd 的软件，可以自行编写配置文件来达到开机自启的目的。</p>\n<blockquote>\n<p>我曾经为 Sakura Frp 编写过一个脚本：<a href=\"https://getfrp.sh\">getfrp.sh</a> <sup>（<a href=\"https://gist.github.com/renbaoshuo/9c351b3e5750a2f6d453d035e0fd071a#file-getfrp-sh-L200-L213\">存档</a> 于 GitHub Gist）</sup> ，里面便是使用了自行编写配置文件的方法。</p>\n</blockquote>\n<p>以 <code>sshd.service</code> 这个配置文件为例子，来分析一下 Systemd 的配置文件：</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># /lib/systemd/system/ssh.service</span>\n\n<span class=\"hljs-section\">[Unit]</span>\n<span class=\"hljs-attr\">Description</span>=OpenBSD Secure Shell server\n<span class=\"hljs-attr\">Documentation</span>=man:sshd(<span class=\"hljs-number\">8</span>) man:sshd_config(<span class=\"hljs-number\">5</span>)\n<span class=\"hljs-attr\">After</span>=network.target auditd.service\n<span class=\"hljs-attr\">ConditionPathExists</span>=!/etc/ssh/sshd_not_to_be_run\n\n<span class=\"hljs-section\">[Service]</span>\n<span class=\"hljs-attr\">EnvironmentFile</span>=-/etc/default/ssh\n<span class=\"hljs-attr\">ExecStartPre</span>=/usr/sbin/sshd -t\n<span class=\"hljs-attr\">ExecStart</span>=/usr/sbin/sshd -D <span class=\"hljs-variable\">$SSHD_OPTS</span>\n<span class=\"hljs-attr\">ExecReload</span>=/usr/sbin/sshd -t\n<span class=\"hljs-attr\">ExecReload</span>=/bin/kill -HUP <span class=\"hljs-variable\">$MAINPID</span>\n<span class=\"hljs-attr\">KillMode</span>=process\n<span class=\"hljs-attr\">Restart</span>=<span class=\"hljs-literal\">on</span>-failure\n<span class=\"hljs-attr\">RestartPreventExitStatus</span>=<span class=\"hljs-number\">255</span>\n<span class=\"hljs-attr\">Type</span>=notify\n<span class=\"hljs-attr\">RuntimeDirectory</span>=sshd\n<span class=\"hljs-attr\">RuntimeDirectoryMode</span>=<span class=\"hljs-number\">0755</span>\n\n<span class=\"hljs-section\">[Install]</span>\n<span class=\"hljs-attr\">WantedBy</span>=multi-user.target\n<span class=\"hljs-attr\">Alias</span>=sshd.service</code></pre>\n<p>可以看出这个文件一共有三个部分：<code>[Unit]</code>, <code>[Service]</code> 和 <code>[Install]</code> 。</p>\n<p>配置项通常是可以重复的，但靠后的配置项会取代前面同名的配置项。<br>\n因此，如果你想要将某项的设定值归零，可以在该配置所在部分的结尾添加一个空值项（如 <code>After=</code>），就将该设定归零了。</p>\n<h4 id=\"unit-启动顺序与依赖关系\"><a class=\"anchor\" href=\"#unit-启动顺序与依赖关系\"></a>[Unit]: 启动顺序与依赖关系</h4>\n<p>这个部分主要有以下几个配置项：</p>\n<ul>\n<li><code>Description</code>: 当前服务的简易说明</li>\n<li><code>Documentation</code>: 文档位置（以空格分隔）\n<ul>\n<li>该项可以是网页链接，也可以是 manpages 的名称，亦或是文件路径。</li>\n</ul>\n</li>\n<li><code>Before</code>: 在哪些服务之前启动\n<ul>\n<li>本字段不涉及依赖关系，只是说明了启动顺序</li>\n</ul>\n</li>\n<li><code>After</code>: 在哪些服务之后启动\n<ul>\n<li>本字段不涉及依赖关系，只是说明了启动顺序</li>\n<li>以 <code>sshd.service</code> 中的配置为例，该服务需要在 <code>network.target</code> 和 <code>auditd.service</code> 之后启动</li>\n</ul>\n</li>\n<li><code>Wants</code>: 弱依赖的服务\n<ul>\n<li>若被依赖的服务被停止，这个服务不需要停止</li>\n</ul>\n</li>\n<li><code>Requires</code>: 强依赖的服务\n<ul>\n<li>若被依赖的服务没有启动，则不能启动这个服务</li>\n<li>若被依赖的服务被停止，则这个服务也必须停止</li>\n</ul>\n</li>\n<li><code>Conflicts</code>: 冲突的服务\n<ul>\n<li>如果列出的服务中有一个已经运行，那么就不能启动这个服务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"service-启动行为\"><a class=\"anchor\" href=\"#service-启动行为\"></a>[Service]: 启动行为</h4>\n<p>这个部分主要有以下几个配置项：</p>\n<ul>\n<li><code>Type</code>: 启动类型。默认值为 <code>simple</code> ，可选值如下：\n<ul>\n<li><code>simple</code>: 使 <code>ExecStart</code> 项启动的项成为主进程</li>\n<li><code>forking</code>: <code>ExecStart</code> 项将会以 <code>fork()</code> 的形式启动，此时父进程将会退出，子进程将成为主进程</li>\n<li><code>oneshot</code>: 类似于 <code>simple</code> ，但只执行一次，Systemd 会等它执行完，才启动其他服务</li>\n<li><code>dbus</code>: 类似于 <code>simple</code> ，但会等待 <code>D-Bus</code> 信号后启动</li>\n<li><code>notify</code>: 类似于 <code>simple</code> ，启动结束后会发出通知信号，然后 Systemd 再启动其他服务</li>\n<li><code>idle</code>: 类似于 <code>simple</code> ，但是要等到其他任务都执行完，才会启动该服务。\n<ul>\n<li>这个选项的其中一种使用场合是为让该服务的输出，不与其他服务的输出相混合</li>\n<li>这个选项的另外一种使用场合是执行只需要再开机的时候执行一次的程序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>Environment</code>: 指定环境变量</li>\n<li><code>EnvironmentFile</code>: 环境变量配置文件，该文件内部的 <code>key=value</code> 形式的配置可以在当前文件中以 <code>$key</code> 获取</li>\n<li><code>ExecStart</code>: 服务启动时执行的命令</li>\n<li><code>ExecReload</code>: 服务重启时执行的命令</li>\n<li><code>ExecStop</code>: 服务停止时执行的命令</li>\n<li><code>ExecStartPre</code>: 服务启动之前执行的命令</li>\n<li><code>ExecStartPost</code>: 服务启动之后执行的命令</li>\n<li><code>ExecStopPost</code>: 服务停止之后执行的命令</li>\n<li><code>Restart</code>: 服务退出后的重启方式，默认值为 <code>no</code>\n<ul>\n<li><code>no</code>: 进程退出后不会重启</li>\n<li><code>on-success</code>: 当进程正常退出时（退出状态码为 0）重启</li>\n<li><code>on-failure</code>: 当进程非正常退出时（退出状态码不为 0、被信号终止、程序超时）重启</li>\n<li><code>on-abnormal</code>: 当进程被信号终止或程序超时时重启</li>\n<li><code>on-abort</code>: 当收到没有捕捉到的信号终止时重启</li>\n<li><code>on-watchdog</code>: 当进程超时退出时重启</li>\n<li><code>always</code>: 总是重启（不论原因）</li>\n<li>对于守护进程，推荐设为 <code>on-failure</code>。对于那些允许发生错误退出的服务，可以设为 <code>on-abnormal</code>。</li>\n</ul>\n</li>\n<li><code>RemainAfterExit</code>: 退出后是否重新启动\n<ul>\n<li>当设定为 <code>RemainAfterExit=1</code> 时，则当这个服务所属的所有程序都终止之后，此服务会再尝试启动。这对于 <code>Type=oneshot</code> 的服务很有帮助</li>\n</ul>\n</li>\n<li><code>TimeoutSec</code>: 当这个服务在启动或停止时失败进入&quot;强制结束&quot;状态的等待秒数。</li>\n<li><code>KillMode</code>: 定义 Systemd 如何停止这个服务，默认值为 <code>control-group</code>\n<ul>\n<li><code>control-group</code>: 服务停止时关闭此控制组中所有的进程</li>\n<li><code>process</code>: 服务停止时只终止主进程（ExecStart 接的后面那串指令）</li>\n<li><code>mixed</code>: 主进程将收到 <strong>SIGTERM</strong> 信号，子进程收到 <strong>SIGKILL</strong> 信号</li>\n<li><code>none</code>: 没有进程会被杀掉，只是执行服务的 stop 命令</li>\n</ul>\n</li>\n<li><code>RestartSec</code>: 表示 Systemd 重启服务之前，需要等待的秒数（默认是 100ms）</li>\n</ul>\n<p>所有的启动设置之前，都可以加上一个连词号 (<code>-</code>) ，表示 「抑制错误」 ，即发生错误的时候，不影响其他命令的执行。以 <code>sshd.service</code> 为例，文件中的 <code>EnvironmentFile=-/etc/sysconfig/sshd</code>（注意等号后面的那个连词号），表示 <code>/etc/sysconfig/sshd</code> 文件不存在，也不会抛出错误。</p>\n<h4 id=\"install-安装行为\"><a class=\"anchor\" href=\"#install-安装行为\"></a>[Install]: 安装行为</h4>\n<p>这个部分主要有以下几个配置项：</p>\n<ul>\n<li><code>WantedBy</code>: 表示该服务所在的 Target\n<ul>\n<li>一般来说，服务性质的单元都是挂在 <code>multi-user.target</code> 下的</li>\n</ul>\n</li>\n<li><code>Also</code>: 当该服务被启用时需要同时启用的单元</li>\n<li><code>Alias</code>: 指定创建软链接时链接至本单元配置文件的别名文件</li>\n</ul>\n<h3 id=\"模板实例\"><a class=\"anchor\" href=\"#模板实例\"></a>模板实例</h3>\n<p>此处以 <code>getty@.service</code> 文件为例，来分析一下它是如何做到使用一个配置文件启动多个服务的：</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># /lib/systemd/system/getty@.service</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#  SPDX-License-Identifier: LGPL-2.1+</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#  This file is part of systemd.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#  systemd is free software; you can redistribute it and/or modify it</span>\n<span class=\"hljs-comment\">#  under the terms of the GNU Lesser General Public License as published by</span>\n<span class=\"hljs-comment\">#  the Free Software Foundation; either version 2.1 of the License, or</span>\n<span class=\"hljs-comment\">#  (at your option) any later version.</span>\n\n<span class=\"hljs-section\">[Unit]</span>\n<span class=\"hljs-attr\">Description</span>=Getty <span class=\"hljs-literal\">on</span> %I\n<span class=\"hljs-attr\">Documentation</span>=man:agetty(<span class=\"hljs-number\">8</span>) man:systemd-getty-generator(<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">Documentation</span>=http://<span class=\"hljs-number\">0</span>pointer.de/blog/projects/serial-console.html\n<span class=\"hljs-attr\">After</span>=systemd-user-sessions.service plymouth-quit-wait.service getty-pre.target\n<span class=\"hljs-attr\">After</span>=rc-local.service\n\n<span class=\"hljs-comment\"># If additional gettys are spawned during boot then we should make</span>\n<span class=\"hljs-comment\"># sure that this is synchronized before getty.target, even though</span>\n<span class=\"hljs-comment\"># getty.target didn&#x27;t actually pull it in.</span>\n<span class=\"hljs-attr\">Before</span>=getty.target\n<span class=\"hljs-attr\">IgnoreOnIsolate</span>=<span class=\"hljs-literal\">yes</span>\n\n<span class=\"hljs-comment\"># IgnoreOnIsolate causes issues with sulogin, if someone isolates</span>\n<span class=\"hljs-comment\"># rescue.target or starts rescue.service from multi-user.target or</span>\n<span class=\"hljs-comment\"># graphical.target.</span>\n<span class=\"hljs-attr\">Conflicts</span>=rescue.service\n<span class=\"hljs-attr\">Before</span>=rescue.service\n\n<span class=\"hljs-comment\"># On systems without virtual consoles, don&#x27;t start any getty. Note</span>\n<span class=\"hljs-comment\"># that serial gettys are covered by serial-getty@.service, not this</span>\n<span class=\"hljs-comment\"># unit.</span>\n<span class=\"hljs-attr\">ConditionPathExists</span>=/dev/tty0\n\n<span class=\"hljs-section\">[Service]</span>\n<span class=\"hljs-comment\"># the VT is cleared by TTYVTDisallocate</span>\n<span class=\"hljs-comment\"># The &#x27;-o&#x27; option value tells agetty to replace &#x27;login&#x27; arguments with an</span>\n<span class=\"hljs-comment\"># option to preserve environment (-p), followed by &#x27;--&#x27; for safety, and then</span>\n<span class=\"hljs-comment\"># the entered username.</span>\n<span class=\"hljs-attr\">ExecStart</span>=-/sbin/agetty -o <span class=\"hljs-string\">&#x27;-p -- \\\\u&#x27;</span> --noclear %I <span class=\"hljs-variable\">$TERM</span>\n<span class=\"hljs-attr\">Type</span>=idle\n<span class=\"hljs-attr\">Restart</span>=always\n<span class=\"hljs-attr\">RestartSec</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">UtmpIdentifier</span>=%I\n<span class=\"hljs-attr\">TTYPath</span>=/dev/%I\n<span class=\"hljs-attr\">TTYReset</span>=<span class=\"hljs-literal\">yes</span>\n<span class=\"hljs-attr\">TTYVHangup</span>=<span class=\"hljs-literal\">yes</span>\n<span class=\"hljs-attr\">TTYVTDisallocate</span>=<span class=\"hljs-literal\">yes</span>\n<span class=\"hljs-attr\">KillMode</span>=process\n<span class=\"hljs-attr\">IgnoreSIGPIPE</span>=<span class=\"hljs-literal\">no</span>\n<span class=\"hljs-attr\">SendSIGHUP</span>=<span class=\"hljs-literal\">yes</span>\n\n<span class=\"hljs-comment\"># Unset locale for the console getty since the console has problems</span>\n<span class=\"hljs-comment\"># displaying some internationalized messages.</span>\n<span class=\"hljs-attr\">UnsetEnvironment</span>=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION\n\n<span class=\"hljs-section\">[Install]</span>\n<span class=\"hljs-attr\">WantedBy</span>=getty.target\n<span class=\"hljs-attr\">DefaultInstance</span>=tty1</code></pre>\n<p>运行 <code>systemctl status getty@tty1.service</code> 命令，可以看到如下图所示的输出：</p>\n<p><img src=\"https://s1.baoshuo.ren/2021/02/11/lhw1BzOUb7TRDrq.png\" alt=\"\" loading=\"lazy\"></p>\n<p>不难发现图中标橙色的字符与上方配置文件中的 <code>%I</code> 相对应，并且配置文件的名称也不是 <code>getty@tty1.service</code> ，而是 <code>getty@.service</code> ，这种配置文件叫做 「模板实例」 。</p>\n<p>启动时只需要在 <code>@</code> 后面添加需要填入 <code>%I</code> 位置的参数即可，如 <code>getty@tty9.service</code> 。</p>\n<h2 id=\"target\"><a class=\"anchor\" href=\"#target\"></a>Target</h2>\n<p>一般来说，常用的 Target 有两个：一个是 <code>multi-user.target</code> ，表示多用户命令行状态；另一个是 <code>graphical.target</code> ，表示图形用户状态（它依赖于 <code>multi-user.target</code>），这一点和 SysVinit 的运行级别很是相似。</p>\n<p>官方提供了一张非常清晰的 Target 依赖关系图：</p>\n<p><img src=\"https://s1.baoshuo.ren/2021/02/11/ubmqlLdiGeCtUg7.png\" alt=\"\" loading=\"lazy\"></p>\n<p>图源：<a href=\"https://www.freedesktop.org/software/systemd/man/bootup.html#System%20Manager%20Bootup\">https://www.freedesktop.org/software/systemd/man/bootup.html#System Manager Bootup</a></p>\n<h3 id=\"配置文件-t2\"><a class=\"anchor\" href=\"#配置文件-t2\"></a>配置文件</h3>\n<p>以 <code>multi-user.target</code> 这个文件为例子，来简要说明一下 Target 的配置文件中的主要项目：</p>\n<pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># /lib/systemd/system/multi-user.target</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#  SPDX-License-Identifier: LGPL-2.1+</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#  This file is part of systemd.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#  systemd is free software; you can redistribute it and/or modify it</span>\n<span class=\"hljs-comment\">#  under the terms of the GNU Lesser General Public License as published by</span>\n<span class=\"hljs-comment\">#  the Free Software Foundation; either version 2.1 of the License, or</span>\n<span class=\"hljs-comment\">#  (at your option) any later version.</span>\n\n<span class=\"hljs-section\">[Unit]</span>\n<span class=\"hljs-attr\">Description</span>=Multi-User System\n<span class=\"hljs-attr\">Documentation</span>=man:systemd.special(<span class=\"hljs-number\">7</span>)\n<span class=\"hljs-attr\">Requires</span>=basic.target\n<span class=\"hljs-attr\">Conflicts</span>=rescue.service rescue.target\n<span class=\"hljs-attr\">After</span>=basic.target rescue.service rescue.target\n<span class=\"hljs-attr\">AllowIsolate</span>=<span class=\"hljs-literal\">yes</span></code></pre>\n<ul>\n<li><code>Requires</code>: 要求于某个 Target 一起运行</li>\n<li><code>Conflicts</code>: 冲突的 Target</li>\n<li><code>After</code>: 在哪些 Target 之后启动</li>\n<li><code>AllowIsolate</code>: 是否允许使用 <code>systemctl isolate</code> 命令切换到这个 Target</li>\n</ul>\n<h2 id=\"参考资料-t6\"><a class=\"anchor\" href=\"#参考资料-t6\"></a>参考资料</h2>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Systemd\">Systemd - Wikipedia</a> <sup>（<a href=\"https://web.archive.org/web/20210210150200/https://en.wikipedia.org/wiki/Systemd\">存档</a> 于 <a href=\"https://archive.org\">互联网档案馆</a>）</sup></li>\n<li><a href=\"https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html\">Systemd - Ubuntu Manpages</a> <sup>（<a href=\"https://web.archive.org/web/20210210150518/https://manpages.ubuntu.com/manpages/bionic/zh_CN/man1/systemctl.1.html\">存档</a> 于 <a href=\"https://archive.org\">互联网档案馆</a>）</sup></li>\n<li><a href=\"http://linux.vbird.org/linux_basic/0560daemons.php\">第十七章 认识系统服务(daemons) - 鸟哥的 Linux 私房菜</a> <sup>（<a href=\"https://web.archive.org/web/20200810204650/http://linux.vbird.org/linux_basic/0560daemons.php\">存档</a> 于 <a href=\"https://archive.org\">互联网档案馆</a>）</sup></li>\n</ol>\n","thumb":"https://s1.baoshuo.ren/2021/08/17/bnP7pH3XR6IAx1U.png","date":"2021-02-11","updated":"2021-02-11","isoDate":"2021-02-11T16:06:31.000Z","isoUpdate":"2021-02-11T16:06:31.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"Linux","url":"/tags/Linux/"}],"license":null,"permalink":"https://blog.baoshuo.ren/post/linux-systemd/","prev":{"title":"浅谈网页「深色模式」的实现","url":"/post/darkmode/"},"next":{"title":"你好，2021 —— 博客迁移记录","url":"/post/hello-2021/"},"toc":{"1":{"text":"常用命令列表","id":"常用命令列表"},"2":{"text":"开机启动","id":"开机启动"},"3":{"1":{"1":{"text":"[Unit]: 启动顺序与依赖关系","id":"unit-启动顺序与依赖关系"},"2":{"text":"[Service]: 启动行为","id":"service-启动行为"},"3":{"text":"[Install]: 安装行为","id":"install-安装行为"},"text":"配置文件","id":"配置文件"},"2":{"text":"模板实例","id":"模板实例"},"text":"Unit","id":"unit"},"4":{"1":{"text":"配置文件","id":"配置文件-t2"},"text":"Target","id":"target"},"5":{"text":"参考资料","id":"参考资料-t6"}},"hasToc":true,"comments":true},"__post":true},"__N_SSG":true}