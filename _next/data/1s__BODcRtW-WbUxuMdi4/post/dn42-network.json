{"pageProps":{"title":"初探 DN42 网络 - 宝硕博客","post":{"title":"初探 DN42 网络","excerpt":"DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。","content":"<p>DN42 全称 Decentralized Network 42（42 号去中心网络），是一个大型、去中心化的 BGP 网络。DN42 的目的是模拟一个互联网。它使用了大量在目前互联网骨干上应用的技术（例如 BGP 和递归 DNS），可以很好地模拟一个真实的网络环境。</p><span id=more></span><p>DN42 适合以下类别的用户：</p><ul><li>想要研究网络技术，练习服务器、路由器等网络设备配置，甚至后续在真实互联网建立 AS 的用户。</li><li>已经拥有真实 AS ，但担心自己<a href=https://blog.cloudflare.com/how-verizon-and-a-bgp-optimizer-knocked-large-parts-of-the-internet-offline-today/ >配置错误广播出错误路由、干掉半个互联网</a>，希望有个地方测试的用户。</li></ul><p>DN42 不适合以下类别的用户：</p><ul><li>单纯想要保护隐私、规避网络审查的用户</li><li>在网内消耗大量流量，例如用于解锁流媒体服务的用户</li></ul><p>所以，DN42 的使用门槛还是比较高的。这与在真实互联网中一样，你要扮演一个 ISP （互联网服务提供商），注册自己的个人信息， ASN 号码，IPv4 和 IPv6 的地址池，并且使用 BGP 在自己的服务器上广播它们。你还要和其它的用户联系，和他们进行 Peering（对等互联），一步步进入完整的 DN42 网络。</p><hr><p>DN42 在 <code>172.20.0.0/14</code> 和 <code>fd00::/8</code> 上运行，而这两个 IP 段都是分配给内网使用的。换句话说，你在 DN42 上怎么折腾，都不会影响到服务器其它的互联网连接。</p><p>你可以通过加入 <a href=https://t.me/Dn42Chat>Telegram 群组</a> 或者 <a href=irc://irc.hackint.org/#dn42>IRC 频道</a> 来寻求帮助。</p><p>请注意，DN42 是一个测试网络，所有人都在帮助所有人。即使你不小心搞砸了，也没有人会指责你。</p><p>欢迎在搭建完成自己的内网以后与我进行对等互联，可以访问 <a href=https://dn42.baoshuo.ren>dn42.baoshuo.ren</a> 获取更多信息。</p><p>若无特别说明，本文中所使用的系统环境均为 <code>Ubuntu 20.04.2 LTS</code> ，本文中所有使用 <code>&lt;&gt;</code> 包裹的内容均需要自行替换。</p><h2 id=注册-dn42>注册 DN42</h2><p>在注册过程中会大量使用到一些 UNIX 工具（如 Git 、 GPG 等），所以最好使用 Linux 或者 macOS 系统完成整个流程，如果你正在使用 Windows 系统，那么可以使用 <a href=http://aka.ms/wsl>WSL</a> 。</p><h3 id=注册前的准备>注册前的准备</h3><ul><li>了解如何编写 RPSL （<a href=https://tools.ietf.org/html/rfc2622/ >RFC2622</a>） 格式的配置文件。</li><li>了解如何使用 <a href=https://zh.wikipedia.org/wiki/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1>CIDR</a> （<a href=https://tools.ietf.org/html/rfc1518>RFC1518</a>，<a href=https://tools.ietf.org/html/rfc1519>RFC1519</a>） 格式表示 IP 地址块。</li><li>熟悉 <a href=https://dn42.dev>DN42 Wiki</a> 中的 <a href=https://dn42.dev/howto/Getting-Started>Getting-Started</a> 、 <a href=https://dn42.dev/howto/Address-Space>Address Space</a> 页面中的内容。</li><li>在 <a href=https://git.dn42.dev>DN42 Git</a> 中有一个注册好的账户。</li><li>会使用英文与他人交流。</li></ul><h3 id=克隆-dn42-注册表-git-仓库>克隆 DN42 注册表 Git 仓库</h3><p>将 <a href=https://git.dn42.dev/dn42/registry>dn42/registry</a> 这个仓库 clone 到本地。</p><p>新建一个名为 <code>&lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/&lt;自定义名称&gt;</code> 的分支。</p><pre><code class=\"hljs bash\">git checkout -b &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/register</code></pre><h3 id=注册维护者>注册维护者</h3><p>在仓库的 <code>data/mntner</code> 目录下新建一个文件，命名为 <code>&lt;昵称&gt;-MNT</code> 。</p><p>文件内填入以下内容：</p><pre><code class=\"hljs rpsl\">mntner:             &lt;昵称&gt;-MNT\nadmin-c:            &lt;昵称&gt;-DN42\ntech-c:             &lt;昵称&gt;-DN42\nauth:               &lt;身份验证信息&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42</code></pre><p>示例：<a href=https://git.dn42.dev/dn42/registry/src/branch/master/data/mntner/BAOSHUO-MNT><code>data/mntner/BAOSHUO-MNT</code> at dn42/registry@master</a></p><ul><li><code>mntner</code> ：维护者（全称为 Maintainer），这个维护者的名称，与文件名相同。</li><li><code>admin-c</code> ：管理员联系信息（Admin Contact），需要指向 <a href=#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA>注册联系人</a> 一节中的 <code>person</code> 文件，一般为 <code>&lt;昵称&gt;-DN42</code> 。</li><li><code>tech-c</code> ：技术人员联系信息（Tech Contact），需要指向 <a href=#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA>注册联系人</a> 一节中的 <code>person</code> 文件，一般为 <code>&lt;昵称&gt;-DN42</code> 。</li><li><code>auth</code> ：身份验证信息，接受 <strong>GPG 公钥</strong> 和 <strong>SSH 公钥</strong> ，可以查看 <a href=https://dn42.dev/howto/Registry-Authentication>Registry Authentication</a> 页面获取详细信息。</li><li><code>mnt-by</code> ：由谁维护（全称为 Maintain by），此处需要指向这个维护者本身，即 <code>&lt;昵称&gt;-MNT</code> 。</li><li><code>source</code> ：信息来源，默认为 <code>DN42</code> 。</li></ul><h3 id=注册联系人>注册联系人</h3><p>在仓库的 <code>data/person</code> 目录下新建一个文件，命名为 <code>&lt;昵称&gt;-DN42</code> 。</p><pre><code class=\"hljs rpsl\">person:             &lt;姓名&gt;\ncontact:            &lt;邮箱&gt;\nnic-hdl:            &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42</code></pre><p>示例：<a href=https://git.dn42.dev/dn42/registry/src/branch/master/data/person/BAOSHUO-DN42><code>data/person/BAOSHUO-DN42</code> at dn42/registry@master</a></p><ul><li><code>person</code> ：姓名。</li><li><code>contact</code> ：联系方式，一般为邮箱。</li><li><code>nic-hdl</code> ：NIC 句柄（即 <a href=https://en.wikipedia.org/wiki/NIC_handle>NIC handle</a>），指向文件本身，与文件名相同。</li><li><code>mnt-by</code> ：由谁维护（全称为 Maintain by），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85>注册维护者</a> 一节中注册的的维护者信息。</li><li><code>source</code> ：固定为 <code>DN42</code>。</li></ul><h3 id=注册-asn>注册 ASN</h3><p>在国际互联网上，ASN 范围 <code>4200000000 - 4294967294</code> 是被保留以供私人使用的，而 DN42 占用的就是其中的一块： <code>4242420000 - 4242429999</code> 。目前 DN42 开放注册的 ASN 范围是 <code>4242420000 - 4242423999</code> ，只需要在这个区间里面挑一个没有被他人占用的号码即可。</p><p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 ASN 的工具: <a href=https://explorer.burble.com/free#/asn>DN42 Free ASN Explorer</a> 。访问该页面就会随机生成 10 个当前还未注册的 ASN 以便使用。</p><p>在仓库的 <code>data/aut-num</code> 目录下新建一个文件，命名为刚才选中的 AS 号码。</p><pre><code class=\"hljs rpsl\">aut-num:            &lt;AS 号码, 带 AS 前缀&gt;\nas-name:            &lt;AS 名称&gt;\ndescr:              &lt;AS 简介&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42</code></pre><p>示例：<a href=https://git.dn42.dev/dn42/registry/src/branch/master/data/aut-num/AS4242420247><code>data/aut-num/AS4242420247</code> at dn42/registry@master</a></p><ul><li><code>aut-num</code> ：AS 号，此处可以使用私有 AS 号码，也可以使用公网 AS 号码（不推荐）。</li><li><code>as-name</code> ：AS 的名称，可以设置为 <code>&lt;昵称&gt;-AS</code> 。</li><li><code>descr</code> ：（选填）AS 简介，随意填写。</li><li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA>注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA>注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85>注册维护者</a> 一节中注册的的维护者信息。</li><li><code>source</code> ：如果使用私有 AS 号码则此处填写 <code>DN42</code> ，否则填写 ASN 所对应的 RIR 名称。</li></ul><h3 id=注册-ipv4-地址块>注册 IPv4 地址块</h3><p><em>如果您想在 DN42 上创建一个 IPv6 Only 网络，请不要注册 IPv4 地址块，并忽略 <a href=#%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E8%AE%B0%E5%BD%95>添加路由记录</a> 一节中的 IPv4 部分。</em></p><p>在国际互联网上， <code>172.16.0.0/12</code> 是由 <a href=https://tools.ietf.org/html/rfc1918>RFC1918</a> 规定的由专用网络使用的 IP 地址块，而 DN42 占用的就是其中的一块： <code>172.20.0.0/14</code> 。目前 DN42 开放注册的地址块范围可以在 <a href=https://dn42.dev/howto/Address-Space#ipv4-address-space>Address Space</a> 页面上查看。</p><p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv4 地址块的网站，点击 <a href=https://explorer.burble.com/free#/4>DN42 Free IPv4 Explorer</a> 即可随机生成 10 个当前还未注册的 IPv4 地址块。</p><p>和在真实互联网上一样，DN42 的 IPv4 地址资源也是十分紧缺的，因此 IPv4 的申请原则是「够用就好」。如果节点数量足够少，只申请 <code>/28</code> 或 <code>/29</code> 大小的地址块就够用了。</p><p>在仓库的 <code>data/inetnum</code> 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p><pre><code class=\"hljs rpsl\">inetnum:            &lt;起始 IP 地址&gt; - &lt;结束 IP 地址&gt;\ncidr:               &lt;IP 地址块的 CIDR 格式&gt;\nnetname:            &lt;IP 地址块名称&gt;\ndescr:              &lt;IP 地址块简介&gt;\ncountry:            &lt;IP 地址块所属国家&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nstatus:             ASSIGNED\nsource:             DN42</code></pre><p>示例：<a href=https://git.dn42.dev/dn42/registry/src/branch/master/data/inetnum/172.23.250.64_26><code>data/inetnum/172.23.250.64_26</code> at dn42/registry@master</a></p><ul><li><code>inetnum</code> ：这个地址块的范围。</li><li><code>cidr</code> ：以 CIDR 格式表示的这个地址块的范围，含义与 <code>inetnum</code> 相同。</li><li><code>netname</code> ：这个地址块的名称。可以设置为 <code>&lt;昵称&gt;-IPV4</code> 。</li><li><code>descr</code> ：（选填）这个地址块的简介。</li><li><code>nserver</code> ：（选填）IP 地址反向解析的 DNS 服务器。</li><li><code>country</code> ：你的 <a href=https://zh.wikipedia.org/wiki/ISO_3166>ISO 3166</a> 国家代码，填 <code>CN</code> 代表中国大陆地区。</li><li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA>注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA>注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85>注册维护者</a> 一节中注册的的维护者信息。</li><li><code>status</code> ：固定为 <code>ASSIGNED</code>。</li><li><code>source</code> ：固定为 <code>DN42</code>。</li></ul><h3 id=注册-ipv6-地址块>注册 IPv6 地址块</h3><p>在国际互联网上， <code>fc00::/7</code> 是由 <a href=https://tools.ietf.org/html/rfc4193>RFC4193</a> 定义的 <a href=https://en.wikipedia.org/wiki/Unique_local_address>唯一本地地址</a>，而 DN42 占用的就是其中的一块： <code>fd00::/8</code> 。目前 DN42 开放注册的地址块范围可以在 <a href=https://dn42.dev/howto/Address-Space#ipv6-address-space>Address Space</a> 页面上查看。</p><p>DN42 Registry 的管理员 burble 提供了一个在线查看可用 IPv6 地址块的网站，点击 <a href=https://explorer.burble.com/free#/6>DN42 Free IPv6 Explorer</a> 即可随机生成 10 个当前还未注册的 IPv6 地址块。</p><p>在仓库的 <code>data/inet6num</code> 目录下新建一个文件，命名为 IPv6 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p><pre><code class=\"hljs rpsl\">inet6num:           &lt;起始 IPv6 地址&gt; - &lt;结束 IPv6 地址&gt;\ncidr:               &lt;IPv6 地址块的 CIDR 格式&gt;\nnetname:            &lt;IPv6 地址块名称&gt;\ndescr:              &lt;IPv6 地址块简介&gt;\ncountry:            &lt;IPv6 地址块所属国家&gt;\nadmin-c:            &lt;NIC 句柄&gt;\ntech-c:             &lt;NIC 句柄&gt;\nmnt-by:             &lt;维护者&gt;\nstatus:             ASSIGNED\nsource:             DN42</code></pre><p>示例：<a href=https://git.dn42.dev/dn42/registry/src/branch/master/data/inet6num/fd42:4242:247::_48><code>data/inet6num/fd42:4242:247::_48</code> at dn42/registry@master</a></p><ul><li><code>inet6num</code> ：这个地址块的范围。</li><li><code>cidr</code> ：使用 CIDR 格式表示的这个地址块的范围，含义与 <code>inet6num</code> 相同。</li><li><code>netname</code> ：这个地址块的名称。可以设置为 <code>&lt;昵称&gt;-IPV6</code> 。</li><li><code>descr</code> ：（选填）这个地址块的简介。</li><li><code>nserver</code> ：（选填）IP 地址反向解析的 DNS 服务器。</li><li><code>country</code> ：你的 <a href=https://zh.wikipedia.org/wiki/ISO_3166>ISO 3166</a> 国家代码，填 <code>CN</code> 代表中国大陆地区。</li><li><code>admin-c</code> ：管理员联系信息（Admin Contact），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA>注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>tech-c</code> ：技术员联系信息（Tech Contact），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E8%81%94%E7%B3%BB%E4%BA%BA>注册联系人</a> 一节中注册的 NIC 句柄。</li><li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85>注册维护者</a> 一节中注册的的维护者信息。</li><li><code>status</code> ：固定为 <code>ASSIGNED</code>。</li><li><code>source</code> ：固定为 <code>DN42</code>。</li></ul><h3 id=添加路由记录>添加路由记录</h3><p>在仓库的 <code>data/route</code> 目录下新建一个文件，命名为 IP 地址块的 CIDR 格式，并使用 <code>_</code> 代替 <code>/</code>。</p><pre><code class=\"hljs rpsl\">route:              &lt;IP 地址块的 CIDR 格式&gt;\ndescr:              &lt;简介&gt;\norigin:             &lt;AS 号码, 带 AS 前缀&gt;\nmnt-by:             &lt;维护者&gt;\nsource:             DN42</code></pre><ul><li><code>route</code> ：这个 IPv4 地址块的范围，CIDR 格式。</li><li><code>descr</code> ：（选填）路由简介。</li><li><code>origin</code> ：填写你的 AS 号码。</li><li><code>mnt-by</code> ：由谁维护（Maintain by），指向你在 <a href=#%E6%B3%A8%E5%86%8C%E7%BB%B4%E6%8A%A4%E8%80%85>注册维护者</a> 一节中注册的的维护者信息。</li><li><code>source</code> ：固定为 <code>DN42</code>。</li></ul><p>如需添加 IPv6 路由，将本节所述的 <code>route</code> 改为 <code>route6</code> 即可，此处不再赘述。</p><h3 id=上传更改到-dn42-注册表>上传更改到 DN42 注册表</h3><p>完成以上步骤之后，使用 <code>git diff</code> 查看文件变动，检查无误后，使用 <code>git add .</code> 暂存。</p><p><img src=https://s1.baoshuo.ren/2021/08/14/RhjwYHFGcaKUSye.png alt=\"\" loading=lazy></p><p>运行仓库根目录下的 <code>./check-my-stuff &lt;维护者&gt;</code> 检查文件内容是否有误，确定无误后，提交。</p><p>在提交时，如果需要使用 GPG 签名，需要在添加 <code>-S</code> 参数，如 <code>git commit -S</code> ；如果使用 SSH 签名，请直接使用 <code>git commit</code> 进行提交，待提交后再进行签名工作。</p><p>使用下面的命令进行签名：</p><pre><code class=\"hljs bash\">./sign-my-commit --ssh --key &lt;SSH 私钥文件&gt; &lt;维护者&gt;</code></pre><p>之后使用下面的命令上传即可：</p><pre><code class=\"hljs bash\">git push --set-upstream origin &lt;用户名&gt;-&lt;日期, YYYYMMDD&gt;/register</code></pre><p><img src=https://s1.baoshuo.ren/2021/04/04/1YwNjs8uvOJMFoq.png alt=\"\" loading=lazy></p><p>上传后在 DN42 Git 中切换到自己的分支，并创建一个合并请求，等待管理员审核。</p><h3 id=注意事项>注意事项</h3><ol><li>各个项目的键和值之间有一长串空格，键、冒号与空格的总长度必须是 20 个字符，且不能随意修改。为了编辑时的方便，注册表中提供了一个脚本 <code>fmt-my-stuff</code> ，只需要使用 <code>./fmt-my-stuff &lt;维护者&gt;</code> 即可自动完成此步骤。</li><li>DN42 Registry 的工作语言是英语。请使用英语完成全部流程，以免出现不必要的麻烦。</li><li>请认真对待管理员提出的更改请求，按照要求完成全部修改后直接上传到原分支下即可，无需再新开合并请求。</li><li>推荐使用随机的 IPv4 与 IPv6 地址块，避免与其他网络重复。请明白，DN42 并不是这些网络资源的权威注册机构。</li></ol><h2 id=dn42-bird2-使用入门>DN42 BIRD2 使用入门</h2><p>如无特别说明，本部分中所使用的 BIRD 版本为 <code>2.0.7</code> 。</p><h3 id=安装-bird2>安装 BIRD2</h3><pre><code class=\"hljs bash\">apt update\napt install bird2 -y</code></pre><p>一般情况下，执行此命令即可自动安装 BIRD2 并启动系统服务。</p><h3 id=编写-bird-配置文件>编写 BIRD 配置文件</h3><p>对于刚刚加入 DN42 网络的新人来说，推荐使用 <a href=https://dn42.dev/howto/Bird2#example-configuration>howto/Bird2 - DN42 Wiki</a> 中的示例配置以节省配置时间。</p><p>这套配置默认使用了 Multi Protocol BGP ，如果不想使用此功能请自行编写配置文件，如果没有 DN42 IPv4 地址需要去掉文件中的 IPv4 部分。</p><p>将以下配置写入到 <code>/etc/bird/bird.conf</code> 中：</p><pre><code class=\"hljs puppet\"><span class=hljs-keyword>define</span> <span class=hljs-section>OWNAS</span>       = &lt;AS 号&gt;;\n<span class=hljs-keyword>define</span> <span class=hljs-section>OWNIP</span>       = &lt;DN42 IPv4 地址&gt;;\n<span class=hljs-keyword>define</span> <span class=hljs-section>OWNIPv6</span>     = &lt;DN42 IPv6 地址&gt;;\n<span class=hljs-keyword>define</span> <span class=hljs-section>OWNNET</span>      = &lt;DN42 IPv4 地址块, CIDR 格式&gt;;\n<span class=hljs-keyword>define</span> <span class=hljs-section>OWNNETv6</span>    = &lt;DN42 IPv6 地址块, CIDR 格式&gt;;\n<span class=hljs-keyword>define</span> <span class=hljs-section>OWNNETSET</span>   = [ &lt;DN42 IPv4 地址块, CIDR 格式&gt;+ ];\n<span class=hljs-keyword>define</span> <span class=hljs-section>OWNNETSETv6</span> = [ &lt;DN42 IPv6 地址块, CIDR 格式&gt;+ ];\n\nrouter id OWNIP;\n\nprotocol <span class=hljs-keyword>device</span> &#123;\n    scan time <span class=hljs-number>10</span>;\n&#125;\n\n<span class=hljs-keyword>function</span> <span class=hljs-keyword>is_self_net</span>() &#123;\n    return net ~ OWNNETSET;\n&#125;\n\nfunction is_self_net_v6() &#123;\n    return net ~ OWNNETSETv6;\n&#125;\n\nfunction is_valid_network() &#123;\n    return net ~ [\n        172.20.0.0/14&#123;21,29&#125;, <span class=hljs-comment># dn42</span>\n        172.20.0.0/24&#123;28,32&#125;, <span class=hljs-comment># dn42 Anycast</span>\n        172.21.0.0/24&#123;28,32&#125;, <span class=hljs-comment># dn42 Anycast</span>\n        172.22.0.0/24&#123;28,32&#125;, <span class=hljs-comment># dn42 Anycast</span>\n        172.23.0.0/24&#123;28,32&#125;, <span class=hljs-comment># dn42 Anycast</span>\n        172.31.0.0/16+,       <span class=hljs-comment># ChaosVPN</span>\n        10.100.0.0/14+,       <span class=hljs-comment># ChaosVPN</span>\n        10.127.0.0/16&#123;16,32&#125;, <span class=hljs-comment># neonetwork</span>\n        10.0.0.0/8&#123;15,24&#125;     <span class=hljs-comment># Freifunk.net</span>\n    ];\n&#125;\n\nroa4 table dn42_roa;\nroa6 table dn42_roa_v6;\n\nprotocol <span class=hljs-keyword>static</span> &#123;\n    roa4 &#123; table dn42_roa; &#125;;\n    include <span class=hljs-string>&quot;/etc/bird/roa_dn42.conf&quot;</span>;\n&#125;;\n\nprotocol <span class=hljs-keyword>static</span> &#123;\n    roa6 &#123; table dn42_roa_v6; &#125;;\n    include <span class=hljs-string>&quot;/etc/bird/roa_dn42_v6.conf&quot;</span>;\n&#125;;\n\nfunction is_valid_network_v6() &#123;\n  return net ~ [\n    fd00::/8&#123;44,64&#125; <span class=hljs-comment># ULA address space as per RFC 4193</span>\n  ];\n&#125;\n\nprotocol <span class=hljs-keyword>kernel</span> &#123;\n    scan time <span class=hljs-number>20</span>;\n\n    ipv6 &#123;\n        <span class=hljs-keyword>import</span> none;\n        export filter &#123;\n            <span class=hljs-keyword>if</span> <span class=hljs-literal>source</span> = RTS_STATIC then reject;\n            krt_prefsrc = OWNIPv6;\n            accept;\n        &#125;;\n    &#125;;\n&#125;;\n\nprotocol <span class=hljs-keyword>kernel</span> &#123;\n    scan time <span class=hljs-number>20</span>;\n\n    ipv4 &#123;\n        <span class=hljs-keyword>import</span> none;\n        export filter &#123;\n            <span class=hljs-keyword>if</span> <span class=hljs-literal>source</span> = RTS_STATIC then reject;\n            krt_prefsrc = OWNIP;\n            accept;\n        &#125;;\n    &#125;;\n&#125;\n\nprotocol <span class=hljs-keyword>static</span> &#123;\n    route OWNNET reject;\n\n    ipv4 &#123;\n        <span class=hljs-keyword>import</span> all;\n        export none;\n    &#125;;\n&#125;\n\nprotocol <span class=hljs-keyword>static</span> &#123;\n    route OWNNETv6 reject;\n\n    ipv6 &#123;\n        <span class=hljs-keyword>import</span> all;\n        export none;\n    &#125;;\n&#125;\n\ntemplate bgp <span class=hljs-keyword>dnpeers</span> &#123;\n    local as OWNAS;\n    <span class=hljs-built_in>path</span> metric <span class=hljs-number>1</span>;\n\n    ipv4 &#123;\n        <span class=hljs-keyword>import</span> filter &#123;\n            <span class=hljs-keyword>if</span> is_valid_network() &amp;&amp; !is_self_net() then &#123;\n                <span class=hljs-keyword>if</span> (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then &#123;\n                    print <span class=hljs-string>&quot;[dn42] ROA check failed for &quot;</span>, net, <span class=hljs-string>&quot; ASN &quot;</span>, bgp_path.last;\n                    reject;\n                &#125;\n                <span class=hljs-keyword>accept</span>;\n            &#125;\n            reject;\n        &#125;;\n\n        export <span class=hljs-keyword>filter</span> &#123;\n            <span class=hljs-keyword>if</span> is_valid_network() &amp;&amp; <span class=hljs-literal>source</span> ~ [RTS_STATIC, RTS_BGP] then accept;\n            reject;\n        &#125;;\n        import limit 1000 action block;\n    &#125;;\n\n    <span class=hljs-keyword>ipv6</span> &#123;\n        <span class=hljs-keyword>import</span> filter &#123;\n            <span class=hljs-keyword>if</span> is_valid_network_v6() &amp;&amp; !is_self_net_v6() then &#123;\n                <span class=hljs-keyword>if</span> (roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID) then &#123;\n                    print <span class=hljs-string>&quot;[dn42] ROA check failed for &quot;</span>, net, <span class=hljs-string>&quot; ASN &quot;</span>, bgp_path.last;\n                    reject;\n                &#125;\n                <span class=hljs-keyword>accept</span>;\n            &#125;\n            reject;\n        &#125;;\n        export <span class=hljs-keyword>filter</span> &#123;\n            <span class=hljs-keyword>if</span> is_valid_network_v6() &amp;&amp; <span class=hljs-literal>source</span> ~ [RTS_STATIC, RTS_BGP] then accept;\n            reject;\n        &#125;;\n        import limit 1000 action block;\n    &#125;;\n&#125;\n\n\ninclude <span class=hljs-string>&quot;/etc/bird/peers/*&quot;</span>;</code></pre><p>然后在 <code>/etc/bird</code> 目录下创建一个文件夹，命名为 <code>peers</code> ，以便后续存储配置文件使用。</p><p>如果想更深入的学习如何编写 BIRD 配置文件，推荐查看 <a href=https://github.com/moesoha/bird-bgp-kickstart>BIRD 与 BGP 的新手开场</a> 和 <a href=\"https://bird.network.cz/?get_doc&amp;f=bird.html&amp;v=20\">BIRD 官方文档</a> 。</p><h3 id=下载-roa-配置文件>下载 ROA 配置文件</h3><pre><code class=\"hljs bash\">wget -4 -O /tmp/dn42_roa.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf &amp;&amp; <span class=hljs-built_in>mv</span> -f /tmp/dn42_roa.conf /etc/bird/dn42_roa.conf\nwget -4 -O /tmp/dn42_roa_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf &amp;&amp; <span class=hljs-built_in>mv</span> -f /tmp/dn42_roa_v6.conf /etc/bird/dn42_roa_v6.conf</code></pre><p>使用此命令即可将 ROA 文件下载到本机以供使用。</p><p>还需要将此命令添加为定时任务，推荐设置为每小时运行一次，否则不会更新到最新的 ROA ，每次更新后都需要使用 <code>birdc configure</code> 命令重载 BIRD 配置。</p><h3 id=重新加载-bird-配置>重新加载 BIRD 配置</h3><pre><code class=\"hljs bash\">birdc configure</code></pre><p>使用该命令重新加载 BIRD 配置，并使用 <code>birdc show protocol</code> 查看状态。</p><p><img src=https://s1.baoshuo.ren/2021/08/16/ZSPe6a3fpuDATG2.png alt=\"\" loading=lazy></p><h2 id=dn42-wireguard-使用入门>DN42 WireGuard 使用入门</h2><p>WireGuard 是一种简单易用、速度快、现代化的 VPN ，它利用了最先进的加密技术，并使用 UDP 协议传输数据。WireGuard 设计为通用 VPN ，可在嵌入式设备和超级计算机上运行，​​ 适用于许多不同的环境。WireGuard 起初是专为 Linux 编写并发布的，后来被移植到各个平台上。在 <a href=http://WireGuard.com>WireGuard.com</a> 上可以找到它的 <a href=https://www.wireguard.com/papers/wireguard.pdf>技术白皮书</a> 。</p><h3 id=安装-wireguard>安装 WireGuard</h3><pre><code class=\"hljs bash\">apt update\napt install wireguard -y</code></pre><p>一般情况下，执行此命令即可直接安装 WireGuard 和 WireGuard Tools ，无需额外操作。</p><h3 id=生成公钥与私钥>生成公钥与私钥</h3><pre><code class=\"hljs bash\">wg genkey | <span class=hljs-built_in>tee</span> privatekey | wg pubkey &gt; publickey</code></pre><p>使用此命令即可在当前目录下生成两个名叫 <code>privatekey</code> 和 <code>publickey</code> 的文件，分别代表私钥和公钥。</p><h3 id=搭建-wireguard-隧道>搭建 WireGuard 隧道</h3><p>搭建 WireGuard 隧道非常简便，只需要生成一对公钥与私钥并与对等端交换公钥即可。</p><p>如果需要通过 WireGuard 隧道建立 BGP 会话，不能使用 WireGuard 内建的多 Peer 功能，必须为每个对等端创建一条隧道。</p><p>在 <code>/etc/wireguard</code> 目录下新建一个名为 <code>&lt;隧道名&gt;.conf</code> 的文件：</p><pre><code class=\"hljs ini\"><span class=hljs-section>[Interface]</span>\n<span class=hljs-attr>PrivateKey</span> = &lt;私钥&gt;\n<span class=hljs-attr>ListenPort</span> = &lt;监听端口&gt;\n<span class=hljs-attr>PostUp</span>     = ip address add &lt;链路本地地址&gt;/<span class=hljs-number>64</span> dev %i\n<span class=hljs-attr>PostUp</span>     = ip addr add &lt;本地 IPv6 地址&gt;/<span class=hljs-number>128</span> peer &lt;对端 IPv6 地址&gt;/<span class=hljs-number>128</span> dev %i\n<span class=hljs-attr>PostUp</span>     = ip addr add &lt;本地 IPv4 地址&gt;/<span class=hljs-number>32</span> peer &lt;对端 IPv4 地址&gt;/<span class=hljs-number>32</span> dev %i\n<span class=hljs-attr>Table</span>      = <span class=hljs-literal>off</span></code></pre><ul><li><code>PrivateKey</code> ：私钥。</li><li><code>ListenPort</code> ：监听端口。</li><li>第一个 <code>PostUp</code> ：（可选，推荐）添加链路本地地址。</li><li>第二个 <code>PostUp</code> ：（可选）添加本地和对等端的 DN42 IPv6 地址。</li><li>第三个 <code>PostUp</code> ：（可选）添加本地和对等端的 DN42 IPv4 地址。</li><li><code>Table</code> ：必须设定为 <code>off</code> （不导入系统路由表），否则会导致系统断网。</li></ul><p>当使用链路本地地址建立 BGP 会话时，可以不设置 DN42 IPv4 和 DN42 IPv6 地址，但是机器上必须有一张网卡上绑定了本机的 DN42 IPv4 和 DN42 IPv6 地址。同理，如果不使用链路本地地址建立 BGP 会话则无需添加链路本地地址。</p><pre><code class=\"hljs ini\"><span class=hljs-section>[Peer]</span>\n<span class=hljs-attr>PublicKey</span>           = &lt;对端公钥&gt;\n<span class=hljs-attr>PresharedKey</span>        = &lt;对端预共享密钥&gt;\n<span class=hljs-attr>Endpoint</span>            = &lt;对端 IP/域名 和 端口号&gt;\n<span class=hljs-attr>PersistentKeepalive</span> = <span class=hljs-number>30</span>\n<span class=hljs-attr>AllowedIPs</span>          = <span class=hljs-number>10.0</span>.<span class=hljs-number>0.0</span>/<span class=hljs-number>8</span>, <span class=hljs-number>172.20</span>.<span class=hljs-number>0.0</span>/<span class=hljs-number>14</span>, <span class=hljs-number>172.31</span>.<span class=hljs-number>0.0</span>/<span class=hljs-number>16</span>, fd00::/<span class=hljs-number>8</span>, fe80::/<span class=hljs-number>64</span></code></pre><ul><li><code>PublicKey</code> ：对端公钥。</li><li><code>PresharedKey</code> ：（可选）对端预共享密钥。</li><li><code>Endpoint</code> ：（可选）对端的连接域名/IP 及端口号。<br>如果对端没有公网 IP 地址，需要本地设置为被动模式则无需填写此项。</li><li><code>PersistentKeepalive</code> ：（可选）每隔多少秒发送一次握手信息防止连接被中断并更新对端 IP 。<br>如果本地没有公网 IP 地址，必须配置此项。</li><li><code>AllowedIPs</code> ：允许使用 WireGuard 转发流量的 IP 地址段。</li></ul><p>之后使用 <code>wg-quick up &lt;隧道名&gt;</code> 来启动隧道即可。</p><p>如需开机自启，可以在测试无误后执行 <code>systemctl enable wg-quick@&lt;隧道名&gt;</code> 。</p><h3 id=检测隧道状态>检测隧道状态</h3><pre><code class=\"hljs bash\">wg show &lt;隧道名&gt;</code></pre><p>使用该命令即可查看隧道状态。</p><p><img src=https://s1.baoshuo.ren/2021/08/16/wxgUJNHnQAXFMdS.png alt=\"\" loading=lazy></p><p>如上图所示，当 <code>latest handshake</code> 时间较近且 <code>transfer</code> 有收有发时可以认为隧道正常。</p><p>如需查看所有隧道的状态，直接使用 <code>wg</code> 命令即可。</p><h2 id=与其他网络进行对等互联>与其他网络进行对等互联</h2><h3 id=系统配置>系统配置</h3><p>在 DN42 网络中，没有绝对意义上的客户端，每个人都可能是他人的路由器，经常会出现数据包的来源网卡与回复使用的网卡不一致的情况，因此需要打开 Linux 内核的数据包转发功能，具体操作如下：</p><pre><code class=\"hljs bash\"><span class=hljs-built_in>echo</span> <span class=hljs-string>&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=hljs-built_in>echo</span> <span class=hljs-string>&quot;net.ipv6.conf.default.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=hljs-built_in>echo</span> <span class=hljs-string>&quot;net.ipv6.conf.all.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf\nsysctl -p</code></pre><p>同时，也需要关闭 Linux 内核的 <code>rp_filter</code> 的严格模式，具体操作如下：</p><pre><code class=\"hljs bash\"><span class=hljs-built_in>echo</span> <span class=hljs-string>&quot;net.ipv4.conf.default.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf\n<span class=hljs-built_in>echo</span> <span class=hljs-string>&quot;net.ipv4.conf.all.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf\nsysctl -p</code></pre><p>除此之外，还需要关闭一些自动化的配置 iptables 防火墙的工具，如 UFW 。</p><h3 id=搭建-wireguard-隧道-2>搭建 WireGuard 隧道</h3><p>请参考 <a href=#DN42-WireGuard-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8>DN42 WireGuard 使用入门</a> 一节。</p><h3 id=配置-bgp-会话>配置 BGP 会话</h3><p>在 <code>/etc/bird/peers</code> 目录下新建一个文件，命名为 <code>&lt;名字&gt;.conf</code> 。</p><p>如果使用链路本地地址进行 Peer 的话，需要按照下面的配置示例进行配置：</p><pre><code class=\"hljs bird\">protocol bgp &lt;名字&gt; from dnpeers &#123;\n    neighbor &lt;对端链路本地地址&gt; % &#x27;&lt;对端 WireGuard 隧道名&gt;&#x27; as &lt;对端 ASN&gt;;\n    source address &lt;本地的链路本地地址&gt;;\n&#125;</code></pre><p>否则按照下面的配置示例进行配置：</p><pre><code class=\"hljs bird\">protocol bgp &lt;名字&gt; from dnpeers &#123;\n    neighbor &lt;对端 IPv6 地址&gt; as &lt;对端 ASN&gt;;\n&#125;</code></pre><p>然后使用 <code>birdc configure</code> 重载配置即可。</p><h2 id=更新日志>更新日志</h2><ul><li>2021-04-04 第一版 <sup>（2021 年 8 月 10 日存档于 <a href=https://web.archive.org/web/20210810062825/https://blog.baoshuo.ren/post/dn42-network/ >互联网档案馆</a>）</sup></li><li>2021-08-14 第二版</li></ul><h2 id=参考资料-4>参考资料</h2><ol><li><a href=https://dn42.dev/howto/Getting-Started>Getting Started - DN42 Wiki</a></li><li><a href=https://git.dn42.dev/dn42/registry/src/branch/master/README.md>Guide for creating a Pull Request - dn42/registry - DN42 Git</a></li><li><a href=https://lantian.pub/article/modify-website/dn42-experimental-network-2020.lantian/ >DN42 实验网络介绍及注册教程（2020-10-01 更新） - Lan Tian @ Blog</a></li><li><a href=https://datatracker.ietf.org/ >IETF Datatracker</a></li><li><a href=https://en.wikipedia.org/wiki/Unique_local_address>Unique local address - Wikipedia</a></li><li><a href=https://github.com/moesoha/bird-bgp-kickstart>BIRD 与 BGP 的新手开场 - Soha Jin - GitHub</a></li></ol>","thumb":"https://s1.baoshuo.ren/2021/04/03/R6IHLundNjpKxCD.png","date":"2021-04-04","updated":"2021-08-18","isoDate":"2021-04-04T03:29:32.000Z","isoUpdate":"2021-08-18T08:27:30.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"BGP","url":"/tags/BGP/"},{"name":"DN42","url":"/tags/DN42/"}],"license":null,"permalink":"https://blog.baoshuo.ren/post/dn42-network/","url":"/post/dn42-network/","prev":{"title":"搭建 BIRD Looking Glass 速成指北","url":"/post/bird-looking-glass/"},"next":{"title":"年轻人的第一个 ASN","url":"/post/my-own-asn/"},"toc":{"1":{"1":{"text":"注册前的准备","id":"注册前的准备"},"2":{"text":"克隆 DN42 注册表 Git 仓库","id":"克隆-dn42-注册表-git-仓库"},"3":{"text":"注册维护者","id":"注册维护者"},"4":{"text":"注册联系人","id":"注册联系人"},"5":{"text":"注册 ASN","id":"注册-asn"},"6":{"text":"注册 IPv4 地址块","id":"注册-ipv4-地址块"},"7":{"text":"注册 IPv6 地址块","id":"注册-ipv6-地址块"},"8":{"text":"添加路由记录","id":"添加路由记录"},"9":{"text":"上传更改到 DN42 注册表","id":"上传更改到-dn42-注册表"},"10":{"text":"注意事项","id":"注意事项"},"text":"注册 DN42","id":"注册-dn42"},"2":{"1":{"text":"安装 BIRD2","id":"安装-bird2"},"2":{"text":"编写 BIRD 配置文件","id":"编写-bird-配置文件"},"3":{"text":"下载 ROA 配置文件","id":"下载-roa-配置文件"},"4":{"text":"重新加载 BIRD 配置","id":"重新加载-bird-配置"},"text":"DN42 BIRD2 使用入门","id":"dn42-bird2-使用入门"},"3":{"1":{"text":"安装 WireGuard","id":"安装-wireguard"},"2":{"text":"生成公钥与私钥","id":"生成公钥与私钥"},"3":{"text":"搭建 WireGuard 隧道","id":"搭建-wireguard-隧道"},"4":{"text":"检测隧道状态","id":"检测隧道状态"},"text":"DN42 WireGuard 使用入门","id":"dn42-wireguard-使用入门"},"4":{"1":{"text":"系统配置","id":"系统配置"},"2":{"text":"搭建 WireGuard 隧道","id":"搭建-wireguard-隧道-2"},"3":{"text":"配置 BGP 会话","id":"配置-bgp-会话"},"text":"与其他网络进行对等互联","id":"与其他网络进行对等互联"},"5":{"text":"更新日志","id":"更新日志"},"6":{"text":"参考资料","id":"参考资料-4"}},"hasToc":true,"comments":true,"wordCount":"约 5.2 千字"},"__post":true},"__N_SSG":true}