{"pageProps":{"title":"USTC Hackergame 2021 Write Up - 宝硕博客","post":{"title":"USTC Hackergame 2021 Write Up","excerpt":null,"content":"<h2 id=签到>签到</h2><p><img src=https://s1.baoshuo.ren/2021/10/24/6HiDz8gjEVMQsph.png alt=\"\" loading=lazy></p><p>点击 <code>Next</code> 键，发现页面的 URL 后多了个 <code>?page=1</code> ，结合第一个页面中的 <code>1970-01-01</code> 字样，可以判断出来 <code>page</code> 参数应为比赛期间的 Unix 时间戳。</p><p>示例：<a href=\"http://202.38.93.111:10000/?page=1635002186\">http://202.38.93.111:10000/?page=1635002186</a></p><h2 id=进制十六——参上>进制十六——参上</h2><p><img src=https://s1.baoshuo.ren/2021/10/24/swZPQblAxcqCtEz.png alt=\"\" loading=lazy></p><p>可以照着 16 进制数据搞一搞，然后 flag 就出来了：</p><p><img src=https://s1.baoshuo.ren/2021/10/24/poz4TdtU8nVPg75.png alt=\"\" loading=lazy></p><h2 id=去吧！追寻自由的电波>去吧！追寻自由的电波</h2><p>下载音频之后使用 Adobe Audition 进行变速即可。</p><p><img src=https://s1.baoshuo.ren/2021/10/24/GyoM3w185UhPxbz.png alt=\"\" loading=lazy></p><h2 id=旅行照片>旅行照片</h2><p><img src=https://s1.baoshuo.ren/2021/10/25/lHJ6SwxrW8mQf53.png alt=\"\" loading=lazy></p><p>从图片中可以看出拍摄者在 14 层，并且楼下有一个蓝色的肯德基，那么使用 Google 搜索关键词 <code>海洋 蓝色 KFC</code> 可以得到以下结果：</p><p><img src=https://s1.baoshuo.ren/2021/10/25/FzxEHLfX5ylKkiN.png alt=\"\" loading=lazy></p><p>从照片的描述中可以得到这家肯德基位于秦皇岛新澳海底世界。</p><p>在百度地图上可以找到这家肯德基的电话、详细位置。同时按照卫星图可以推断出拍摄者所在的方向，进而推断出拍摄的大致时间。</p><p><img src=https://s1.baoshuo.ren/2021/10/25/crgFKpCOaoq8WzN.png alt=\"\" loading=lazy></p><p>flag 获取成功。</p><h2 id=flag-助力大红包>FLAG 助力大红包</h2><p>查看点击助力按钮后的浏览器请求可以发现请求时有一个名为 IP 的参数，尝试修改这个参数发现会报错提示前后端检测 IP 不一致，那么考虑添加 <code>X-Forwarded-For</code> 头伪造经过代理的来源 IP 地址即可。</p><p>比赛平台的速率限制为每秒最多请求一次，所以在每次请求后还需要等待 1 秒。</p><pre><code class=\"hljs bash\"><span class=hljs-keyword>for</span> ((i=0; <span class=hljs-variable>$i</span> &lt;= 255; i = (<span class=hljs-variable>$i</span> + 1))); <span class=hljs-keyword>do</span>\n    curl <span class=hljs-string>&quot;http://202.38.93.111:10888/invite/<span class=hljs-variable>$invite_id</span>&quot;</span> -H <span class=hljs-string>&quot;X-Forwarded-For: <span class=hljs-variable>$i</span>.11.45.14&quot;</span> -d <span class=hljs-string>&quot;ip=<span class=hljs-variable>$i</span>.11.45.14&quot;</span>\n    <span class=hljs-built_in>sleep</span> 1\n<span class=hljs-keyword>done</span></code></pre><h2 id=猫咪问答-pro-max>猫咪问答 Pro Max</h2><ol><li>2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（<a href=http://sec.ustc.edu.cn>sec.ustc.edu.cn</a>）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？</li></ol><p>Wayback Machine 是个好东西啊。（<a href=https://web.archive.org/web/20170515053637/http://sec.ustc.edu.cn/doku.php/codes>页面存档</a>）</p><ol start=2><li>中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？</li></ol><p><img src=https://s1.baoshuo.ren/2021/10/24/32Oq1tW86oke7rI.png alt=\"\" loading=lazy></p><p>LUG 官网上直接搜就出来了。但实际上的答案应该是 5 ，可能是官网没更新最新信息。</p><ol start=3><li>中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？</li></ol><blockquote><p>谷歌是你的好朋友。 <cite>Hackergame 2020 「猫咪问答++」 flag 。</cite></p></blockquote><p><img src=https://s1.baoshuo.ren/2021/10/24/MCq9mGNQFUDoHy1.png alt=\"\" loading=lazy></p><p>可以看到正确答案为 <code>Development Team of Library</code> 。</p><ol start=4><li>在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？</li></ol><p>可以在 <a href=http://sigbovik.org/2021/proceedings.pdf>the record of the proceedings of SIGBOVIK 2021</a>（<a href=https://web.archive.org/web/20210626111527/http://www.sigbovik.org/2021/proceedings.pdf>页面存档</a>）的 212 页找到这篇论文。</p><ol start=5><li>不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？</li></ol><p>搜索关键词：<a href=\"https://www.google.com/search?q=IETF+Protocol+Police\">IETF Protocol Police</a></p><p>可以搜到这个「搞笑 RFC」：<a href=https://datatracker.ietf.org/doc/html/rfc8962#section-6>Establishing the Protocol Police</a> ，在第 6 节中有相关介绍。</p><p>正确答案应为 <code>/dev/null</code> 。</p><h2 id=卖瓜>卖瓜</h2><p>最开始拿到题我先想的是能不能用负数凑，结果发现不行，于是考虑溢出。</p><p>试了试发现使用 6 斤瓜无法触发溢出，而使用 9 斤瓜的就可以触发溢出了。</p><p><img src=https://s1.baoshuo.ren/2021/10/27/HGwsJeqB63SZrNA.png alt=\"\" loading=lazy></p><p>写了个脚本跑一跑，试出来了几个负数，挨个试了下发现放 2e18 个 9 斤瓜可以凑到 20 斤。</p><p><img src=https://s1.baoshuo.ren/2021/10/27/APRwaqf6SO3DTyH.png alt=\"\" loading=lazy></p><p>然后在计算器里算了一下，只需要加 6 斤的瓜和 9 斤的瓜各 29782938247303441 个就能让称的显示变成 -1 。</p><p>接下来放 2 个 6 斤瓜和 1 个 9 斤瓜就能拿到 flag 了。</p><h2 id=透明的文件>透明的文件</h2><p>本题与 <a href=https://en.wikipedia.org/wiki/ANSI_escape_code>ANSI Escape Code</a> 有关。</p><p>首先需要将文件中的 <code>[</code> 替换成 <code>\\033[</code> ，然后再找一个支持显示 ANSI 控制码的终端输出。</p><p>然后发现一片空白，啥也没有。</p><p>捣鼓到快怀疑人生才发现终端上的某些字符被遮挡了，进而想到这个脚本可能清除了终端上某些地方的字符来显示 flag 。</p><p>先编写一个复读函数用来填满终端：</p><pre><code class=\"hljs bash\"><span class=hljs-function><span class=hljs-title>repeat</span></span>() &#123;\n    <span class=hljs-keyword>for</span> ((i = 1; <span class=hljs-variable>$i</span> &lt;= <span class=hljs-variable>$1</span>; i = (<span class=hljs-variable>$i</span> + 1))); <span class=hljs-keyword>do</span>\n        <span class=hljs-built_in>echo</span> -n <span class=hljs-string>&quot;▉&quot;</span>\n    <span class=hljs-keyword>done</span>\n&#125;</code></pre><p><img src=https://s1.baoshuo.ren/2021/10/29/mniZ4Qch5rHCxWI.png alt=\"\" loading=lazy></p><p>再配合上方替换好的文件输出即可，效果如图。</p><h2 id=amnesia>Amnesia</h2><h3 id=轻度失忆>轻度失忆</h3><p>使用 <code>putchar()</code> 函数即可解决此问题。</p><pre><code class=\"hljs cpp\"><span class=hljs-meta>#<span class=hljs-keyword>include</span> <span class=hljs-string>&lt;stdio.h&gt;</span></span>\n\n<span class=hljs-function><span class=hljs-type>int</span> <span class=hljs-title>main</span><span class=hljs-params>()</span> </span>&#123;\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;H&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;e&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;l&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;l&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;o&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;,&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27; &#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;w&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;o&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;r&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;l&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;d&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;!&#x27;</span>);\n    <span class=hljs-built_in>putchar</span>(<span class=hljs-string>&#x27;\\n&#x27;</span>);\n    <span class=hljs-keyword>return</span> <span class=hljs-number>0</span>;\n&#125;</code></pre><h2 id=图之上的信息>图之上的信息</h2><p>可以使用 <code>__schema</code> 字段查询所有存在的类型：</p><pre><code class=\"hljs graphql\">&#123;\n  __schema &#123;\n    types &#123;\n      name\n    &#125;\n  &#125;\n&#125;</code></pre><p><img src=https://s1.baoshuo.ren/2021/10/25/OpGkfi3FyAbugwT.png alt=\"\" loading=lazy></p><p>发现一个名为 <code>GUser</code> 的类型，再构造一个语句查询类型结构：</p><pre><code class=\"hljs graphql\">&#123;\n  __type(name: &quot;GUser&quot;) &#123;\n    name\n    fields &#123;\n      name\n      type &#123;\n        name\n        kind\n        ofType &#123;\n          name\n          kind\n        &#125;\n      &#125;\n    &#125;\n  &#125;\n&#125;</code></pre><p><img src=https://s1.baoshuo.ren/2021/10/25/XzhIAwocnVMx6Lk.png alt=\"\" loading=lazy></p><p>顺便获取了下 <code>GNote</code> 类型的结构：</p><p><img src=https://s1.baoshuo.ren/2021/10/25/9mtWaPAFoYfDLXu.png alt=\"\" loading=lazy></p><p>进行查询即可得到 flag ：</p><p><img src=https://s1.baoshuo.ren/2021/10/25/wKs5BpteaYbAcoP.png alt=\"\" loading=lazy></p><h2 id=后记-6>后记</h2><p>今年拿的名次比去年的高，感觉在这一年里自己的 web 水平有很大的提升，但 math 还是一如既往地爆了零，和我的数学中考成绩一样的烂。</p><p>以后如果有时间的话逆向、汇编什么的也都要学一学，不然的话每次一看见 binary 就有点不知所措、无从下手属实不太好。</p><p>推荐阅读：<a href=/post/ustc-hackergame-2020-write-up/ >USTC Hackergame 2020 Write Up</a>。</p>","thumb":null,"date":"2021-10-30","updated":"2021-10-30","isoDate":"2021-10-30T04:00:00.000Z","isoUpdate":"2021-10-30T04:00:00.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"CTF","url":"/tags/CTF/"},{"name":"Hackergame","url":"/tags/Hackergame/"}],"license":null,"permalink":"https://blog.baoshuo.ren/post/ustc-hackergame-2021-write-up/","url":"/post/ustc-hackergame-2021-write-up/","prev":{"title":"浅谈静态博客的自动部署方案","url":"/post/auto-deploy-static-blog/"},"next":{"title":"浅谈跨域资源共享（CORS）","url":"/post/cors/"},"toc":{"1":{"text":"签到","id":"签到"},"2":{"text":"进制十六——参上","id":"进制十六——参上"},"3":{"text":"去吧！追寻自由的电波","id":"去吧！追寻自由的电波"},"4":{"text":"旅行照片","id":"旅行照片"},"5":{"text":"FLAG 助力大红包","id":"flag-助力大红包"},"6":{"text":"猫咪问答 Pro Max","id":"猫咪问答-pro-max"},"7":{"text":"卖瓜","id":"卖瓜"},"8":{"text":"透明的文件","id":"透明的文件"},"9":{"1":{"text":"轻度失忆","id":"轻度失忆"},"text":"Amnesia","id":"amnesia"},"10":{"text":"图之上的信息","id":"图之上的信息"},"11":{"text":"后记","id":"后记-6"}},"hasToc":true,"comments":true,"wordCount":"约 1.4 千字"},"__post":true},"__N_SSG":true}