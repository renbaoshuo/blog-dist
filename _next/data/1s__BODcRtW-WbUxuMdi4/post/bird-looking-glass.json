{"pageProps":{"title":"搭建 BIRD Looking Glass 速成指北 - 宝硕博客","post":{"title":"搭建 BIRD Looking Glass 速成指北","excerpt":"BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 蓝天 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。","content":"<p>BIRD 是 Linux 上常用的一款 BGP 路由软件。bird-lg-go 是 <a href=https://lantian.pub>蓝天</a> 使用 Go 语言编写的 Looking Glass 程序，内存占用比原版 bird-lg 更低。它提供了一个网页面板，可以显示各个服务器上的 BIRD 路由软件的状态，以及查询到指定 IP 的路由。</p><span id=more></span><ul><li>项目地址：<a href=https://github.com/xddxdd/bird-lg-go>https://github.com/xddxdd/bird-lg-go</a></li><li>成品： <a href=https://lg.dn42.as141776.net>https://lg.dn42.as141776.net</a></li></ul><h2 id=安装-docker-和-docker-compose>安装 Docker 和 Docker Compose</h2><p>虽然这个程序可以直接运行，但我还是比较喜欢套个 Docker 防止污染环境。</p><pre><code class=\"hljs bash\">curl -sSL https://get.docker.com | sh\npip install docker-compose</code></pre><h2 id=编排-docker-compose-服务>编排 Docker Compose 服务</h2><p>在运行 web 的服务器上找个地方（如 <code>/var/bird-lg/</code>），将下面的内容修改后写入 <code>docker-compose.yml</code> 中：</p><pre><code class=\"hljs yml\"><span class=hljs-attr>version:</span> <span class=hljs-string>&#x27;3&#x27;</span>\n\n<span class=hljs-attr>services:</span>\n  <span class=hljs-attr>bird-lg:</span>\n    <span class=hljs-attr>image:</span> <span class=hljs-string>xddxdd/bird-lg-go</span>\n    <span class=hljs-attr>container_name:</span> <span class=hljs-string>bird-lg</span>\n    <span class=hljs-attr>restart:</span> <span class=hljs-string>always</span>\n    <span class=hljs-attr>environment:</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>BIRDLG_SERVERS=cn1,eu1</span> <span class=hljs-comment># 节点列表，以逗号分隔</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>BIRDLG_DOMAIN=dn42.as141776.net</span> <span class=hljs-comment># 节点 endpiont 后缀</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>BIRDLG_TITLE_BRAND=Looking</span> <span class=hljs-string>Glass</span> <span class=hljs-comment># 标签栏上显示的名称</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>BIRDLG_NAVBAR_BRAND=Looking</span> <span class=hljs-string>Glass</span> <span class=hljs-comment># 页面上显示的名称</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>BIRDLG_WHOIS=whois.lantian.dn42</span> <span class=hljs-comment># Whois 服务器地址</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>BIRDLG_DNS_INTERFACE=asn.dn42</span>\n    <span class=hljs-attr>ports:</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>&#x27;5000:5000&#x27;</span>\n  <span class=hljs-attr>bird-lgproxy:</span>\n    <span class=hljs-attr>image:</span> <span class=hljs-string>xddxdd/bird-lgproxy-go</span>\n    <span class=hljs-attr>container_name:</span> <span class=hljs-string>bird-lgproxy</span>\n    <span class=hljs-attr>restart:</span> <span class=hljs-string>always</span>\n    <span class=hljs-attr>volumes:</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>&#x27;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&#x27;</span>\n    <span class=hljs-attr>ports:</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>&#x27;8000:8000&#x27;</span></code></pre><p>在各个节点上只需要写入下面内容即可：</p><pre><code class=\"hljs yml\"><span class=hljs-attr>version:</span> <span class=hljs-string>&#x27;3&#x27;</span>\n\n<span class=hljs-attr>services:</span>\n  <span class=hljs-attr>bird-lgproxy:</span>\n    <span class=hljs-attr>image:</span> <span class=hljs-string>xddxdd/bird-lgproxy-go</span>\n    <span class=hljs-attr>container_name:</span> <span class=hljs-string>bird-lgproxy</span>\n    <span class=hljs-attr>restart:</span> <span class=hljs-string>always</span>\n    <span class=hljs-attr>volumes:</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>&#x27;/var/run/bird/bird.ctl:/var/run/bird/bird.ctl&#x27;</span>\n    <span class=hljs-attr>ports:</span>\n      <span class=hljs-bullet>-</span> <span class=hljs-string>&#x27;8000:8000&#x27;</span></code></pre><p>之后启动 Docker 容器：</p><pre><code class=\"hljs bash\">docker-compose up -d</code></pre><h2 id=使用-nginx-反代页面>使用 nginx 反代页面</h2><p>使用下方的配置启动反向代理即可。</p><pre><code class=\"hljs nginx\"><span class=hljs-section>server</span> &#123;\n    <span class=hljs-attribute>listen</span>      *:<span class=hljs-number>80</span>;\n    <span class=hljs-attribute>listen</span>      [::]:<span class=hljs-number>80</span>;\n    <span class=hljs-attribute>server_name</span> lg.dn42.as141776.net;\n\n    <span class=hljs-comment># reverse proxy</span>\n    <span class=hljs-section>location</span> / &#123;\n        <span class=hljs-attribute>proxy_pass</span>                         http://127.0.0.1:5000;\n        <span class=hljs-attribute>proxy_http_version</span>                 <span class=hljs-number>1</span>.<span class=hljs-number>1</span>;\n        <span class=hljs-attribute>proxy_cache_bypass</span>                 <span class=hljs-variable>$http_upgrade</span>;\n\n        <span class=hljs-comment># Proxy headers</span>\n        <span class=hljs-attribute>proxy_set_header</span> Upgrade           <span class=hljs-variable>$http_upgrade</span>;\n        <span class=hljs-attribute>proxy_set_header</span> Host              <span class=hljs-variable>$host</span>;\n        <span class=hljs-attribute>proxy_set_header</span> X-Real-IP         <span class=hljs-variable>$remote_addr</span>;\n        <span class=hljs-attribute>proxy_set_header</span> X-Forwarded-For   <span class=hljs-variable>$proxy_add_x_forwarded_for</span>;\n        <span class=hljs-attribute>proxy_set_header</span> X-Forwarded-Proto <span class=hljs-variable>$scheme</span>;\n        <span class=hljs-attribute>proxy_set_header</span> X-Forwarded-Host  <span class=hljs-variable>$host</span>;\n        <span class=hljs-attribute>proxy_set_header</span> X-Forwarded-Port  <span class=hljs-variable>$server_port</span>;\n\n        <span class=hljs-comment># Proxy timeouts</span>\n        <span class=hljs-attribute>proxy_connect_timeout</span>              <span class=hljs-number>60s</span>;\n        <span class=hljs-attribute>proxy_send_timeout</span>                 <span class=hljs-number>60s</span>;\n        <span class=hljs-attribute>proxy_read_timeout</span>                 <span class=hljs-number>60s</span>;\n    &#125;\n&#125;</code></pre><h2 id=配置-dns-解析>配置 DNS 解析</h2><p>bird-lg-go 的节点 endpiont 生成逻辑是 <code>http://[节点].[endpoint后缀]:8000</code> ，如 <code>http://eu1.dn42.as141776.net:8000</code> ，所以只需要去配置对应的解析。</p><blockquote><p><strong>警告</strong></p><p>建议解析到节点的公网 IP 上，以免 DN42 炸掉时 Looking Glass 也一并炸掉。</p></blockquote><p>配置示例：</p><pre><code class=\"hljs stylus\">eu1<span class=hljs-selector-class>.dn42</span><span class=hljs-selector-class>.as141776</span><span class=hljs-selector-class>.net</span>.  <span class=hljs-number>3600</span>    IN      A       <span class=hljs-number>136.243</span>.<span class=hljs-number>221.96</span>\ncn1<span class=hljs-selector-class>.dn42</span><span class=hljs-selector-class>.as141776</span><span class=hljs-selector-class>.net</span>.  <span class=hljs-number>3600</span>    IN      CNAME   home<span class=hljs-selector-class>.baoshuo</span><span class=hljs-selector-class>.ren</span>.</code></pre><h2 id=成果>成果</h2><p><img src=https://s1.baoshuo.ren/2021/05/03/iaFfTWAhpdZGJ9t.png alt=\"\" loading=lazy></p>","thumb":null,"date":"2021-05-03","updated":"2021-05-03","isoDate":"2021-05-03T04:23:00.000Z","isoUpdate":"2021-05-03T04:23:00.000Z","categories":[{"name":"技术向","url":"/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"}],"tags":[{"name":"BIRD","url":"/tags/BIRD/"},{"name":"BGP","url":"/tags/BGP/"},{"name":"DN42","url":"/tags/DN42/"}],"license":null,"permalink":"https://blog.baoshuo.ren/post/bird-looking-glass/","url":"/post/bird-looking-glass/","prev":{"title":"使用 Cloudflare Warp 为单栈 VPS 添加双栈网络访问","url":"/post/vps-cloudflare-warp/"},"next":{"title":"初探 DN42 网络","url":"/post/dn42-network/"},"toc":{"1":{"text":"安装 Docker 和 Docker Compose","id":"安装-docker-和-docker-compose"},"2":{"text":"编排 Docker Compose 服务","id":"编排-docker-compose-服务"},"3":{"text":"使用 nginx 反代页面","id":"使用-nginx-反代页面"},"4":{"text":"配置 DNS 解析","id":"配置-dns-解析"},"5":{"text":"成果","id":"成果"}},"hasToc":true,"comments":true,"wordCount":"548 字"},"__post":true},"__N_SSG":true}